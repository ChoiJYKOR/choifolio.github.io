{
  "version": 3,
  "sources": ["../../@lexical/react/useLexicalEditable.dev.mjs", "../../@lexical/react/LexicalReactProviderExtension.dev.mjs", "../../@lexical/react/LexicalRichTextPlugin.dev.mjs"],
  "sourcesContent": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { useLayoutEffect, useEffect, useMemo, useState, useRef } from 'react';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// This workaround is no longer necessary in React 19,\n// but we currently support React >=17.x\n// https://github.com/facebook/react/pull/26395\nconst useLayoutEffectImpl = CAN_USE_DOM ? useLayoutEffect : useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Shortcut to Lexical subscriptions when values are used for render.\n * @param subscription - The function to create the {@link LexicalSubscription}. This function's identity must be stable (e.g. defined at module scope or with useCallback).\n */\nfunction useLexicalSubscription(subscription) {\n  const [editor] = useLexicalComposerContext();\n  const initializedSubscription = useMemo(() => subscription(editor), [editor, subscription]);\n  const [value, setValue] = useState(() => initializedSubscription.initialValueFn());\n  const valueRef = useRef(value);\n  useLayoutEffectImpl(() => {\n    const {\n      initialValueFn,\n      subscribe\n    } = initializedSubscription;\n    const currentValue = initialValueFn();\n    if (valueRef.current !== currentValue) {\n      valueRef.current = currentValue;\n      setValue(currentValue);\n    }\n    return subscribe(newValue => {\n      valueRef.current = newValue;\n      setValue(newValue);\n    });\n  }, [initializedSubscription, subscription]);\n  return value;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction subscription(editor) {\n  return {\n    initialValueFn: () => editor.isEditable(),\n    subscribe: callback => {\n      return editor.registerEditableListener(callback);\n    }\n  };\n}\n\n/**\n * Get the current value for {@link LexicalEditor.isEditable}\n * using {@link useLexicalSubscription}.\n * You should prefer this over manually observing the value with\n * {@link LexicalEditor.registerEditableListener},\n * which is a bit tricky to do correctly, particularly when using\n * React StrictMode (the default for development) or concurrency.\n */\nfunction useLexicalEditable() {\n  return useLexicalSubscription(subscription);\n}\n\nexport { useLexicalEditable };\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { defineExtension } from 'lexical';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * An extension used to declare that there is a LexicalExtensionComposer or\n * ReactPluginHostExtension available so that we can issue runtime warnings\n * when plugins that depend on React are hosted in an environment\n * where it is not ever going to be rendered.\n *\n * It is a separate extension so it can be used as a peer dependency.\n */\nconst ReactProviderExtension = defineExtension({\n  name: '@lexical/react/ReactProvider'\n});\n\nexport { ReactProviderExtension };\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { useLexicalEditable } from '@lexical/react/useLexicalEditable';\nimport { LexicalBuilder } from '@lexical/extension';\nimport { ReactProviderExtension } from '@lexical/react/ReactProviderExtension';\nimport { useLayoutEffect, useEffect, useState, useMemo, Suspense } from 'react';\nimport { flushSync, createPortal } from 'react-dom';\nimport { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nimport { $canShowPlaceholderCurry } from '@lexical/text';\nimport { mergeRegister } from '@lexical/utils';\nimport { registerDragonSupport } from '@lexical/dragon';\nimport { registerRichText } from '@lexical/rich-text';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// Do not require this module directly! Use normal `invariant` calls.\n\nfunction formatDevErrorMessage(message) {\n  throw new Error(message);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// This workaround is no longer necessary in React 19,\n// but we currently support React >=17.x\n// https://github.com/facebook/react/pull/26395\nconst useLayoutEffectImpl = CAN_USE_DOM ? useLayoutEffect : useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction useDecorators(editor, ErrorBoundary) {\n  const [decorators, setDecorators] = useState(() => editor.getDecorators());\n\n  // Subscribe to changes\n  useLayoutEffectImpl(() => {\n    return editor.registerDecoratorListener(nextDecorators => {\n      flushSync(() => {\n        setDecorators(nextDecorators);\n      });\n    });\n  }, [editor]);\n  useEffect(() => {\n    // If the content editable mounts before the subscription is added, then\n    // nothing will be rendered on initial pass. We can get around that by\n    // ensuring that we set the value.\n    setDecorators(editor.getDecorators());\n  }, [editor]);\n\n  // Return decorators defined as React Portals\n  return useMemo(() => {\n    const decoratedPortals = [];\n    const decoratorKeys = Object.keys(decorators);\n    for (let i = 0; i < decoratorKeys.length; i++) {\n      const nodeKey = decoratorKeys[i];\n      const reactDecorator = /*#__PURE__*/jsx(ErrorBoundary, {\n        onError: e => editor._onError(e),\n        children: /*#__PURE__*/jsx(Suspense, {\n          fallback: null,\n          children: decorators[nodeKey]\n        })\n      });\n      const element = editor.getElementByKey(nodeKey);\n      if (element !== null) {\n        decoratedPortals.push(/*#__PURE__*/createPortal(reactDecorator, element, nodeKey));\n      }\n    }\n    return decoratedPortals;\n  }, [ErrorBoundary, decorators, editor]);\n}\n\nfunction isUsingReactExtension(editor) {\n  const builder = LexicalBuilder.maybeFromEditor(editor);\n  if (builder && builder.hasExtensionByName(ReactProviderExtension.name)) {\n    for (const name of ['@lexical/plain-text', '@lexical/rich-text']) {\n      if (!!builder.hasExtensionByName(name)) {\n        formatDevErrorMessage(`LexicalBuilder: @lexical/react legacy text plugins conflict with the ${name} extension. Remove the legacy <RichTextPlugin/> or <PlainTextPlugin/> component.`);\n      }\n    }\n    return true;\n  }\n  return false;\n}\nfunction Decorators({\n  editor,\n  ErrorBoundary\n}) {\n  return useDecorators(editor, ErrorBoundary);\n}\n\n/**\n * @internal\n *\n * When using @lexical/extension, the ReactProvider is expected to handle\n * rendering decorators. This component allows RichTextPlugin and\n * PlainTextPlugin to be used in extension projects that have not yet\n * migrated to use RichTextExtension or PlainTextExtension.\n **/\nfunction LegacyDecorators({\n  editor,\n  ErrorBoundary\n}) {\n  return isUsingReactExtension(editor) ? null : /*#__PURE__*/jsx(Decorators, {\n    editor: editor,\n    ErrorBoundary: ErrorBoundary\n  });\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction canShowPlaceholderFromCurrentEditorState(editor) {\n  const currentCanShowPlaceholder = editor.getEditorState().read($canShowPlaceholderCurry(editor.isComposing()));\n  return currentCanShowPlaceholder;\n}\nfunction useCanShowPlaceholder(editor) {\n  const [canShowPlaceholder, setCanShowPlaceholder] = useState(() => canShowPlaceholderFromCurrentEditorState(editor));\n  useLayoutEffectImpl(() => {\n    function resetCanShowPlaceholder() {\n      const currentCanShowPlaceholder = canShowPlaceholderFromCurrentEditorState(editor);\n      setCanShowPlaceholder(currentCanShowPlaceholder);\n    }\n    resetCanShowPlaceholder();\n    return mergeRegister(editor.registerUpdateListener(() => {\n      resetCanShowPlaceholder();\n    }), editor.registerEditableListener(() => {\n      resetCanShowPlaceholder();\n    }));\n  }, [editor]);\n  return canShowPlaceholder;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction useRichTextSetup(editor) {\n  useLayoutEffectImpl(() => {\n    return mergeRegister(registerRichText(editor), registerDragonSupport(editor));\n\n    // We only do this for init\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editor]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction RichTextPlugin({\n  contentEditable,\n  // TODO Remove. This property is now part of ContentEditable\n  placeholder = null,\n  ErrorBoundary\n}) {\n  const [editor] = useLexicalComposerContext();\n  useRichTextSetup(editor);\n  return /*#__PURE__*/jsxs(Fragment, {\n    children: [contentEditable, /*#__PURE__*/jsx(Placeholder, {\n      content: placeholder\n    }), /*#__PURE__*/jsx(LegacyDecorators, {\n      editor: editor,\n      ErrorBoundary: ErrorBoundary\n    })]\n  });\n}\n\n// TODO remove\nfunction Placeholder({\n  content\n}) {\n  const [editor] = useLexicalComposerContext();\n  const showPlaceholder = useCanShowPlaceholder(editor);\n  const editable = useLexicalEditable();\n  if (!showPlaceholder) {\n    return null;\n  }\n  if (typeof content === 'function') {\n    return content(editable);\n  } else {\n    return content;\n  }\n}\n\nexport { RichTextPlugin };\n"],
  "mappings": "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",
  "names": ["subscription", "import_react", "CAN_USE_DOM", "useLayoutEffectImpl"]
}
