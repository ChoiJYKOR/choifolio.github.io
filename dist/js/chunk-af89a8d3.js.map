{"version":3,"file":"chunk-af89a8d3.js","sources":["../../src/services/api.ts"],"sourcesContent":["import axios from 'axios'\nimport {\n  // 인증 관련 타입\n  LoginRequest,\n  LoginResponse,\n  VerifyResponse,\n  LogoutResponse,\n  // Book 관련 타입\n  Book,\n  BookFormData,\n  BookUpdateData,\n  LearningFormData,\n  // Category 관련 타입\n  Category,\n  CategoryFormData,\n  CategoryUsage,\n  // VideoLearning 관련 타입\n  VideoLearning,\n  VideoLearningFormData,\n  // VideoPlaylist 관련 타입\n  VideoPlaylist,\n  VideoPlaylistFormData,\n  PlaylistVideo,\n  PlaylistVideoFormData,\n  // Experience 관련 타입\n  Experience,\n  ExperienceFormData,\n  ExperienceUpdateData,\n  // Project 관련 타입\n  Project,\n  ProjectFormData,\n  ProjectUpdateData,\n  // Skill 관련 타입\n  Skill,\n  SkillCategory,\n  SkillFormData,\n  SkillCategoryFormData,\n  // Settings 관련 타입\n  SiteSettings,\n  SettingsUpdateData,\n  // Contact 관련 타입\n  ContactFormData,\n  ContactResponse,\n} from '../types'\n\n// 환경 변수에서 API URL 가져오기 (개발/운영 환경 대응)\n// Vite에서는 import.meta.env를 사용\n// 개발 환경에서는 Vite 프록시 사용 (/api), 프로덕션에서는 직접 연결\nconst API_BASE_URL = (import.meta.env.VITE_API_URL as string) || \n  (import.meta.env.DEV ? '/api' : 'http://localhost:5000/api')\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  withCredentials: true, // HttpOnly 쿠키를 위한 credentials 포함\n  timeout: 30000, // 30초 타임아웃\n})\n\n// HttpOnly 쿠키 사용으로 토큰 인터셉터 제거\n// 브라우저가 자동으로 쿠키를 포함하여 전송\n\n// Auth API - 타입 안정성 강화\nexport const authAPI = {\n  login: (username: string, password: string) =>\n    api.post<LoginResponse>('/auth/login', { username, password } as LoginRequest),\n  verify: () => api.post<VerifyResponse>('/auth/verify'), // POST 메서드로 수정 (백엔드와 일치)\n  logout: () => api.post<LogoutResponse>('/auth/logout'),\n}\n\n// Books API - 타입 안정성 강화 (개선된 UpdateData 타입 사용)\nexport const booksAPI = {\n  getAll: () => api.get<{ data: Book[] }>('/books'),\n  getById: (id: string) => api.get<Book>(`/books/${id}`),\n  create: (data: BookFormData) => api.post<Book>('/books', data),\n  update: (id: string, data: BookUpdateData) => api.put<Book>(`/books/${id}`, data),\n  delete: (id: string) => api.delete(`/books/${id}`),\n}\n\n// Chapters API - 목차 관리 (새로 분리)\nexport const chaptersAPI = {\n  getByBook: (bookId: string) => api.get(`/books/${bookId}/chapters`),\n  create: (bookId: string, data: { title: string; order: number }) => \n    api.post(`/books/${bookId}/chapters`, data),\n  update: (bookId: string, chapterId: string, data: { title: string; order: number }) => \n    api.put(`/books/${bookId}/chapters/${chapterId}`, data),\n  delete: (bookId: string, chapterId: string) => \n    api.delete(`/books/${bookId}/chapters/${chapterId}`),\n  reorder: (bookId: string, chapterIds: string[]) => \n    api.put(`/books/${bookId}/chapters/reorder`, { chapterIds }),\n}\n\n// Learnings API - 학습 내용 관리 (새로 분리)\nexport const learningsAPI = {\n  // 서적 직접 학습 내용\n  getByBook: (bookId: string) => api.get(`/books/${bookId}/learnings`),\n  createForBook: (bookId: string, data: LearningFormData) => \n    api.post(`/books/${bookId}/learnings`, data),\n  updateForBook: (bookId: string, learningId: string, data: LearningFormData) => \n    api.put(`/books/${bookId}/learnings/${learningId}`, data),\n  deleteForBook: (bookId: string, learningId: string) => \n    api.delete(`/books/${bookId}/learnings/${learningId}`),\n  \n  // 목차별 학습 내용\n  getByChapter: (bookId: string, chapterId: string) => \n    api.get(`/books/${bookId}/chapters/${chapterId}/learnings`),\n  createForChapter: (bookId: string, chapterId: string, data: LearningFormData) => \n    api.post(`/books/${bookId}/chapters/${chapterId}/learnings`, data),\n  updateForChapter: (bookId: string, chapterId: string, learningId: string, data: LearningFormData) => \n    api.put(`/books/${bookId}/chapters/${chapterId}/learnings/${learningId}`, data),\n  deleteForChapter: (bookId: string, chapterId: string, learningId: string) => \n    api.delete(`/books/${bookId}/chapters/${chapterId}/learnings/${learningId}`),\n  \n  // 🌟 스킬 연결/해제 (skillIds 업데이트)\n  updateSkills: (bookId: string, learningId: string, skillIds: string[]) => \n    api.patch(`/books/${bookId}/learnings/${learningId}/skills`, { skillIds }),\n}\n\n// Experiences API - 타입 안정성 강화 (개선된 UpdateData 타입 사용)\nexport const experiencesAPI = {\n  getAll: () => api.get<{ data: Experience[] }>('/experiences'),\n  getById: (id: string) => api.get<Experience>(`/experiences/${id}`),\n  create: (data: ExperienceFormData) => api.post<Experience>('/experiences', data),\n  update: (id: string, data: ExperienceUpdateData) => api.put<Experience>(`/experiences/${id}`, data),\n  delete: (id: string) => api.delete(`/experiences/${id}`),\n}\n\n// Projects API - 타입 안정성 강화 및 getById 추가 (개선된 UpdateData 타입 사용)\nexport const projectsAPI = {\n  getAll: () => api.get<{ data: Project[] }>('/projects'),\n  getById: (id: string) => api.get<Project>(`/projects/${id}`), // 누락된 엔드포인트 추가\n  create: (data: ProjectFormData) => api.post<Project>('/projects', data),\n  update: (id: string, data: ProjectUpdateData) => api.put<Project>(`/projects/${id}`, data),\n  delete: (id: string) => api.delete(`/projects/${id}`),\n}\n\n// Settings API - 타입 안정성 강화 (개선된 UpdateData 타입 사용)\nexport const settingsAPI = {\n  get: () => api.get<SiteSettings>('/settings'),\n  update: (data: SettingsUpdateData) => api.put<SiteSettings>('/settings', data),\n}\n\n// Contact API - 타입 안정성 강화\nexport const contactAPI = {\n  sendEmail: (data: ContactFormData) => api.post<ContactResponse>('/contact', data),\n}\n\n// Messages API - 관리자용 연락처 메시지 관리\nexport const messagesAPI = {\n  getAll: () => api.get('/admin/messages'),\n  getById: (id: string) => api.get(`/admin/messages/${id}`),\n  markAsRead: (id: string) => api.put(`/admin/messages/${id}/read`),\n  delete: (id: string) => api.delete(`/admin/messages/${id}`),\n}\n\n// Skills API - 스킬 관리\nexport const skillsAPI = {\n  // 카테고리 관리\n  getCategories: () => api.get<{ data: SkillCategory[] }>('/skill-categories'),\n  createCategory: (data: SkillCategoryFormData) => api.post<{ data: SkillCategory }>('/skill-categories', data),\n  updateCategory: (id: string, data: SkillCategoryFormData) => api.put<{ data: SkillCategory }>(`/skill-categories/${id}`, data),\n  deleteCategory: (id: string) => api.delete(`/skill-categories/${id}`),\n  \n  // 스킬 관리\n  getAll: () => api.get<Skill[]>('/skills'),\n  getByCategory: (categoryId: string) => api.get<{ data: Skill[] }>(`/skill-categories/${categoryId}/skills`),\n  create: (categoryId: string, data: SkillFormData) => api.post<{ data: Skill }>(`/skill-categories/${categoryId}/skills`, data),\n  update: (id: string, data: SkillFormData) => api.put<{ data: Skill }>(`/skills/${id}`, data),\n  delete: (id: string) => api.delete(`/skills/${id}`),\n  \n    // 모든 데이터 삭제\n    clearAllData: () => api.post('/skills/clear-all-data'),\n  \n  // 중복 데이터 정리\n  cleanupDuplicates: () => api.post('/skills/cleanup-duplicates'),\n  \n  // 순서 업데이트\n  reorderSkills: (skillIds: string[]) => api.put('/skills/reorder', { skillIds }),\n  reorderCategories: (categoryIds: string[]) => api.put('/skill-categories/reorder', { categoryIds }),\n}\n\n// =================================================================\n// 📂 Category API (통합 카테고리 관리)\n// =================================================================\n\nexport const categoriesAPI = {\n  getAll: () => api.get<Category[]>('/categories'),\n  getById: (id: string) => api.get<Category>(`/categories/${id}`),\n  getUsage: (id: string) => api.get<CategoryUsage>(`/categories/${id}/usage`),\n  create: (data: CategoryFormData) => api.post<Category>('/categories', data),\n  update: (id: string, data: CategoryFormData) => api.put<Category>(`/categories/${id}`, data),\n  delete: (id: string) => api.delete(`/categories/${id}`),\n}\n\n// =================================================================\n// 📹 VideoLearning API (영상 학습 기록)\n// =================================================================\n\nexport const videoLearningsAPI = {\n  getAll: () => api.get<{ data: VideoLearning[] }>('/video-learnings'),\n  getById: (id: string) => api.get<VideoLearning>(`/video-learnings/${id}`),\n  create: (data: VideoLearningFormData) => api.post<VideoLearning>('/video-learnings', data),\n  update: (id: string, data: VideoLearningFormData) => api.put<VideoLearning>(`/video-learnings/${id}`, data),\n  delete: (id: string) => api.delete(`/video-learnings/${id}`),\n}\n\n// 🌟 재생 목록 API\nexport const videoPlaylistsAPI = {\n  getAll: () => api.get<{ data: VideoPlaylist[] }>('/video-playlists'),\n  getById: (id: string) => api.get<{ data: VideoPlaylist }>(`/video-playlists/${id}`),\n  create: (data: VideoPlaylistFormData) => api.post<{ data: VideoPlaylist }>('/video-playlists', data),\n  update: (id: string, data: VideoPlaylistFormData) => api.put<{ data: VideoPlaylist }>(`/video-playlists/${id}`, data),\n  delete: (id: string) => api.delete(`/video-playlists/${id}`),\n}\n\n// 🌟 재생 목록 내 영상 API\nexport const playlistVideosAPI = {\n  getByPlaylist: (playlistId: string) => api.get<{ data: PlaylistVideo[] }>(`/playlist-videos?playlistId=${playlistId}`),\n  getById: (id: string) => api.get<{ data: PlaylistVideo }>(`/playlist-videos/${id}`),\n  create: (data: PlaylistVideoFormData) => api.post<{ data: PlaylistVideo }>('/playlist-videos', data),\n  update: (id: string, data: PlaylistVideoFormData) => api.put<{ data: PlaylistVideo }>(`/playlist-videos/${id}`, data),\n  delete: (id: string) => api.delete(`/playlist-videos/${id}`),\n}\n\nexport default api"],"names":["API_BASE_URL","VITE_API_URL","api","axios","create","baseURL","withCredentials","timeout","authAPI","login","username","password","post","verify","logout","booksAPI","getAll","get","getById","id","data","update","put","delete","chaptersAPI","getByBook","bookId","chapterId","reorder","chapterIds","learningsAPI","createForBook","updateForBook","learningId","deleteForBook","getByChapter","createForChapter","updateForChapter","deleteForChapter","updateSkills","skillIds","patch","experiencesAPI","projectsAPI","settingsAPI","contactAPI","sendEmail","messagesAPI","markAsRead","skillsAPI","getCategories","createCategory","updateCategory","deleteCategory","getByCategory","categoryId","clearAllData","cleanupDuplicates","reorderSkills","reorderCategories","categoryIds","categoriesAPI","getUsage","videoLearningsAPI","videoPlaylistsAPI","playlistVideosAPI","getByPlaylist","playlistId"],"mappings":"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"}