{"version":3,"file":"chunk-eaed8c6b.js","sources":["../../src/hooks/useCategories.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { categoriesAPI } from '../services/api'\r\nimport { Category, CategoryFormData, CategoryUsage } from '../types'\r\n\r\n// 쿼리 키\r\nconst CATEGORIES_QUERY_KEY = ['categories']\r\n\r\n// 🔍 모든 카테고리 조회\r\nexport const useCategories = () => {\r\n  return useQuery({\r\n    queryKey: CATEGORIES_QUERY_KEY,\r\n    queryFn: async () => {\r\n      const response = await categoriesAPI.getAll()\r\n      return response.data\r\n    }\r\n  })\r\n}\r\n\r\n// 🔍 특정 카테고리 조회\r\nexport const useCategory = (id: string | undefined) => {\r\n  return useQuery({\r\n    queryKey: [...CATEGORIES_QUERY_KEY, id],\r\n    queryFn: async () => {\r\n      if (!id) throw new Error('ID가 필요합니다')\r\n      const response = await categoriesAPI.getById(id)\r\n      return response.data\r\n    },\r\n    enabled: !!id\r\n  })\r\n}\r\n\r\n// 📊 카테고리 사용 통계 조회\r\nexport const useCategoryUsage = (id: string | undefined) => {\r\n  return useQuery({\r\n    queryKey: [...CATEGORIES_QUERY_KEY, id, 'usage'],\r\n    queryFn: async () => {\r\n      if (!id) throw new Error('ID가 필요합니다')\r\n      const response = await categoriesAPI.getUsage(id)\r\n      return response.data\r\n    },\r\n    enabled: !!id\r\n  })\r\n}\r\n\r\n// ✏️ 카테고리 생성\r\nexport const useCreateCategory = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation({\r\n    mutationFn: async (data: CategoryFormData) => {\r\n      const response = await categoriesAPI.create(data)\r\n      return response.data\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: CATEGORIES_QUERY_KEY })\r\n    }\r\n  })\r\n}\r\n\r\n// 🔄 카테고리 수정\r\nexport const useUpdateCategory = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation({\r\n    mutationFn: async ({ id, data }: { id: string; data: CategoryFormData }) => {\r\n      const response = await categoriesAPI.update(id, data)\r\n      return response.data\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: CATEGORIES_QUERY_KEY })\r\n    }\r\n  })\r\n}\r\n\r\n// 🗑️ 카테고리 삭제\r\nexport const useDeleteCategory = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation({\r\n    mutationFn: async (id: string) => {\r\n      const response = await categoriesAPI.delete(id)\r\n      return response.data\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: CATEGORIES_QUERY_KEY })\r\n    }\r\n  })\r\n}\r\n\r\n// 🔧 카테고리 관리를 위한 통합 훅\r\nexport const useCategoryManagerData = () => {\r\n  const { data: categories = [], isLoading } = useCategories()\r\n  const createMutation = useCreateCategory()\r\n  const updateMutation = useUpdateCategory()\r\n  const deleteMutation = useDeleteCategory()\r\n\r\n  return {\r\n    categories,\r\n    isLoading,\r\n    createCategory: async (data: CategoryFormData) => {\r\n      try {\r\n        await createMutation.mutateAsync(data)\r\n        return { success: true }\r\n      } catch (error: any) {\r\n        console.error('카테고리 생성 실패:', error)\r\n        return { success: false, error }\r\n      }\r\n    },\r\n    updateCategory: async (id: string, data: CategoryFormData) => {\r\n      try {\r\n        await updateMutation.mutateAsync({ id, data })\r\n        return { success: true }\r\n      } catch (error: any) {\r\n        console.error('카테고리 수정 실패:', error)\r\n        return { success: false, error }\r\n      }\r\n    },\r\n    deleteCategory: async (id: string) => {\r\n      try {\r\n        await deleteMutation.mutateAsync(id)\r\n        return { success: true }\r\n      } catch (error: any) {\r\n        console.error('카테고리 삭제 실패:', error)\r\n        return { success: false, error }\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"names":["CATEGORIES_QUERY_KEY","useCategories","useQuery","queryKey","queryFn","async","categoriesAPI","getAll","data","useCategoryUsage","id","Error","getUsage","enabled","useCategoryManagerData","categories","isLoading","createMutation","queryClient","useQueryClient","useMutation","mutationFn","create","onSuccess","invalidateQueries","useCreateCategory","updateMutation","update","useUpdateCategory","deleteMutation","delete","useDeleteCategory","createCategory","mutateAsync","success","error","updateCategory","deleteCategory"],"mappings":"+FAKA,MAAMA,EAAuB,CAAC,cAGjBC,EAAgB,IACpBC,EAAS,CACdC,SAAUH,EACVI,QAASC,gBACgBC,EAAcC,UACrBC,OAmBTC,EAAoBC,GACxBR,EAAS,CACdC,SAAU,IAAIH,EAAsBU,EAAI,SACxCN,QAASC,UACP,IAAKK,EAAU,MAAA,IAAIC,MAAM,aAEzB,aADuBL,EAAcM,SAASF,IAC9BF,MAElBK,UAAWH,IAkDFI,EAAyB,KACpC,MAAQN,KAAMO,EAAa,GAAIC,UAAAA,GAAcf,IACvCgB,EA/CyB,MAC/B,MAAMC,EAAcC,IAEpB,OAAOC,EAAY,CACjBC,WAAYhB,MAAOG,UACMF,EAAcgB,OAAOd,IAC5BA,KAElBe,UAAW,KACTL,EAAYM,kBAAkB,CAAErB,SAAUH,QAsCvByB,GACjBC,EAjCyB,MAC/B,MAAMR,EAAcC,IAEpB,OAAOC,EAAY,CACjBC,WAAYhB,OAASK,KAAIF,iBACAF,EAAcqB,OAAOjB,EAAIF,IAChCA,KAElBe,UAAW,KACTL,EAAYM,kBAAkB,CAAErB,SAAUH,QAwBvB4B,GACjBC,EAnByB,MAC/B,MAAMX,EAAcC,IAEpB,OAAOC,EAAY,CACjBC,WAAYhB,MAAOK,UACMJ,EAAcwB,OAAOpB,IAC5BF,KAElBe,UAAW,KACTL,EAAYM,kBAAkB,CAAErB,SAAUH,QAUvB+B,GAEhB,MAAA,CACLhB,aACAC,YACAgB,eAAgB3B,MAAOG,IACjB,IAEK,aADDS,EAAegB,YAAYzB,GAC1B,CAAE0B,SAAS,SACXC,GAEA,MAAA,CAAED,SAAS,EAAOC,QAC3B,GAEFC,eAAgB/B,MAAOK,EAAYF,KAC7B,IAEK,aADDkB,EAAeO,YAAY,CAAEvB,KAAIF,SAChC,CAAE0B,SAAS,SACXC,GAEA,MAAA,CAAED,SAAS,EAAOC,QAC3B,GAEFE,eAAgBhC,MAAOK,IACjB,IAEK,aADDmB,EAAeI,YAAYvB,GAC1B,CAAEwB,SAAS,SACXC,GAEA,MAAA,CAAED,SAAS,EAAOC,QAC3B"}