{"version":3,"mappings":"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","names":["queryClient","QueryClient","defaultOptions","queries","staleTime","gcTime","retry","refetchOnWindowFocus","HomePage","lazy","import","Books","BookDetail","VideoLearnings","VideoLearningDetail","VideoPlaylistDetail","Projects","ProjectDetail","Experience","About","Contact","Skills","AdminDashboard","__vitePreload","App","darkMode","setDarkMode","useState","showLoginModal","setShowLoginModal","isFirstVisit","setIsFirstVisit","useEffect","savedTheme","localStorage","getItem","window","matchMedia","matches","document","documentElement","classList","add","setItem","remove","QueryClientProvider","client","children","jsx","SiteSettingsProvider","AuthProvider","jsxRuntimeExports","Router","basename","future","v7_startTransition","v7_relativeSplatPath","Routes","Route","path","element","LoadScene","onFirstVisitComplete","Navigate","to","replace","jsxs","AppLayout","toggleDarkMode","ProtectedRoute","i18n","use","initReactI18next","init","resources","ko","translation","en","ja","lng","fallbackLng","interpolation","escapeValue","ReactDOM","createRoot","getElementById","render","React","StrictMode"],"sources":["../../src/App.tsx","../../src/i18n.ts","../../src/main.tsx"],"sourcesContent":["import { useState, useEffect, lazy } from 'react'\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { AuthProvider } from '@/contexts/AuthContext'\nimport { SiteSettingsProvider } from '@/hooks/useSiteSettings'\nimport ProtectedRoute from '@/components/ProtectedRoute'\nimport LoadScene from '@/components/LoadScene'\nimport AppLayout from '@/components/AppLayout'\n\n// React Query 클라이언트 생성\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 5 * 60 * 1000, // 5분\n      gcTime: 10 * 60 * 1000, // 10분\n      retry: 1,\n      refetchOnWindowFocus: false,\n    },\n  },\n})\n\n// Lazy Load할 컴포넌트들 정의 (성능 최적화)\nconst HomePage = lazy(() => import('@/pages/HomePage'))\nconst Books = lazy(() => import('@/pages/Books'))\nconst BookDetail = lazy(() => import('@/components/BookDetail'))\nconst VideoLearnings = lazy(() => import('@/pages/VideoLearnings'))\nconst VideoLearningDetail = lazy(() => import('@/components/VideoLearningDetail'))\nconst VideoPlaylistDetail = lazy(() => import('@/components/VideoPlaylistDetail'))\nconst Projects = lazy(() => import('@/pages/Projects'))\nconst ProjectDetail = lazy(() => import('@/components/ProjectDetail'))\nconst Experience = lazy(() => import('@/pages/Experience'))\nconst About = lazy(() => import('@/pages/About'))\nconst Contact = lazy(() => import('@/pages/Contact'))\nconst Skills = lazy(() => import('@/pages/Skills'))\nconst AdminDashboard = lazy(() => import('@/pages/admin/Dashboard'))\n\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false)\n  const [showLoginModal, setShowLoginModal] = useState(false)\n  const [isFirstVisit, setIsFirstVisit] = useState(true)\n\n  // 다크 모드 및 첫 방문 상태 초기화\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme')\n    if (savedTheme === 'dark' || (!savedTheme && window.matchMedia('(prefers-color-scheme: dark)').matches)) {\n      setDarkMode(true)\n    }\n\n    // 첫 방문 여부 확인\n    const hasVisited = localStorage.getItem('hasVisited')\n    if (hasVisited) {\n      setIsFirstVisit(false)\n    }\n  }, [])\n\n  // 다크 모드 상태에 따른 DOM 클래스 및 로컬 스토리지 업데이트\n  useEffect(() => {\n    if (darkMode) {\n      document.documentElement.classList.add('dark')\n      localStorage.setItem('theme', 'dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n      localStorage.setItem('theme', 'light')\n    }\n  }, [darkMode])\n\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode)\n  }\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <SiteSettingsProvider>\n        <AuthProvider>\n          <Router\n            basename=\"/choifolio.github.io\"\n            future={{\n              v7_startTransition: true,\n              v7_relativeSplatPath: true,\n            }}\n          >\n            <Routes>\n              {/* 로딩 화면 - 첫 방문 시에만 표시 */}\n              <Route \n                path=\"/\" \n                element={\n                  isFirstVisit ? (\n                    <LoadScene onFirstVisitComplete={() => setIsFirstVisit(false)} />\n                  ) : (\n                    <Navigate to=\"/home\" replace />\n                  )\n                } \n              />\n              \n              \n              {/* 일반 페이지들 - 사이드바와 레이아웃 포함 */}\n              <Route \n                path=\"/*\" \n                element={\n                  <AppLayout\n                    darkMode={darkMode}\n                    toggleDarkMode={toggleDarkMode}\n                    showLoginModal={showLoginModal}\n                    setShowLoginModal={setShowLoginModal}\n                    isFirstVisit={isFirstVisit}\n                  />\n                }\n              >\n                <Route path=\"home\" element={<HomePage />} />\n                \n                {/* 서적 관련 페이지 - Lazy Load 적용 */}\n                <Route path=\"books\" element={<Books />} />\n                <Route path=\"books/:id\" element={<BookDetail />} />\n                \n                {/* 영상 학습 관련 페이지 - Lazy Load 적용 */}\n                <Route path=\"video-learnings\" element={<VideoLearnings />} />\n                <Route path=\"video-learnings/:id\" element={<VideoLearningDetail />} />\n                <Route path=\"video-playlists/:id\" element={<VideoPlaylistDetail />} />\n                \n                {/* 프로젝트 페이지 - Lazy Load 적용 */}\n                <Route path=\"projects\" element={<Projects />} />\n                <Route path=\"projects/:id\" element={<ProjectDetail />} />\n                \n                {/* 경력 페이지 - Lazy Load 적용 */}\n                <Route path=\"experience\" element={<Experience />} />\n                \n                {/* 소개 페이지 - Lazy Load 적용 */}\n                <Route path=\"about\" element={<About />} />\n                \n                {/* 연락처 페이지 - Lazy Load 적용 */}\n                <Route path=\"contact\" element={<Contact />} />\n                \n                {/* 기술 페이지 - Lazy Load 적용 */}\n                <Route path=\"skills\" element={<Skills />} />\n                \n                {/* 관리자 페이지 - 인증 보호 및 Lazy Load 적용 */}\n                <Route \n                  path=\"admin\" \n                  element={<ProtectedRoute element={AdminDashboard} />} \n                />\n              </Route>\n            </Routes>\n          </Router>\n        </AuthProvider>\n      </SiteSettingsProvider>\n    </QueryClientProvider>\n  )\n}\n\nexport default App","import i18n from 'i18next'\r\nimport { initReactI18next } from 'react-i18next'\r\nimport ko from './locales/ko.json'\r\nimport en from './locales/en.json'\r\nimport ja from './locales/ja.json'\r\n\r\ni18n\r\n  .use(initReactI18next)\r\n  .init({\r\n    resources: {\r\n      ko: { translation: ko },\r\n      en: { translation: en },\r\n      ja: { translation: ja }\r\n    },\r\n    lng: localStorage.getItem('language') || 'ko',\r\n    fallbackLng: 'ko',\r\n    interpolation: {\r\n      escapeValue: false\r\n    }\r\n  })\r\n\r\nexport default i18n\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport App from './App.tsx'\r\nimport './index.css'\r\nimport './i18n' // i18n 초기화\r\n\r\nReactDOM.createRoot(document.getElementById('root')!).render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n)\r\n"],"file":"js/index-96383b6e.js"}