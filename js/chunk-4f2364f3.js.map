{"version":3,"file":"chunk-4f2364f3.js","sources":["../../src/hooks/useToast.ts"],"sourcesContent":["import { useState, useCallback } from 'react'\r\n\r\nexport type ToastType = 'success' | 'error' | 'warning' | 'info'\r\n\r\nexport interface Toast {\r\n  id: string\r\n  type: ToastType\r\n  title: string\r\n  message?: string\r\n  duration?: number\r\n}\r\n\r\ninterface UseToastReturn {\r\n  toasts: Toast[]\r\n  showToast: (toast: Omit<Toast, 'id'>) => void\r\n  hideToast: (id: string) => void\r\n  clearAllToasts: () => void\r\n}\r\n\r\n/**\r\n * Toast 알림 시스템을 위한 Custom Hook\r\n * 성공, 에러, 경고, 정보 메시지를 표시할 수 있습니다.\r\n */\r\nexport function useToast(): UseToastReturn {\r\n  const [toasts, setToasts] = useState<Toast[]>([])\r\n\r\n  const showToast = useCallback((toast: Omit<Toast, 'id'>) => {\r\n    const id = Math.random().toString(36).substr(2, 9)\r\n    const newToast: Toast = {\r\n      id,\r\n      duration: 5000, // 기본 5초\r\n      ...toast\r\n    }\r\n\r\n    setToasts(prev => [...prev, newToast])\r\n\r\n    // 자동 제거 (duration이 0이 아닌 경우)\r\n    if (newToast.duration && newToast.duration > 0) {\r\n      setTimeout(() => {\r\n        hideToast(id)\r\n      }, newToast.duration)\r\n    }\r\n  }, [])\r\n\r\n  const hideToast = useCallback((id: string) => {\r\n    setToasts(prev => prev.filter(toast => toast.id !== id))\r\n  }, [])\r\n\r\n  const clearAllToasts = useCallback(() => {\r\n    setToasts([])\r\n  }, [])\r\n\r\n  return {\r\n    toasts,\r\n    showToast,\r\n    hideToast,\r\n    clearAllToasts\r\n  }\r\n}\r\n\r\n/**\r\n * 편의 메서드들을 제공하는 Toast Hook\r\n */\r\nexport function useToastHelpers() {\r\n  const { showToast, ...rest } = useToast()\r\n\r\n  const success = useCallback((title: string, message?: string) => {\r\n    showToast({ type: 'success', title, message })\r\n  }, [showToast])\r\n\r\n  const error = useCallback((title: string, message?: string) => {\r\n    showToast({ type: 'error', title, message })\r\n  }, [showToast])\r\n\r\n  const warning = useCallback((title: string, message?: string) => {\r\n    showToast({ type: 'warning', title, message })\r\n  }, [showToast])\r\n\r\n  const info = useCallback((title: string, message?: string) => {\r\n    showToast({ type: 'info', title, message })\r\n  }, [showToast])\r\n\r\n  return {\r\n    ...rest,\r\n    success,\r\n    error,\r\n    warning,\r\n    info\r\n  }\r\n}\r\n\r\nexport default useToast\r\n"],"names":["useToastHelpers","showToast","rest","toasts","setToasts","useState","useCallback","toast","id","Math","random","toString","substr","newToast","duration","prev","setTimeout","hideToast","filter","clearAllToasts","useToast","success","title","message","type","error","warning","info"],"mappings":"wCA+DO,SAASA,IACd,MAAMC,UAAEA,KAAcC,GAzCjB,WACL,MAAOC,EAAQC,GAAaC,EAAAA,SAAkB,IAExCJ,EAAYK,cAAaC,IACvB,MAAAC,EAAKC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,GAC1CC,EAAkB,CACtBL,KACAM,SAAU,OACPP,GAGLH,EAAkBW,GAAA,IAAIA,EAAMF,IAGxBA,EAASC,UAAYD,EAASC,SAAW,GAC3CE,WAAW,KACTC,EAAUT,IACTK,EAASC,WAEb,IAEGG,EAAYX,cAAaE,IACnBJ,KAAQW,EAAKG,UAAgBX,EAAMC,KAAOA,KACnD,IAEGW,EAAiBb,EAAAA,YAAY,KACjCF,EAAU,KACT,IAEI,MAAA,CACLD,SACAF,YACAgB,YACAE,iBAEJ,CAMiCC,GAkBxB,MAAA,IACFlB,EACHmB,QAlBcf,EAAAA,YAAY,CAACgB,EAAeC,KAC1CtB,EAAU,CAAEuB,KAAM,UAAWF,QAAOC,aACnC,CAACtB,IAiBFwB,MAfYnB,EAAAA,YAAY,CAACgB,EAAeC,KACxCtB,EAAU,CAAEuB,KAAM,QAASF,QAAOC,aACjC,CAACtB,IAcFyB,QAZcpB,EAAAA,YAAY,CAACgB,EAAeC,KAC1CtB,EAAU,CAAEuB,KAAM,UAAWF,QAAOC,aACnC,CAACtB,IAWF0B,KATWrB,EAAAA,YAAY,CAACgB,EAAeC,KACvCtB,EAAU,CAAEuB,KAAM,OAAQF,QAAOC,aAChC,CAACtB,IASN"}