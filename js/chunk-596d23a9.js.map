{"version":3,"file":"chunk-596d23a9.js","sources":["../../src/hooks/useSiteSettings.tsx","../../src/hooks/useScrollSpy.ts","../../src/hooks/useSidebarSkills.ts","../../src/hooks/useBooks.ts","../../src/hooks/useCategories.ts","../../src/hooks/useLearningManager.ts","../../src/hooks/useSkills.ts","../../src/hooks/useVideoLearnings.ts","../../src/hooks/useVideoPlaylists.ts","../../src/hooks/useToast.ts","../../src/hooks/useProjects.ts","../../src/hooks/useProjectDetail.ts","../../src/hooks/useExperiences.ts","../../src/hooks/useAbortController.ts","../../src/hooks/useOptimisticUpdate.ts","../../src/hooks/useBookManagerData.ts","../../src/hooks/useCRUDManager.ts","../../src/hooks/useExperienceManagerData.ts","../../src/hooks/useProjectForm.ts","../../src/hooks/useProjectManagerData.ts","../../src/hooks/useMessageManagerData.ts","../../src/hooks/useMessageDetail.ts","../../src/hooks/useSkillMutations.ts","../../src/hooks/useSkillsManagerData.ts","../../src/hooks/useDataCounts.ts","../../src/hooks/useAdminSidebarState.ts"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback, useMemo, ReactNode, useContext } from 'react'\r\nimport { settingsAPI } from '../services/api'\r\nimport { SettingsFormData } from '../types'\r\n\r\n// =================================================================\r\n// 초기 설정값 정의 (기본값 제공) - 상수로 한 번만 생성\r\n// =================================================================\r\n\r\nconst INITIAL_SETTINGS: Partial<SettingsFormData> = {\r\n  // GeneralInfo 기본값\r\n  fullName: '',\r\n  firstName: '',\r\n  role: '',\r\n  subtitle: '',\r\n  location: '',\r\n  education: '',\r\n  yearsOfExperience: '',\r\n  \r\n  // ContactInfo 기본값\r\n  email: '',\r\n  phone: '',\r\n  githubUrl: '',\r\n  linkedinUrl: '',\r\n  \r\n  // ContentText 기본값\r\n  heroTitle: '',\r\n  heroSubtitle: '',\r\n  heroTag: '',\r\n  heroCtaLink1: '',\r\n  heroCtaLink2: '',\r\n  aboutTitle: '',\r\n  aboutSubtitle: '',\r\n  aboutDescription1: '',\r\n  aboutDescription2: '',\r\n  skillsTitle: '',\r\n  skillsSubtitle: '',\r\n  projectsTitle: '',\r\n  projectsSubtitle: '',\r\n  // 🌟 프로젝트 업데이트 카드 기본값 (빈 값으로 설정 - 관리자가 직접 입력)\r\n  projectsUpdateTitle: '',\r\n  projectsUpdateDescription: '',\r\n  projectsUpdateTechList: [],\r\n  booksTitle: '',\r\n  booksSubtitle: '',\r\n  contactTitle: '',\r\n  contactSubtitle: '',\r\n  experienceTitle: '',\r\n  experienceSubtitle: '',\r\n  \r\n  // 🌟 학습 목표 기본값\r\n  learningGoalsTitle: '앞으로의 학습 목표',\r\n  learningGoalsDescription: '4차 산업혁명 시대에 발맞춰 **지능형 공장(Smart Factory) 구현**을 위해 다음 기술들을 집중적으로 탐구하여 전문성을 확대해 나가겠습니다.',\r\n  learningGoalsList: ['첨단 로봇 제어', '딥러닝 기반 비전 시스템', '엣지 컴퓨팅', '클라우드 연동', 'MES/ERP 연동 기술'],\r\n  \r\n  // Stats 기본값\r\n  stat1Number: '',\r\n  stat1Label: '',\r\n  stat2Number: '',\r\n  stat2Label: '',\r\n  stat3Number: '',\r\n  stat3Label: '',\r\n  \r\n  // MainSkills 기본값\r\n  mainSkills: [],\r\n}\r\n\r\n// =================================================================\r\n// Context 타입 정의 및 생성\r\n// =================================================================\r\n\r\ninterface SiteSettingsContextType {\r\n  settings: SettingsFormData;\r\n  loading: boolean;\r\n  error: string | null;\r\n  refetchSettings: () => Promise<void>; // 관리자 페이지를 위한 수동 새로고침 함수\r\n}\r\n\r\nconst SiteSettingsContext = createContext<SiteSettingsContextType | undefined>(undefined);\r\n\r\n// =================================================================\r\n// Provider 컴포넌트\r\n// =================================================================\r\n\r\ninterface SiteSettingsProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const SiteSettingsProvider: React.FC<SiteSettingsProviderProps> = ({ children }) => {\r\n  const [settings, setSettings] = useState<SettingsFormData>(INITIAL_SETTINGS as SettingsFormData);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // 설정 데이터를 가져오는 함수\r\n  const fetchSettings = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await settingsAPI.get();\r\n      \r\n      const mergedSettings = {\r\n        ...INITIAL_SETTINGS,\r\n        ...response.data\r\n      };\r\n      \r\n      setSettings(mergedSettings);\r\n    } catch (err) {\r\n      console.error('Failed to fetch settings:', err);\r\n      setError('설정을 불러오는데 실패했습니다.');\r\n      setSettings(INITIAL_SETTINGS as SettingsFormData);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Provider가 마운트될 때 *단 한 번만* 데이터를 가져옵니다. (캐싱)\r\n  useEffect(() => {\r\n    fetchSettings();\r\n  }, [fetchSettings]);\r\n\r\n  const refetchSettings = useCallback(async () => {\r\n      await fetchSettings();\r\n  }, [fetchSettings]);\r\n\r\n  // Context value를 useMemo로 메모이제이션하여 불필요한 리렌더링 방지\r\n  const value = useMemo(() => ({\r\n    settings,\r\n    loading,\r\n    error,\r\n    refetchSettings\r\n  }), [settings, loading, error, refetchSettings]);\r\n\r\n  return (\r\n    <SiteSettingsContext.Provider value={value}>\r\n      {children}\r\n    </SiteSettingsContext.Provider>\r\n  );\r\n};\r\n\r\n// =================================================================\r\n// Custom Hook: 이제 Context를 소비합니다.\r\n// =================================================================\r\n\r\nexport const useSiteSettings = () => {\r\n  const context = useContext(SiteSettingsContext);\r\n  if (context === undefined) {\r\n    throw new Error('useSiteSettings must be used within a SiteSettingsProvider');\r\n  }\r\n  return context;\r\n};\r\n","import { useEffect, useState, useCallback, useRef } from 'react'\r\n\r\n// 섹션 ID 목록 정의\r\nexport const SECTION_IDS = [\r\n  'hero',\r\n  'about', \r\n  'experience',\r\n  'skills',\r\n  'projects',\r\n  'contact',\r\n  'books', // Books 페이지 추가\r\n  'projects-page', // Projects 페이지 추가\r\n  'experience-page', // Experience 페이지 추가\r\n  'about-page', // About 페이지 추가\r\n  'contact-page', // Contact 페이지 추가\r\n  'skills-page' // Skills 페이지 추가\r\n] as const\r\n\r\nexport type SectionId = typeof SECTION_IDS[number]\r\n\r\n// 스크롤 스파이 훅 옵션 인터페이스\r\ninterface UseScrollSpyOptions {\r\n  /** 활성화 기준점 오프셋 (픽셀) - 기본값: 80px */\r\n  offset?: number\r\n  /** 디바운스 지연 시간 (밀리초) - 기본값: 100ms */\r\n  debounceDelay?: number\r\n}\r\n\r\n// 기본 옵션\r\nconst DEFAULT_OPTIONS: Required<UseScrollSpyOptions> = {\r\n  offset: 80,\r\n  debounceDelay: 100\r\n}\r\n\r\n// 디바운스 유틸리티 함수\r\nconst debounce = <T extends (...args: any[]) => any>(\r\n  func: T,\r\n  delay: number\r\n): ((...args: Parameters<T>) => void) => {\r\n  let timeoutId: number | null = null\r\n  \r\n  return (...args: Parameters<T>) => {\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId)\r\n    }\r\n    \r\n    timeoutId = setTimeout(() => {\r\n      func(...args)\r\n    }, delay)\r\n  }\r\n}\r\n\r\n// 스크롤 스파이 훅\r\nexport const useScrollSpy = (options: UseScrollSpyOptions = {}) => {\r\n  const { offset, debounceDelay } = { ...DEFAULT_OPTIONS, ...options }\r\n  const [activeSection, setActiveSection] = useState<SectionId>('hero')\r\n  const timeoutRef = useRef<number | null>(null)\r\n\r\n  const handleScroll = useCallback(() => {\r\n    // 현재 스크롤 위치 + 오프셋을 활성화 기준점으로 설정\r\n    const activationPoint = window.scrollY + offset\r\n    let newActiveSection: SectionId = 'hero' // 기본값\r\n\r\n    // 섹션들을 순회하며 activationPoint를 지난 가장 마지막 섹션을 찾기\r\n    for (const sectionId of SECTION_IDS) {\r\n      const element = document.getElementById(sectionId)\r\n      if (!element) continue\r\n\r\n      // 요소의 문서 상단으로부터의 위치 (오프셋 반영)\r\n      const elementTop = element.offsetTop - offset\r\n      \r\n      // 현재 스크롤 위치가 섹션 상단보다 크거나 같다면, 해당 섹션을 활성화\r\n      if (activationPoint >= elementTop) {\r\n        newActiveSection = sectionId\r\n      }\r\n    }\r\n    \r\n    setActiveSection(newActiveSection)\r\n  }, [offset])\r\n\r\n  // 디바운스된 스크롤 핸들러\r\n  const debouncedHandleScroll = useCallback(\r\n    debounce(handleScroll, debounceDelay),\r\n    [handleScroll, debounceDelay]\r\n  )\r\n\r\n  useEffect(() => {\r\n    // 스크롤 이벤트 리스너 등록\r\n    window.addEventListener('scroll', debouncedHandleScroll, { passive: true })\r\n    \r\n    // 초기 실행 (디바운스 없이 즉시 실행)\r\n    handleScroll()\r\n\r\n    // 클린업\r\n    return () => {\r\n      window.removeEventListener('scroll', debouncedHandleScroll)\r\n      // 디바운스 타이머 정리\r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current)\r\n      }\r\n    }\r\n  }, [handleScroll, debouncedHandleScroll])\r\n\r\n  return activeSection\r\n}\r\n\r\n// 부드러운 스크롤 함수 (오프셋 지원)\r\nexport const scrollToSection = (sectionId: SectionId, offset: number = 80) => {\r\n  const element = document.getElementById(sectionId)\r\n  if (element) {\r\n    const elementTop = element.offsetTop - offset\r\n    \r\n    window.scrollTo({\r\n      top: elementTop,\r\n      behavior: 'smooth'\r\n    })\r\n  }\r\n}\r\n","import { useState, useEffect, useCallback, useMemo } from 'react'\r\nimport { skillsAPI } from '../services/api'\r\nimport { Skill } from '../types'\r\nimport { useSiteSettings } from './useSiteSettings'\r\n\r\n/**\r\n * 사이드바에 표시할 스킬 데이터를 관리하는 커스텀 훅\r\n * \r\n * @returns {Object} 스킬 데이터 및 로딩 상태\r\n * @property {Skill[]} coreSkills - 사이드바에 표시할 핵심 기술\r\n * @property {Skill[]} languageSkills - 언어 카드에 표시할 언어 스킬\r\n * @property {boolean} isLoadingSkills - 스킬 데이터 로딩 상태\r\n */\r\nexport const useSidebarSkills = () => {\r\n  const [coreSkills, setCoreSkills] = useState<Skill[]>([])\r\n  const [languageSkills, setLanguageSkills] = useState<Skill[]>([])\r\n  const [isLoadingSkills, setIsLoadingSkills] = useState(false)\r\n  const { settings: siteSettings } = useSiteSettings()\r\n\r\n  // 스킬 데이터를 가져오는 함수 (useCallback으로 메모이제이션)\r\n  const fetchSkills = useCallback(async () => {\r\n    setIsLoadingSkills(true)\r\n    try {\r\n      const response = await skillsAPI.getAll()\r\n      const allSkills = response.data || []\r\n      \r\n      // 사이드바 핵심 기술 필터링 (showInSidebar: true)\r\n      let sidebarSkills = allSkills\r\n        .filter((skill: Skill) => skill.showInSidebar)\r\n        .sort((a: Skill, b: Skill) => a.order - b.order)\r\n        .slice(0, siteSettings?.sidebarSkillCount || 4)\r\n      \r\n      // 선택된 스킬이 없으면 레벨 높은 순으로 fallback\r\n      if (sidebarSkills.length === 0) {\r\n        sidebarSkills = allSkills\r\n          .sort((a: Skill, b: Skill) => b.level - a.level)\r\n          .slice(0, siteSettings?.sidebarSkillCount || 4)\r\n      }\r\n      setCoreSkills(sidebarSkills)\r\n      \r\n      // 언어 카드 스킬 필터링 (showInLanguageCard: true)\r\n      // 레벨 높은 순으로 정렬 (왼쪽에 잘하는 언어)\r\n      let langSkills = allSkills\r\n        .filter((skill: Skill) => skill.showInLanguageCard)\r\n        .sort((a: Skill, b: Skill) => b.level - a.level)\r\n        .slice(0, siteSettings?.languageCardSkillCount || 3)\r\n      \r\n      // 선택된 언어 스킬이 없으면 빈 배열 유지 (언어 카드는 숨김)\r\n      setLanguageSkills(langSkills)\r\n    } catch (error) {\r\n      console.error('스킬 데이터 로드 실패:', error)\r\n      // 에러 시 빈 배열로 설정하여 \"스킬 데이터가 없습니다\" 메시지 표시\r\n      setCoreSkills([])\r\n      setLanguageSkills([])\r\n    } finally {\r\n      setIsLoadingSkills(false)\r\n    }\r\n  }, [siteSettings?.sidebarSkillCount, siteSettings?.languageCardSkillCount])\r\n\r\n  useEffect(() => {\r\n    fetchSkills()\r\n  }, [fetchSkills])\r\n\r\n  // 반환 객체를 useMemo로 메모이제이션하여 불필요한 리렌더링 방지\r\n  return useMemo(() => ({\r\n    coreSkills,\r\n    languageSkills,\r\n    isLoadingSkills\r\n  }), [coreSkills, languageSkills, isLoadingSkills])\r\n}\r\n\r\n","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { booksAPI } from '../services/api'\r\nimport { Book, BookFormData, BookUpdateData } from '../types'\r\n\r\n// 💡 서적 관련 쿼리 키 상수 - 모든 서적 데이터 캐시의 기준점\r\nexport const BOOK_QUERY_KEY = 'books'\r\n\r\n// =================================================================\r\n// 📚 서적 목록 조회 (React Query)\r\n// =================================================================\r\n\r\nexport const useBooks = () => {\r\n  return useQuery<Book[], Error>({\r\n    queryKey: [BOOK_QUERY_KEY, 'list'],\r\n    queryFn: async () => {\r\n      const response = await booksAPI.getAll()\r\n      return response.data.data || response.data || []\r\n    },\r\n    staleTime: 5 * 60 * 1000, // 5분 동안 캐시 유지\r\n    gcTime: 10 * 60 * 1000, // 10분 후 가비지 컬렉션\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 📖 개별 서적 상세 조회 (React Query)\r\n// =================================================================\r\n\r\nexport const useBook = (bookId: string | undefined) => {\r\n  return useQuery<Book, Error>({\r\n    queryKey: [BOOK_QUERY_KEY, 'detail', bookId],\r\n    queryFn: async () => {\r\n      if (!bookId) throw new Error('Book ID is required')\r\n      const response = await booksAPI.getById(bookId)\r\n      return response.data\r\n    },\r\n    enabled: !!bookId, // bookId가 있을 때만 실행\r\n    staleTime: 5 * 60 * 1000,\r\n    gcTime: 10 * 60 * 1000,\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// ✏️ 서적 생성 (React Query Mutation)\r\n// =================================================================\r\n\r\nexport const useCreateBook = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<Book, Error, BookFormData>({\r\n    mutationFn: async (bookData: BookFormData) => {\r\n      const response = await booksAPI.create(bookData)\r\n      return response.data\r\n    },\r\n    onSuccess: () => {\r\n      // 💡 서적 목록 캐시 무효화 → 자동으로 다시 fetch\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\r\n      // 💡 데이터 카운트도 무효화하여 서적 개수 업데이트\r\n      queryClient.invalidateQueries({ queryKey: ['dataCounts'] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 🔄 서적 수정 (React Query Mutation)\r\n// =================================================================\r\n\r\nexport const useUpdateBook = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<Book, Error, { id: string; data: BookUpdateData }>({\r\n    mutationFn: async ({ id, data }) => {\r\n      const response = await booksAPI.update(id, data)\r\n      return response.data\r\n    },\r\n    onSuccess: (_, variables) => {\r\n      // 💡 서적 목록 캐시 무효화\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\r\n      // 💡 해당 서적 상세 캐시도 무효화\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', variables.id] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 🗑️ 서적 삭제 (React Query Mutation)\r\n// =================================================================\r\n\r\nexport const useDeleteBook = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<void, Error, string>({\r\n    mutationFn: async (id: string) => {\r\n      await booksAPI.delete(id)\r\n    },\r\n    onSuccess: () => {\r\n      // 💡 서적 목록 캐시 무효화\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\r\n      // 💡 데이터 카운트도 무효화하여 서적 개수 업데이트\r\n      queryClient.invalidateQueries({ queryKey: ['dataCounts'] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 🔄 기존 훅 호환성 유지 (기존 컴포넌트가 바로 사용할 수 있도록)\r\n// =================================================================\r\n\r\nexport const useBookManagerData = () => {\r\n  const { data: books = [], isLoading, isError, error, refetch } = useBooks()\r\n  const createMutation = useCreateBook()\r\n  const updateMutation = useUpdateBook()\r\n  const deleteMutation = useDeleteBook()\r\n\r\n  const createBook = async (bookData: BookFormData) => {\r\n    try {\r\n      const result = await createMutation.mutateAsync(bookData)\r\n      return { success: true, data: result }\r\n    } catch (error) {\r\n      console.error('서적 추가 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  const updateBook = async (id: string, bookData: BookUpdateData) => {\r\n    try {\r\n      const result = await updateMutation.mutateAsync({ id, data: bookData })\r\n      return { success: true, data: result }\r\n    } catch (error) {\r\n      console.error('서적 수정 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  const deleteBook = async (id: string) => {\r\n    try {\r\n      await deleteMutation.mutateAsync(id)\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('서적 삭제 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  return {\r\n    books,\r\n    isLoading,\r\n    error: isError ? (error?.message || '서적을 불러오는데 실패했습니다.') : null,\r\n    isOptimistic: false, // React Query는 자체적으로 낙관적 업데이트 지원\r\n    createBook,\r\n    updateBook,\r\n    deleteBook,\r\n    refetch,\r\n  }\r\n}\r\n\r\nexport default useBooks\r\n","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { categoriesAPI } from '../services/api'\r\nimport { Category, CategoryFormData, CategoryUsage } from '../types'\r\n\r\n// 쿼리 키\r\nconst CATEGORIES_QUERY_KEY = ['categories']\r\n\r\n// 🔍 모든 카테고리 조회\r\nexport const useCategories = () => {\r\n  return useQuery({\r\n    queryKey: CATEGORIES_QUERY_KEY,\r\n    queryFn: async () => {\r\n      const response = await categoriesAPI.getAll()\r\n      return response.data\r\n    }\r\n  })\r\n}\r\n\r\n// 🔍 특정 카테고리 조회\r\nexport const useCategory = (id: string | undefined) => {\r\n  return useQuery({\r\n    queryKey: [...CATEGORIES_QUERY_KEY, id],\r\n    queryFn: async () => {\r\n      if (!id) throw new Error('ID가 필요합니다')\r\n      const response = await categoriesAPI.getById(id)\r\n      return response.data\r\n    },\r\n    enabled: !!id\r\n  })\r\n}\r\n\r\n// 📊 카테고리 사용 통계 조회\r\nexport const useCategoryUsage = (id: string | undefined) => {\r\n  return useQuery({\r\n    queryKey: [...CATEGORIES_QUERY_KEY, id, 'usage'],\r\n    queryFn: async () => {\r\n      if (!id) throw new Error('ID가 필요합니다')\r\n      const response = await categoriesAPI.getUsage(id)\r\n      return response.data\r\n    },\r\n    enabled: !!id\r\n  })\r\n}\r\n\r\n// ✏️ 카테고리 생성\r\nexport const useCreateCategory = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation({\r\n    mutationFn: async (data: CategoryFormData) => {\r\n      const response = await categoriesAPI.create(data)\r\n      return response.data\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: CATEGORIES_QUERY_KEY })\r\n    }\r\n  })\r\n}\r\n\r\n// 🔄 카테고리 수정\r\nexport const useUpdateCategory = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation({\r\n    mutationFn: async ({ id, data }: { id: string; data: CategoryFormData }) => {\r\n      const response = await categoriesAPI.update(id, data)\r\n      return response.data\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: CATEGORIES_QUERY_KEY })\r\n    }\r\n  })\r\n}\r\n\r\n// 🗑️ 카테고리 삭제\r\nexport const useDeleteCategory = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation({\r\n    mutationFn: async (id: string) => {\r\n      const response = await categoriesAPI.delete(id)\r\n      return response.data\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: CATEGORIES_QUERY_KEY })\r\n    }\r\n  })\r\n}\r\n\r\n// 🔧 카테고리 관리를 위한 통합 훅\r\nexport const useCategoryManagerData = () => {\r\n  const { data: categories = [], isLoading } = useCategories()\r\n  const createMutation = useCreateCategory()\r\n  const updateMutation = useUpdateCategory()\r\n  const deleteMutation = useDeleteCategory()\r\n\r\n  return {\r\n    categories,\r\n    isLoading,\r\n    createCategory: async (data: CategoryFormData) => {\r\n      try {\r\n        await createMutation.mutateAsync(data)\r\n        return { success: true }\r\n      } catch (error: any) {\r\n        console.error('카테고리 생성 실패:', error)\r\n        return { success: false, error }\r\n      }\r\n    },\r\n    updateCategory: async (id: string, data: CategoryFormData) => {\r\n      try {\r\n        await updateMutation.mutateAsync({ id, data })\r\n        return { success: true }\r\n      } catch (error: any) {\r\n        console.error('카테고리 수정 실패:', error)\r\n        return { success: false, error }\r\n      }\r\n    },\r\n    deleteCategory: async (id: string) => {\r\n      try {\r\n        await deleteMutation.mutateAsync(id)\r\n        return { success: true }\r\n      } catch (error: any) {\r\n        console.error('카테고리 삭제 실패:', error)\r\n        return { success: false, error }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { useState } from 'react'\r\nimport { useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { learningsAPI } from '../services/api'\r\nimport { Learning, LearningFormData, Book, Chapter } from '../types'\r\nimport { BOOK_QUERY_KEY } from './useBooks'\r\n\r\n/**\r\n * 🌟 React Query 기반 학습 내용(Learning) 관리 훅\r\n * \r\n * 주요 개선사항:\r\n * 1. React Query Mutation 사용으로 캐시 자동 관리\r\n * 2. 서적 상세 정보 캐시 무효화로 실시간 업데이트\r\n * 3. 데이터 카운트 자동 동기화\r\n * 4. 스킬 연결/해제 낙관적 업데이트\r\n */\r\n\r\n// =================================================================\r\n// ✏️ 학습 내용 생성 (React Query Mutation)\r\n// =================================================================\r\n\r\nexport const useCreateLearning = (bookId: string) => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<Learning, Error, LearningFormData>({\r\n    mutationFn: async (data: LearningFormData) => {\r\n      const response = await learningsAPI.createForBook(bookId, data)\r\n      return response.data\r\n    },\r\n    onSuccess: () => {\r\n      // 💡 해당 서적 상세 캐시 무효화 → BookDetail 자동 업데이트\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', bookId] })\r\n      // 💡 서적 목록도 무효화 (learnings 배열이 포함될 수 있음)\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\r\n      // 💡 목차(chapters) 캐시도 무효화\r\n      queryClient.invalidateQueries({ queryKey: ['chapters', bookId] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 🔄 학습 내용 수정 (React Query Mutation)\r\n// =================================================================\r\n\r\nexport const useUpdateLearning = (bookId: string) => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<Learning, Error, { learningId: string; data: LearningFormData }>({\r\n    mutationFn: async ({ learningId, data }) => {\r\n      const response = await learningsAPI.updateForBook(bookId, learningId, data)\r\n      return response.data\r\n    },\r\n    onSuccess: () => {\r\n      // 💡 해당 서적 상세 캐시 무효화\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', bookId] })\r\n      // 💡 서적 목록도 무효화\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\r\n      // 💡 목차(chapters) 캐시도 무효화\r\n      queryClient.invalidateQueries({ queryKey: ['chapters', bookId] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 🗑️ 학습 내용 삭제 (React Query Mutation)\r\n// =================================================================\r\n\r\nexport const useDeleteLearning = (bookId: string) => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<void, Error, string>({\r\n    mutationFn: async (learningId: string) => {\r\n      await learningsAPI.deleteForBook(bookId, learningId)\r\n    },\r\n    onSuccess: () => {\r\n      // 💡 해당 서적 상세 캐시 무효화\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', bookId] })\r\n      // 💡 서적 목록도 무효화\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\r\n      // 💡 목차(chapters) 캐시도 무효화\r\n      queryClient.invalidateQueries({ queryKey: ['chapters', bookId] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 🔗 학습 내용 스킬 업데이트 (React Query Mutation)\r\n// =================================================================\r\n\r\nexport const useUpdateLearningSkills = (bookId: string) => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<Learning, Error, { learningId: string; skillIds: string[] }>({\r\n    mutationFn: async ({ learningId, skillIds }) => {\r\n      // 💡 learningsAPI.updateSkills 함수 사용\r\n      const response = await learningsAPI.updateSkills(bookId, learningId, skillIds)\r\n      return response.data\r\n    },\r\n    onSuccess: () => {\r\n      // 스킬 업데이트 성공 시, Book Detail 캐시를 무효화하여 모든 UI를 새로고침\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', bookId] })\r\n      // 서적 목록도 무효화\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\r\n      // 목차(chapters) 캐시도 무효화\r\n      queryClient.invalidateQueries({ queryKey: ['chapters', bookId] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 🔄 기존 훅 호환성 유지 (useLearningManager)\r\n// =================================================================\r\n\r\n/**\r\n * 학습 내용(Learning)의 추가, 수정, 삭제 및 폼 상태 관리를 담당하는 커스텀 훅\r\n * @param bookId 현재 서적 ID\r\n */\r\nexport const useLearningManager = (bookId: string) => {\r\n  const queryClient = useQueryClient()\r\n  \r\n  // 폼 및 액션 관련 상태\r\n  const [editingLearningId, setEditingLearningId] = useState<string | null>(null)\r\n  const [editingChapterId, setEditingChapterId] = useState<string | null>(null)\r\n  const [currentFormData, setCurrentFormData] = useState<LearningFormData>({ topic: '', content: '' })\r\n  const [showAddForm, setShowAddForm] = useState(false)\r\n  const [apiError, setApiError] = useState<string | null>(null)\r\n\r\n  // React Query Mutations\r\n  const createMutation = useCreateLearning(bookId)\r\n  const updateMutation = useUpdateLearning(bookId)\r\n  const deleteMutation = useDeleteLearning(bookId)\r\n  const updateSkillsMutation = useUpdateLearningSkills(bookId)  // 🌟 스킬 업데이트 Mutation 추가\r\n\r\n  const isSaving = createMutation.isPending || updateMutation.isPending || deleteMutation.isPending || updateSkillsMutation.isPending\r\n\r\n  // 폼 닫기/초기화 공통 로직\r\n  const resetFormState = () => {\r\n    setEditingLearningId(null)\r\n    setEditingChapterId(null)\r\n    setCurrentFormData({ topic: '', content: '' })\r\n    setShowAddForm(false)\r\n  }\r\n\r\n  // 학습 내용 추가 폼 표시/숨김 토글\r\n  const handleToggleAddForm = () => {\r\n    if (editingLearningId) {\r\n      handleCancelEdit()\r\n    }\r\n    if (showAddForm) {\r\n      setCurrentFormData({ topic: '', content: '' })\r\n    }\r\n    setShowAddForm(prev => !prev)\r\n    setApiError(null)\r\n  }\r\n\r\n  // 🌟 학습 내용 추가 (React Query Mutation 사용)\r\n  const handleAddLearning = async () => {\r\n    if (!currentFormData.topic || !currentFormData.content) return\r\n\r\n    try {\r\n      setApiError(null)\r\n      await createMutation.mutateAsync(currentFormData)\r\n      resetFormState()\r\n    } catch (error) {\r\n      console.error('Failed to add learning:', error)\r\n      setApiError('학습 내용 추가에 실패했습니다.')\r\n    }\r\n  }\r\n\r\n  // 🌟 학습 내용 삭제 (목차 기반/직접 학습 내용 구분)\r\n  const handleDeleteLearning = async (learningId: string, chapterId?: string) => {\r\n    if (!confirm('이 학습 내용을 삭제하시겠습니까?')) return\r\n\r\n    try {\r\n      setApiError(null)\r\n      \r\n      // 목차 기반 학습 내용인 경우\r\n      if (chapterId) {\r\n        await learningsAPI.deleteForChapter(bookId, chapterId, learningId)\r\n        console.log('✅ 목차 학습 내용 삭제 성공')\r\n      } else {\r\n        // 직접 학습 내용인 경우\r\n        await deleteMutation.mutateAsync(learningId)\r\n      }\r\n      \r\n      // 캐시 무효화\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', bookId] })\r\n      queryClient.invalidateQueries({ queryKey: ['chapters', bookId] })\r\n    } catch (error) {\r\n      console.error('Failed to delete learning:', error)\r\n      setApiError('학습 내용 삭제에 실패했습니다.')\r\n    }\r\n  }\r\n\r\n  // 학습 내용 수정 시작\r\n  const handleStartEdit = (learning: Learning, chapterId?: string) => {\r\n    setShowAddForm(false)\r\n    setEditingLearningId(learning._id)\r\n    setEditingChapterId(chapterId || null)\r\n    setCurrentFormData({ topic: learning.topic, content: learning.content })\r\n    setApiError(null)\r\n  }\r\n\r\n  // 🌟 학습 내용 수정 저장 (목차 기반/직접 학습 내용 구분)\r\n  const handleSaveEdit = async () => {\r\n    if (!editingLearningId || !currentFormData.topic || !currentFormData.content) return\r\n\r\n    try {\r\n      setApiError(null)\r\n      \r\n      // 목차 기반 학습 내용인 경우\r\n      if (editingChapterId) {\r\n        const response = await learningsAPI.updateForChapter(\r\n          bookId, \r\n          editingChapterId, \r\n          editingLearningId, \r\n          currentFormData\r\n        )\r\n        console.log('✅ 목차 학습 내용 수정 성공:', response.data)\r\n      } else {\r\n        // 직접 학습 내용인 경우\r\n        await updateMutation.mutateAsync({\r\n          learningId: editingLearningId,\r\n          data: currentFormData\r\n        })\r\n      }\r\n      \r\n      // 캐시 무효화\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', bookId] })\r\n      queryClient.invalidateQueries({ queryKey: ['chapters', bookId] })\r\n      \r\n      resetFormState()\r\n    } catch (error) {\r\n      console.error('Failed to update learning:', error)\r\n      setApiError('학습 내용 수정에 실패했습니다.')\r\n    }\r\n  }\r\n\r\n  // 학습 내용 수정 취소\r\n  const handleCancelEdit = () => {\r\n    resetFormState()\r\n    setApiError(null)\r\n  }\r\n\r\n  // =================================================================\r\n  // 🌟 스킬 연결/해제 핸들러 (낙관적 업데이트 포함)\r\n  // =================================================================\r\n\r\n  /**\r\n   * 특정 학습 내용에 스킬을 연결하거나 해제합니다.\r\n   * 낙관적 업데이트를 사용하여 UI 반응 속도를 높입니다.\r\n   */\r\n  const handleSkillLinkChange = async (learningId: string, skillId: string, isLinked: boolean) => {\r\n    const queryKey = [BOOK_QUERY_KEY, 'detail', bookId]\r\n    const chaptersQueryKey = ['chapters', bookId]\r\n    \r\n    // 1. Optimistic Update를 위한 현재 캐시 가져오기\r\n    const previousBook = queryClient.getQueryData<Book>(queryKey)\r\n    const previousChapters = queryClient.getQueryData<Chapter[]>(chaptersQueryKey)\r\n\r\n    try {\r\n      setApiError(null)\r\n\r\n      // 2. 새로운 skillIds 배열 계산\r\n      let newSkillIds: string[] = []\r\n      \r\n      // 현재 학습 내용을 찾기\r\n      const currentLearning = (previousChapters || []).flatMap(c => c.learnings || []).find(l => l._id === learningId)\r\n                              || (previousBook?.learnings || []).find(l => l._id === learningId)\r\n\r\n      if (currentLearning) {\r\n        const currentSkillIds = currentLearning.skillIds || []\r\n        if (isLinked) {\r\n          // 연결: skillId 추가 (중복 방지)\r\n          newSkillIds = Array.from(new Set([...currentSkillIds, skillId]))\r\n        } else {\r\n          // 해제: skillId 제거\r\n          newSkillIds = currentSkillIds.filter((id: string) => id !== skillId)\r\n        }\r\n      } else {\r\n        // Learning을 찾을 수 없는 경우\r\n        newSkillIds = isLinked ? [skillId] : []\r\n      }\r\n      \r\n      // 3. Optimistic Update 실행: chapters 캐시 업데이트\r\n      if (previousChapters) {\r\n        queryClient.setQueryData<Chapter[]>(chaptersQueryKey, (oldChapters) => {\r\n          if (!oldChapters) return oldChapters\r\n          \r\n          return oldChapters.map((chapter) => ({\r\n            ...chapter,\r\n            learnings: (chapter.learnings || []).map((learning) => \r\n              learning._id === learningId ? { ...learning, skillIds: newSkillIds } : learning\r\n            )\r\n          }))\r\n        })\r\n      }\r\n      \r\n      // Book 캐시도 업데이트 (기존 learnings 지원)\r\n      if (previousBook) {\r\n        queryClient.setQueryData<Book>(queryKey, (oldBook) => {\r\n          if (!oldBook) return oldBook\r\n          \r\n          // 목차 기반일 경우\r\n          if (oldBook.chapters && oldBook.chapters.length > 0) {\r\n            return {\r\n              ...oldBook,\r\n              chapters: oldBook.chapters.map((chapter: Chapter) => ({\r\n                ...chapter,\r\n                learnings: (chapter.learnings || []).map((learning: Learning) => \r\n                  learning._id === learningId ? { ...learning, skillIds: newSkillIds } : learning\r\n                )\r\n              }))\r\n            }\r\n          }\r\n          \r\n          // 기존 학습 내용 리스트 기반일 경우\r\n          return {\r\n            ...oldBook,\r\n            learnings: (oldBook.learnings || []).map((learning: Learning) => \r\n              learning._id === learningId ? { ...learning, skillIds: newSkillIds } : learning\r\n            )\r\n          }\r\n        })\r\n      }\r\n\r\n      // 4. 서버 API 호출\r\n      await updateSkillsMutation.mutateAsync({ learningId, skillIds: newSkillIds })\r\n\r\n    } catch (error) {\r\n      console.error('Failed to update learning skills:', error)\r\n      setApiError('스킬 연결/해제에 실패했습니다.')\r\n\r\n      // 5. 에러 발생 시 롤백: 이전 데이터로 복원\r\n      if (previousChapters) {\r\n        queryClient.setQueryData(chaptersQueryKey, previousChapters)\r\n      }\r\n      if (previousBook) {\r\n        queryClient.setQueryData(queryKey, previousBook)\r\n      } else {\r\n        // 이전 데이터가 없으면 캐시를 무효화하여 서버에서 다시 가져오도록 합니다\r\n        queryClient.invalidateQueries({ queryKey })\r\n        queryClient.invalidateQueries({ queryKey: chaptersQueryKey })\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    editingLearningId,\r\n    currentFormData,\r\n    setCurrentFormData,\r\n    showAddForm,\r\n    isSaving,\r\n    learningApiError: apiError,\r\n    handleToggleAddForm,\r\n    handleAddLearning,\r\n    handleDeleteLearning,\r\n    handleStartEdit,\r\n    handleSaveEdit,\r\n    handleCancelEdit,\r\n    handleSkillLinkChange,  // 🌟 새로운 핸들러 추가\r\n  }\r\n}\r\n","import { useQuery } from '@tanstack/react-query';\r\nimport { skillsAPI } from '../services/api';\r\nimport { SkillCategory } from '../types';\r\n\r\ninterface UseSkillsResult {\r\n  skillCategories: SkillCategory[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  refetch: () => void;\r\n}\r\n\r\n// React Query를 사용한 데이터 페칭\r\nconst fetchSkillCategories = async (): Promise<SkillCategory[]> => {\r\n  const response = await skillsAPI.getCategories();\r\n  // API 응답이 { data: [...] } 형태인지 확인\r\n  const categories = response.data?.data || response.data || [];\r\n  return categories;\r\n};\r\n\r\nexport const useSkills = (): UseSkillsResult => {\r\n  const {\r\n    data: skillCategories = [],\r\n    isLoading: loading,\r\n    error,\r\n    refetch\r\n  } = useQuery({\r\n    queryKey: ['skillCategories'],\r\n    queryFn: fetchSkillCategories,\r\n    staleTime: 5 * 60 * 1000, // 5분\r\n    gcTime: 10 * 60 * 1000, // 10분\r\n  });\r\n\r\n  return { \r\n    skillCategories, \r\n    loading, \r\n    error: error ? '스킬 데이터를 불러오는데 실패했습니다.' : null, \r\n    refetch \r\n  };\r\n};\r\n","import { useQuery, useMutation, useQueryClient, UseQueryResult } from '@tanstack/react-query'\r\nimport { videoLearningsAPI } from '../services/api'\r\nimport { VideoLearning, VideoLearningFormData } from '../types'\r\n\r\n// =================================================================\r\n// 📹 VideoLearning Query Keys\r\n// =================================================================\r\n\r\nconst VIDEO_LEARNING_QUERY_KEY = 'videoLearnings'\r\n\r\n// =================================================================\r\n// 📥 영상 학습 목록 조회 (React Query)\r\n// =================================================================\r\n\r\nexport const useVideoLearnings = (): UseQueryResult<VideoLearning[], Error> => {\r\n  return useQuery<VideoLearning[], Error>({\r\n    queryKey: [VIDEO_LEARNING_QUERY_KEY, 'list'],\r\n    queryFn: async () => {\r\n      const response = await videoLearningsAPI.getAll()\r\n      return response.data?.data || response.data || []\r\n    },\r\n    staleTime: 5 * 60 * 1000,  // 5분\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 📥 특정 영상 학습 조회 (React Query)\r\n// =================================================================\r\n\r\nexport const useVideoLearning = (id: string | undefined): UseQueryResult<VideoLearning, Error> => {\r\n  return useQuery<VideoLearning, Error>({\r\n    queryKey: [VIDEO_LEARNING_QUERY_KEY, 'detail', id],\r\n    queryFn: async () => {\r\n      if (!id) throw new Error('ID is required')\r\n      const response = await videoLearningsAPI.getById(id)\r\n      return response.data\r\n    },\r\n    enabled: !!id,\r\n    staleTime: 5 * 60 * 1000,\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// ➕ 영상 학습 생성 (React Query Mutation)\r\n// =================================================================\r\n\r\nexport const useCreateVideoLearning = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<VideoLearning, Error, VideoLearningFormData>({\r\n    mutationFn: async (data: VideoLearningFormData) => {\r\n      const response = await videoLearningsAPI.create(data)\r\n      return response.data\r\n    },\r\n    onSuccess: () => {\r\n      // 목록 캐시 무효화\r\n      queryClient.invalidateQueries({ queryKey: [VIDEO_LEARNING_QUERY_KEY, 'list'] })\r\n      // 데이터 카운트도 무효화\r\n      queryClient.invalidateQueries({ queryKey: ['dataCounts'] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// ✏️ 영상 학습 수정 (React Query Mutation)\r\n// =================================================================\r\n\r\nexport const useUpdateVideoLearning = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<VideoLearning, Error, { id: string; data: VideoLearningFormData }>({\r\n    mutationFn: async ({ id, data }) => {\r\n      const response = await videoLearningsAPI.update(id, data)\r\n      return response.data\r\n    },\r\n    onSuccess: (_, variables) => {\r\n      // 목록 캐시 무효화\r\n      queryClient.invalidateQueries({ queryKey: [VIDEO_LEARNING_QUERY_KEY, 'list'] })\r\n      // 해당 영상 학습 상세 캐시도 무효화\r\n      queryClient.invalidateQueries({ queryKey: [VIDEO_LEARNING_QUERY_KEY, 'detail', variables.id] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 🗑️ 영상 학습 삭제 (React Query Mutation)\r\n// =================================================================\r\n\r\nexport const useDeleteVideoLearning = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<void, Error, string>({\r\n    mutationFn: async (id: string) => {\r\n      await videoLearningsAPI.delete(id)\r\n    },\r\n    onSuccess: () => {\r\n      // 목록 캐시 무효화\r\n      queryClient.invalidateQueries({ queryKey: [VIDEO_LEARNING_QUERY_KEY, 'list'] })\r\n      // 데이터 카운트도 무효화\r\n      queryClient.invalidateQueries({ queryKey: ['dataCounts'] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 🔄 기존 훅 호환성 유지 (기존 컴포넌트가 바로 사용할 수 있도록)\r\n// =================================================================\r\n\r\nexport const useVideoLearningManagerData = () => {\r\n  const { data: videoLearnings = [], isLoading, isError, error, refetch } = useVideoLearnings()\r\n  const createMutation = useCreateVideoLearning()\r\n  const updateMutation = useUpdateVideoLearning()\r\n  const deleteMutation = useDeleteVideoLearning()\r\n\r\n  const createVideoLearning = async (data: VideoLearningFormData) => {\r\n    try {\r\n      await createMutation.mutateAsync(data)\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('VideoLearning 생성 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  const updateVideoLearning = async (id: string, data: VideoLearningFormData) => {\r\n    try {\r\n      await updateMutation.mutateAsync({ id, data })\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('VideoLearning 수정 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  const deleteVideoLearning = async (id: string) => {\r\n    try {\r\n      await deleteMutation.mutateAsync(id)\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('VideoLearning 삭제 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  return {\r\n    videoLearnings,\r\n    isLoading,\r\n    error: isError ? error : null,\r\n    createVideoLearning,\r\n    updateVideoLearning,\r\n    deleteVideoLearning,\r\n    refetch,\r\n  }\r\n}\r\n\r\n","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { videoPlaylistsAPI, playlistVideosAPI } from '../services/api'\r\nimport { VideoPlaylist, VideoPlaylistFormData, PlaylistVideo, PlaylistVideoFormData } from '../types'\r\n\r\n// =================================================================\r\n// 재생 목록 조회 훅\r\n// =================================================================\r\n\r\nexport const useVideoPlaylists = () => {\r\n  return useQuery<VideoPlaylist[], Error>({\r\n    queryKey: ['videoPlaylists'],\r\n    queryFn: async () => {\r\n      const response = await videoPlaylistsAPI.getAll()\r\n      return response.data?.data || response.data || []\r\n    },\r\n    staleTime: 5 * 60 * 1000,\r\n  })\r\n}\r\n\r\nexport const useVideoPlaylist = (id: string | undefined) => {\r\n  return useQuery<VideoPlaylist, Error>({\r\n    queryKey: ['videoPlaylist', id],\r\n    queryFn: async () => {\r\n      if (!id) throw new Error('ID가 필요합니다')\r\n      const response = await videoPlaylistsAPI.getById(id)\r\n      return response.data?.data || response.data\r\n    },\r\n    enabled: !!id,\r\n    staleTime: 5 * 60 * 1000,\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 재생 목록 내 영상 조회 훅\r\n// =================================================================\r\n\r\nexport const usePlaylistVideos = (playlistId: string | undefined) => {\r\n  return useQuery<PlaylistVideo[], Error>({\r\n    queryKey: ['playlistVideos', playlistId],\r\n    queryFn: async () => {\r\n      if (!playlistId) return []\r\n      const response = await playlistVideosAPI.getByPlaylist(playlistId)\r\n      return response.data?.data || response.data || []\r\n    },\r\n    enabled: !!playlistId,\r\n    staleTime: 5 * 60 * 1000,\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 재생 목록 Mutation 훅\r\n// =================================================================\r\n\r\nexport const useCreateVideoPlaylist = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation({\r\n    mutationFn: (data: VideoPlaylistFormData) => videoPlaylistsAPI.create(data),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['videoPlaylists'] })\r\n    },\r\n  })\r\n}\r\n\r\nexport const useUpdateVideoPlaylist = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation({\r\n    mutationFn: ({ id, data }: { id: string; data: VideoPlaylistFormData }) =>\r\n      videoPlaylistsAPI.update(id, data),\r\n    onSuccess: (_, variables) => {\r\n      queryClient.invalidateQueries({ queryKey: ['videoPlaylists'] })\r\n      queryClient.invalidateQueries({ queryKey: ['videoPlaylist', variables.id] })\r\n    },\r\n  })\r\n}\r\n\r\nexport const useDeleteVideoPlaylist = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation({\r\n    mutationFn: (id: string) => videoPlaylistsAPI.delete(id),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['videoPlaylists'] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 재생 목록 영상 Mutation 훅\r\n// =================================================================\r\n\r\nexport const useCreatePlaylistVideo = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation({\r\n    mutationFn: (data: PlaylistVideoFormData) => playlistVideosAPI.create(data),\r\n    onSuccess: (_, variables) => {\r\n      queryClient.invalidateQueries({ queryKey: ['playlistVideos', variables.playlistId] })\r\n    },\r\n  })\r\n}\r\n\r\nexport const useUpdatePlaylistVideo = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation({\r\n    mutationFn: ({ id, data }: { id: string; data: PlaylistVideoFormData }) =>\r\n      playlistVideosAPI.update(id, data),\r\n    onSuccess: (response) => {\r\n      const playlistId = response.data?.data?.playlistId\r\n      if (playlistId) {\r\n        queryClient.invalidateQueries({ queryKey: ['playlistVideos', playlistId] })\r\n      }\r\n    },\r\n  })\r\n}\r\n\r\nexport const useDeletePlaylistVideo = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation({\r\n    mutationFn: (id: string) => playlistVideosAPI.delete(id),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['playlistVideos'] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 관리자용 데이터 훅\r\n// =================================================================\r\n\r\nexport const useVideoPlaylistManagerData = () => {\r\n  const { data: playlists = [], isLoading } = useVideoPlaylists()\r\n  const createMutation = useCreateVideoPlaylist()\r\n  const updateMutation = useUpdateVideoPlaylist()\r\n  const deleteMutation = useDeleteVideoPlaylist()\r\n\r\n  const createPlaylist = async (data: VideoPlaylistFormData) => {\r\n    try {\r\n      console.log('🎬 재생 목록 생성 시도:', data)\r\n      const result = await createMutation.mutateAsync(data)\r\n      console.log('✅ 재생 목록 생성 성공:', result)\r\n      return { success: true }\r\n    } catch (error: any) {\r\n      console.error('❌ 재생 목록 생성 실패:', error)\r\n      console.error('❌ 에러 상세:', {\r\n        message: error?.message,\r\n        response: error?.response?.data,\r\n        status: error?.response?.status\r\n      })\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  const updatePlaylist = async (id: string, data: VideoPlaylistFormData) => {\r\n    try {\r\n      await updateMutation.mutateAsync({ id, data })\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('재생 목록 수정 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  const deletePlaylist = async (id: string) => {\r\n    try {\r\n      await deleteMutation.mutateAsync(id)\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('재생 목록 삭제 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  return {\r\n    playlists,\r\n    isLoading,\r\n    createPlaylist,\r\n    updatePlaylist,\r\n    deletePlaylist,\r\n  }\r\n}\r\n\r\n","import { useState, useCallback } from 'react'\r\n\r\nexport type ToastType = 'success' | 'error' | 'warning' | 'info'\r\n\r\nexport interface Toast {\r\n  id: string\r\n  type: ToastType\r\n  title: string\r\n  message?: string\r\n  duration?: number\r\n}\r\n\r\ninterface UseToastReturn {\r\n  toasts: Toast[]\r\n  showToast: (toast: Omit<Toast, 'id'>) => void\r\n  hideToast: (id: string) => void\r\n  clearAllToasts: () => void\r\n}\r\n\r\n/**\r\n * Toast 알림 시스템을 위한 Custom Hook\r\n * 성공, 에러, 경고, 정보 메시지를 표시할 수 있습니다.\r\n */\r\nexport function useToast(): UseToastReturn {\r\n  const [toasts, setToasts] = useState<Toast[]>([])\r\n\r\n  const showToast = useCallback((toast: Omit<Toast, 'id'>) => {\r\n    const id = Math.random().toString(36).substr(2, 9)\r\n    const newToast: Toast = {\r\n      id,\r\n      duration: 5000, // 기본 5초\r\n      ...toast\r\n    }\r\n\r\n    setToasts(prev => [...prev, newToast])\r\n\r\n    // 자동 제거 (duration이 0이 아닌 경우)\r\n    if (newToast.duration && newToast.duration > 0) {\r\n      setTimeout(() => {\r\n        hideToast(id)\r\n      }, newToast.duration)\r\n    }\r\n  }, [])\r\n\r\n  const hideToast = useCallback((id: string) => {\r\n    setToasts(prev => prev.filter(toast => toast.id !== id))\r\n  }, [])\r\n\r\n  const clearAllToasts = useCallback(() => {\r\n    setToasts([])\r\n  }, [])\r\n\r\n  return {\r\n    toasts,\r\n    showToast,\r\n    hideToast,\r\n    clearAllToasts\r\n  }\r\n}\r\n\r\n/**\r\n * 편의 메서드들을 제공하는 Toast Hook\r\n */\r\nexport function useToastHelpers() {\r\n  const { showToast, ...rest } = useToast()\r\n\r\n  const success = useCallback((title: string, message?: string) => {\r\n    showToast({ type: 'success', title, message })\r\n  }, [showToast])\r\n\r\n  const error = useCallback((title: string, message?: string) => {\r\n    showToast({ type: 'error', title, message })\r\n  }, [showToast])\r\n\r\n  const warning = useCallback((title: string, message?: string) => {\r\n    showToast({ type: 'warning', title, message })\r\n  }, [showToast])\r\n\r\n  const info = useCallback((title: string, message?: string) => {\r\n    showToast({ type: 'info', title, message })\r\n  }, [showToast])\r\n\r\n  return {\r\n    ...rest,\r\n    success,\r\n    error,\r\n    warning,\r\n    info\r\n  }\r\n}\r\n\r\nexport default useToast\r\n","import { useQuery } from '@tanstack/react-query';\r\nimport { projectsAPI } from '../services/api';\r\nimport { Project } from '../types';\r\n\r\ninterface UseProjectsResult {\r\n  projects: Project[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  refetch: () => void;\r\n}\r\n\r\n// React Query를 사용한 데이터 페칭\r\nconst fetchProjects = async (): Promise<Project[]> => {\r\n  const response = await projectsAPI.getAll();\r\n  return response.data.data;\r\n};\r\n\r\nexport const useProjects = (): UseProjectsResult => {\r\n  const {\r\n    data: projects = [],\r\n    isLoading: loading,\r\n    error,\r\n    refetch\r\n  } = useQuery({\r\n    queryKey: ['projects'],\r\n    queryFn: fetchProjects,\r\n    staleTime: 5 * 60 * 1000, // 5분\r\n    gcTime: 10 * 60 * 1000, // 10분\r\n  });\r\n\r\n  return { \r\n    projects, \r\n    loading, \r\n    error: error ? '프로젝트를 불러오는데 실패했습니다.' : null, \r\n    refetch \r\n  };\r\n};\r\n","import { useState, useEffect, useMemo } from 'react'\r\nimport { projectsAPI } from '../services/api'\r\nimport { Project, Skill } from '../types'\r\nimport { useSkills } from './useSkills'\r\nimport { \r\n  getLocalizedField, \r\n  getLocalizedArrayField,\r\n  getLocalizedSkillName,\r\n  getLocalizedSkillDescription,\r\n  Language \r\n} from '@/utils/i18nUtils'\r\n\r\ninterface LocalizedProject extends Omit<Project, 'technologies' | 'features' | 'learnings' | 'videoDescriptions'> {\r\n  title: string\r\n  description: string\r\n  detailedDescription: string\r\n  technologies: string[]\r\n  features: string[]\r\n  learnings: string[]\r\n  videoDescriptions: string[]\r\n}\r\n\r\ninterface LinkedSkill extends Skill {\r\n  levelText: string\r\n}\r\n\r\ninterface UseProjectDetailReturn {\r\n  loading: boolean\r\n  error: string | null\r\n  localizedProject: LocalizedProject | null\r\n  linkedSkills: LinkedSkill[]\r\n}\r\n\r\n/**\r\n * Custom hook for ProjectDetail component\r\n * Handles data fetching, multilingual field processing, and skill matching\r\n */\r\nexport const useProjectDetail = (\r\n  id: string | undefined,\r\n  currentLang: Language\r\n): UseProjectDetailReturn => {\r\n  const [project, setProject] = useState<Project | null>(null)\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const { skillCategories } = useSkills()\r\n\r\n  // Fetch project data by ID\r\n  useEffect(() => {\r\n    const fetchProject = async () => {\r\n      if (!id) return\r\n\r\n      try {\r\n        setLoading(true)\r\n        const response = await projectsAPI.getById(id)\r\n        setProject(response.data)\r\n      } catch (error) {\r\n        console.error('Failed to fetch project:', error)\r\n        setError('프로젝트를 불러오는데 실패했습니다.')\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchProject()\r\n  }, [id])\r\n\r\n  // Create localized project object with all multilingual fields processed\r\n  const localizedProject = useMemo<LocalizedProject | null>(() => {\r\n    if (!project) return null\r\n\r\n    return {\r\n      ...project,\r\n      // String fields\r\n      title: getLocalizedField(currentLang, project.title, project.titleEn, project.titleJa),\r\n      description: getLocalizedField(currentLang, project.description, project.descriptionEn, project.descriptionJa),\r\n      detailedDescription: getLocalizedField(\r\n        currentLang,\r\n        project.detailedDescription,\r\n        project.detailedDescriptionEn,\r\n        project.detailedDescriptionJa\r\n      ),\r\n      // Array fields - CRITICAL: Always add || [] fallback to prevent runtime errors\r\n      technologies: getLocalizedArrayField(\r\n        currentLang,\r\n        project.technologies,\r\n        project.technologiesEn,\r\n        project.technologiesJa\r\n      ) || [],\r\n      features: getLocalizedArrayField(\r\n        currentLang,\r\n        project.features,\r\n        project.featuresEn,\r\n        project.featuresJa\r\n      ) || [],\r\n      learnings: getLocalizedArrayField(\r\n        currentLang,\r\n        project.learnings,\r\n        project.learningsEn,\r\n        project.learningsJa\r\n      ) || [],\r\n      videoDescriptions: getLocalizedArrayField(\r\n        currentLang,\r\n        project.videoDescriptions,\r\n        project.videoDescriptionsEn,\r\n        project.videoDescriptionsJa\r\n      ) || [],\r\n    }\r\n  }, [project, currentLang])\r\n\r\n  // Helper function to get level text\r\n  const getLevelText = (level: number): string => {\r\n    if (level >= 90) return 'Expert'\r\n    if (level >= 70) return 'Proficient'\r\n    if (level >= 50) return 'Competent'\r\n    return 'Basic'\r\n  }\r\n\r\n  // Process linked skills with multilingual support\r\n  const linkedSkills = useMemo<LinkedSkill[]>(() => {\r\n    if (!project || !skillCategories) return []\r\n\r\n    // Flatten all skills from categories\r\n    const allSkills = skillCategories.flatMap(category => category.skills || [])\r\n\r\n    // Create Set for O(1) lookup performance\r\n    const skillIdSet = new Set(project.skillIds || [])\r\n\r\n    // Filter and map skills with localization\r\n    return allSkills\r\n      .filter(skill => skillIdSet.has(skill._id!))\r\n      .map(skill => ({\r\n        ...skill,\r\n        name: getLocalizedSkillName(currentLang, skill),\r\n        description: getLocalizedSkillDescription(currentLang, skill),\r\n        levelText: getLevelText(skill.level || 0),\r\n      }))\r\n  }, [project, skillCategories, currentLang])\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    localizedProject,\r\n    linkedSkills,\r\n  }\r\n}\r\n\r\n","import { useQuery } from '@tanstack/react-query';\r\nimport { experiencesAPI } from '../services/api';\r\n\r\n// 경력 상세 카테고리 타입\r\nexport interface ExperienceDetail {\r\n  category: string;  // 카테고리 이름 (예: \"근무경험\", \"교육\", \"근무매장\")\r\n  categoryEn?: string;\r\n  categoryJa?: string;\r\n  items: string[];   // 카테고리별 항목들\r\n  itemsEn?: string[];\r\n  itemsJa?: string[];\r\n  order?: number;\r\n}\r\n\r\n// 백엔드 ExperienceSchema에 맞춘 인터페이스 정의\r\nexport interface ExperienceItem {\r\n  _id: string;\r\n  period: string;\r\n  title: string;\r\n  titleEn?: string;\r\n  titleJa?: string;\r\n  company: string;\r\n  companyEn?: string;\r\n  companyJa?: string;\r\n  description: string;\r\n  descriptionEn?: string;\r\n  descriptionJa?: string;\r\n  details?: ExperienceDetail[];  // 카테고리별 상세 내용 (신규)\r\n  detailsEn?: ExperienceDetail[];\r\n  detailsJa?: ExperienceDetail[];\r\n  skills: string[];  // 🔄 호환성 유지\r\n  skillsEn?: string[];\r\n  skillsJa?: string[];\r\n  skillIds?: string[];  // 🌟 스킬 ID 목록 (Skills 페이지와 연결)\r\n  iconKey?: string;\r\n  color?: string;\r\n  bgColor?: string;\r\n  order?: number;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n}\r\n\r\ninterface UseExperiencesResult {\r\n  experiences: ExperienceItem[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  refetch: () => void;\r\n}\r\n\r\n// 데이터 변환 및 정렬 함수\r\nconst transformExperiences = (data: ExperienceItem[]): ExperienceItem[] => {\r\n  return data.slice().sort((a, b) => {\r\n    // case 1: 두 항목 모두 order가 있으면 order를 기준으로 오름차순\r\n    if (a.order !== undefined && b.order !== undefined) {\r\n      return a.order - b.order;\r\n    }\r\n    \r\n    // case 2: order가 하나만 있거나 둘 다 없으면 createdAt을 기준으로 역순 (최신순)\r\n    if (a.createdAt && b.createdAt) {\r\n      // Date 객체로 변환하여 비교 (내림차순)\r\n      return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\r\n    }\r\n    \r\n    return 0; // 정렬할 필드가 모두 없으면 순서 변경 없음\r\n  });\r\n};\r\n\r\n// React Query를 사용한 데이터 페칭\r\nconst fetchExperiences = async (): Promise<ExperienceItem[]> => {\r\n  const response = await experiencesAPI.getAll();\r\n  const data: ExperienceItem[] = response.data.data;\r\n  return transformExperiences(data);\r\n};\r\n\r\nexport const useExperiences = (): UseExperiencesResult => {\r\n  const {\r\n    data: experiences = [],\r\n    isLoading: loading,\r\n    error,\r\n    refetch\r\n  } = useQuery({\r\n    queryKey: ['experiences'],\r\n    queryFn: fetchExperiences,\r\n    staleTime: 5 * 60 * 1000, // 5분\r\n    gcTime: 10 * 60 * 1000, // 10분\r\n  });\r\n\r\n  return { \r\n    experiences, \r\n    loading, \r\n    error: error ? '경험 데이터를 불러오는 중 오류가 발생했습니다.' : null, \r\n    refetch \r\n  };\r\n};\r\n","import { useEffect, useRef, useCallback } from 'react'\r\n\r\n/**\r\n * AbortController를 사용하여 API 요청 취소를 관리하는 Hook\r\n * 컴포넌트 언마운트 시 또는 의존성 변경 시 이전 요청을 취소하여\r\n * 메모리 누수와 Race Condition을 방지합니다.\r\n */\r\nexport function useAbortController() {\r\n  const abortControllerRef = useRef<AbortController | null>(null)\r\n\r\n  // 새로운 AbortController 생성\r\n  const createAbortController = useCallback(() => {\r\n    // 이전 컨트롤러가 있다면 취소\r\n    if (abortControllerRef.current) {\r\n      abortControllerRef.current.abort()\r\n    }\r\n    \r\n    // 새로운 컨트롤러 생성\r\n    abortControllerRef.current = new AbortController()\r\n    return abortControllerRef.current\r\n  }, [])\r\n\r\n  // 현재 AbortController 가져오기 (없으면 생성)\r\n  const getAbortController = useCallback(() => {\r\n    if (!abortControllerRef.current) {\r\n      abortControllerRef.current = new AbortController()\r\n    }\r\n    return abortControllerRef.current\r\n  }, [])\r\n\r\n  // 요청 취소\r\n  const abort = useCallback(() => {\r\n    if (abortControllerRef.current) {\r\n      abortControllerRef.current.abort()\r\n      abortControllerRef.current = null\r\n    }\r\n  }, [])\r\n\r\n  // 컴포넌트 언마운트 시 정리\r\n  useEffect(() => {\r\n    return () => {\r\n      if (abortControllerRef.current) {\r\n        abortControllerRef.current.abort()\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  return {\r\n    createAbortController,\r\n    getAbortController,\r\n    abort,\r\n    signal: abortControllerRef.current?.signal\r\n  }\r\n}\r\n\r\n/**\r\n * API 요청을 위한 AbortController를 자동으로 관리하는 Hook\r\n * 의존성 배열이 변경될 때마다 이전 요청을 취소하고 새로운 요청을 시작합니다.\r\n */\r\nexport function useAbortableEffect(\r\n  effect: (signal: AbortSignal) => void | (() => void),\r\n  deps: React.DependencyList = []\r\n) {\r\n  const { createAbortController } = useAbortController()\r\n\r\n  useEffect(() => {\r\n    const abortController = createAbortController()\r\n    \r\n    const cleanup = effect(abortController.signal)\r\n    \r\n    return () => {\r\n      if (typeof cleanup === 'function') {\r\n        cleanup()\r\n      }\r\n      abortController.abort()\r\n    }\r\n  }, deps)\r\n}\r\n\r\n/**\r\n * API 요청을 위한 fetch wrapper with AbortController\r\n */\r\nexport async function fetchWithAbort(\r\n  url: string,\r\n  options: RequestInit = {},\r\n  signal?: AbortSignal\r\n): Promise<Response> {\r\n  const response = await fetch(url, {\r\n    ...options,\r\n    signal: signal || null\r\n  })\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`HTTP error! status: ${response.status}`)\r\n  }\r\n\r\n  return response\r\n}\r\n\r\nexport default useAbortController\r\n","import { useState, useCallback, useRef } from 'react'\r\n\r\ninterface OptimisticUpdateOptions<T> {\r\n  onSuccess?: (data: T) => void\r\n  onError?: (error: Error, rollback: () => void) => void\r\n  onRollback?: (data: T) => void\r\n}\r\n\r\n/**\r\n * 낙관적 업데이트를 관리하는 Hook\r\n * API 요청 전에 UI를 먼저 업데이트하여 더 나은 사용자 경험을 제공합니다.\r\n * 실패 시 자동으로 롤백합니다.\r\n */\r\nexport function useOptimisticUpdate<T>(\r\n  initialData: T,\r\n  options: OptimisticUpdateOptions<T> = {}\r\n) {\r\n  const [data, setData] = useState<T>(initialData)\r\n  const [isOptimistic, setIsOptimistic] = useState(false)\r\n  const previousDataRef = useRef<T>(initialData)\r\n\r\n  const { onSuccess, onError, onRollback } = options\r\n\r\n  // 낙관적 업데이트 실행\r\n  const optimisticUpdate = useCallback(async (\r\n    optimisticData: T | ((prev: T) => T),\r\n    apiCall: () => Promise<T>\r\n  ) => {\r\n    // 이전 데이터 백업\r\n    previousDataRef.current = data\r\n    \r\n    // 낙관적 업데이트 실행\r\n    setData(prev => {\r\n      const newData = typeof optimisticData === 'function' \r\n        ? (optimisticData as (prev: T) => T)(prev)\r\n        : optimisticData\r\n      return newData\r\n    })\r\n    \r\n    setIsOptimistic(true)\r\n\r\n    try {\r\n      // API 호출\r\n      const result = await apiCall()\r\n      \r\n      // 성공 시 실제 데이터로 업데이트\r\n      setData(result)\r\n      setIsOptimistic(false)\r\n      onSuccess?.(result)\r\n      \r\n      return result\r\n    } catch (error) {\r\n      // 실패 시 롤백\r\n      setData(previousDataRef.current)\r\n      setIsOptimistic(false)\r\n      \r\n      const rollback = () => {\r\n        setData(previousDataRef.current)\r\n        onRollback?.(previousDataRef.current)\r\n      }\r\n      \r\n      onError?.(error as Error, rollback)\r\n      throw error\r\n    }\r\n  }, [data, onSuccess, onError, onRollback])\r\n\r\n  // 데이터 업데이트 (낙관적 업데이트 없이)\r\n  const updateData = useCallback((newData: T | ((prev: T) => T)) => {\r\n    setData(prev => {\r\n      const updated = typeof newData === 'function' \r\n        ? (newData as (prev: T) => T)(prev)\r\n        : newData\r\n      return updated\r\n    })\r\n  }, [])\r\n\r\n  // 데이터 리셋\r\n  const resetData = useCallback((newData: T) => {\r\n    setData(newData)\r\n    previousDataRef.current = newData\r\n    setIsOptimistic(false)\r\n  }, [])\r\n\r\n  return {\r\n    data,\r\n    isOptimistic,\r\n    optimisticUpdate,\r\n    updateData,\r\n    resetData\r\n  }\r\n}\r\n\r\n/**\r\n * 배열 데이터를 위한 낙관적 업데이트 Hook\r\n * 추가, 수정, 삭제 작업에 특화되어 있습니다.\r\n */\r\nexport function useOptimisticArrayUpdate<T extends { _id: string }>(\r\n  initialData: T[],\r\n  options: OptimisticUpdateOptions<T[]> = {}\r\n) {\r\n  const {\r\n    data,\r\n    isOptimistic,\r\n    optimisticUpdate,\r\n    updateData,\r\n    resetData\r\n  } = useOptimisticUpdate<T[]>(initialData, options)\r\n\r\n  // 항목 추가\r\n  const optimisticAdd = useCallback(async (\r\n    newItem: T,\r\n    apiCall: () => Promise<T>\r\n  ) => {\r\n    return optimisticUpdate(\r\n      (prev) => [...prev, { ...newItem, _id: `temp_${Date.now()}` } as T],\r\n      async () => {\r\n        const result = await apiCall()\r\n        // 임시 ID를 실제 ID로 교체\r\n        updateData(prev => prev.map(item => \r\n          item._id.startsWith('temp_') ? result : item\r\n        ))\r\n        return [...data.filter(item => !item._id.startsWith('temp_')), result]\r\n      }\r\n    )\r\n  }, [optimisticUpdate, updateData, data])\r\n\r\n  // 항목 수정\r\n  const optimisticUpdateItem = useCallback(async (\r\n    id: string,\r\n    updates: Partial<T>,\r\n    apiCall: () => Promise<T>\r\n  ) => {\r\n    return optimisticUpdate(\r\n      (prev) => prev.map(item => \r\n        item._id === id ? { ...item, ...updates } : item\r\n      ),\r\n      async () => {\r\n        const result = await apiCall()\r\n        updateData(prev => prev.map(item => \r\n          item._id === id ? result : item\r\n        ))\r\n        return data.map(item => item._id === id ? result : item)\r\n      }\r\n    )\r\n  }, [optimisticUpdate, updateData, data])\r\n\r\n  // 항목 삭제\r\n  const optimisticDelete = useCallback(async (\r\n    id: string,\r\n    apiCall: () => Promise<void>\r\n  ) => {\r\n    const itemToDelete = data.find(item => item._id === id)\r\n    if (!itemToDelete) return\r\n\r\n    return optimisticUpdate(\r\n      (prev) => prev.filter(item => item._id !== id),\r\n      async () => {\r\n        await apiCall()\r\n        return data.filter(item => item._id !== id)\r\n      }\r\n    )\r\n  }, [optimisticUpdate, data])\r\n\r\n  // 항목 재정렬\r\n  const optimisticReorder = useCallback(async (\r\n    reorderedItems: T[],\r\n    apiCall: () => Promise<T[]>\r\n  ) => {\r\n    return optimisticUpdate(\r\n      reorderedItems,\r\n      async () => {\r\n        const result = await apiCall()\r\n        return result\r\n      }\r\n    )\r\n  }, [optimisticUpdate])\r\n\r\n  return {\r\n    data,\r\n    isOptimistic,\r\n    optimisticAdd,\r\n    optimisticUpdateItem,\r\n    optimisticDelete,\r\n    optimisticReorder,\r\n    updateData,\r\n    resetData\r\n  }\r\n}\r\n\r\nexport default useOptimisticUpdate\r\n","import { useState, useEffect, useCallback } from 'react'\r\nimport { useAbortController } from './useAbortController'\r\nimport { useOptimisticArrayUpdate } from './useOptimisticUpdate'\r\nimport { useToastHelpers } from './useToast'\r\nimport { booksAPI } from '../services/api'\r\nimport { Book, BookFormData, BookUpdateData } from '../types'\r\n\r\n/**\r\n * 리팩토링된 BookManager 데이터 관리 Hook\r\n * \r\n * 주요 개선사항:\r\n * 1. AbortController를 사용한 메모리 누수 방지\r\n * 2. 낙관적 업데이트로 성능 개선\r\n * 3. Toast 알림으로 사용자 피드백 개선\r\n * 4. 에러 처리 강화\r\n */\r\nexport function useBookManagerData() {\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const { createAbortController } = useAbortController()\r\n  const { success, error: showError } = useToastHelpers()\r\n\r\n  // 낙관적 업데이트를 사용한 서적 데이터 관리\r\n  const {\r\n    data: books,\r\n    isOptimistic,\r\n    optimisticAdd,\r\n    optimisticUpdateItem,\r\n    optimisticDelete,\r\n    resetData\r\n  } = useOptimisticArrayUpdate<Book>([])\r\n\r\n  // 서적 데이터 로드\r\n  const fetchBooks = useCallback(async () => {\r\n    try {\r\n      setIsLoading(true)\r\n      setError(null)\r\n      \r\n      const abortController = createAbortController()\r\n      const response = await booksAPI.getAll()\r\n      \r\n        if (!abortController.signal.aborted) {\r\n          resetData(response.data.data || [])\r\n        }\r\n    } catch (err) {\r\n      if (!(err as Error).name?.includes('AbortError')) {\r\n        const errorMessage = '서적 목록을 불러오는데 실패했습니다.'\r\n        setError(errorMessage)\r\n        showError('로드 실패', errorMessage)\r\n      }\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }, [createAbortController, resetData, showError])\r\n\r\n  // 서적 생성\r\n  const createBook = useCallback(async (bookData: BookFormData) => {\r\n    try {\r\n      const newBook = {\r\n        ...bookData,\r\n        _id: `temp_${Date.now()}`,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      } as Book\r\n\r\n      const result = await optimisticAdd(\r\n        newBook,\r\n        () => booksAPI.create(bookData).then(res => res.data)\r\n      )\r\n\r\n      success('서적 추가 완료', `${bookData.title}이(가) 성공적으로 추가되었습니다.`)\r\n      return result\r\n    } catch (err) {\r\n      showError('서적 추가 실패', err instanceof Error ? err.message : '알 수 없는 오류가 발생했습니다.')\r\n      throw err\r\n    }\r\n  }, [optimisticAdd, success, showError])\r\n\r\n  // 서적 수정\r\n  const updateBook = useCallback(async (bookId: string, bookData: BookUpdateData) => {\r\n    try {\r\n      const result = await optimisticUpdateItem(\r\n        bookId,\r\n        bookData,\r\n        () => booksAPI.update(bookId, bookData).then(res => res.data)\r\n      )\r\n\r\n      success('서적 수정 완료', '서적 정보가 성공적으로 수정되었습니다.')\r\n      return result\r\n    } catch (err) {\r\n      showError('서적 수정 실패', err instanceof Error ? err.message : '알 수 없는 오류가 발생했습니다.')\r\n      throw err\r\n    }\r\n  }, [optimisticUpdateItem, success, showError])\r\n\r\n  // 서적 삭제\r\n  const deleteBook = useCallback(async (bookId: string) => {\r\n    try {\r\n      const result = await optimisticDelete(\r\n        bookId,\r\n        () => booksAPI.delete(bookId).then(() => {})\r\n      )\r\n\r\n      success('서적 삭제 완료', '서적이 성공적으로 삭제되었습니다.')\r\n      return result\r\n    } catch (err) {\r\n      showError('서적 삭제 실패', err instanceof Error ? err.message : '알 수 없는 오류가 발생했습니다.')\r\n      throw err\r\n    }\r\n  }, [optimisticDelete, success, showError])\r\n\r\n  // 초기 데이터 로드\r\n  useEffect(() => {\r\n    fetchBooks()\r\n  }, [])\r\n\r\n  return {\r\n    books,\r\n    isLoading,\r\n    error,\r\n    isOptimistic,\r\n    createBook,\r\n    updateBook,\r\n    deleteBook,\r\n    refetch: fetchBooks\r\n  }\r\n}\r\n\r\nexport default useBookManagerData","import { useState, useCallback } from 'react'\r\n\r\ninterface CRUDState<T> {\r\n  showForm: boolean\r\n  editingItem: T | null\r\n  isSaving: boolean\r\n  isDeleting: boolean\r\n}\r\n\r\ninterface CRUDActions<T> {\r\n  handleCreate: () => void\r\n  handleEdit: (item: T) => void\r\n  handleCancel: () => void\r\n  handleSave: (data: any) => Promise<void>\r\n  handleDelete: (item: T) => Promise<void>\r\n  setShowForm: (show: boolean) => void\r\n  setEditingItem: (item: T | null) => void\r\n}\r\n\r\ninterface UseCRUDManagerOptions<T> {\r\n  onSave: (data: any, editingItem?: T | null) => Promise<void>\r\n  onDelete: (item: T) => Promise<void>\r\n  onSuccess?: () => void\r\n  onError?: (error: Error) => void\r\n}\r\n\r\n/**\r\n * CRUD 관리자를 위한 재사용 가능한 Custom Hook\r\n * BookManager, ExperienceManager, ProjectManager 등에서 공통으로 사용되는\r\n * 상태 관리 로직을 중앙화하여 코드 중복을 제거합니다.\r\n */\r\nexport function useCRUDManager<T>({\r\n  onSave,\r\n  onDelete,\r\n  onSuccess,\r\n  onError\r\n}: UseCRUDManagerOptions<T>): [CRUDState<T>, CRUDActions<T>] {\r\n  \r\n  const [showForm, setShowForm] = useState(false)\r\n  const [editingItem, setEditingItem] = useState<T | null>(null)\r\n  const [isSaving, setIsSaving] = useState(false)\r\n  const [isDeleting, setIsDeleting] = useState(false)\r\n\r\n  // 새 항목 생성 핸들러\r\n  const handleCreate = useCallback(() => {\r\n    setEditingItem(null)\r\n    setShowForm(true)\r\n  }, [])\r\n\r\n  // 기존 항목 편집 핸들러\r\n  const handleEdit = useCallback((item: T) => {\r\n    setEditingItem(item)\r\n    setShowForm(true)\r\n  }, [])\r\n\r\n  // 폼 취소 핸들러\r\n  const handleCancel = useCallback(() => {\r\n    setShowForm(false)\r\n    setEditingItem(null)\r\n    setIsSaving(false)\r\n    setIsDeleting(false)\r\n  }, [])\r\n\r\n  // 저장 핸들러 (낙관적 업데이트 지원)\r\n  const handleSave = useCallback(async (data: any) => {\r\n    if (isSaving) return\r\n\r\n    try {\r\n      setIsSaving(true)\r\n      await onSave(data, editingItem)\r\n      \r\n      // 성공 시 폼 닫기\r\n      handleCancel()\r\n      onSuccess?.()\r\n    } catch (error) {\r\n      console.error('저장 실패:', error)\r\n      onError?.(error as Error)\r\n    } finally {\r\n      setIsSaving(false)\r\n    }\r\n  }, [isSaving, editingItem, onSave, onSuccess, onError, handleCancel])\r\n\r\n  // 삭제 핸들러\r\n  const handleDelete = useCallback(async (item: T) => {\r\n    if (isDeleting) return\r\n    \r\n    // 사용자 확인\r\n    const confirmed = window.confirm(\r\n      `정말 \"${(item as any).title || (item as any).name || '이 항목'}\"을(를) 삭제하시겠습니까?`\r\n    )\r\n    \r\n    if (!confirmed) return\r\n\r\n    try {\r\n      setIsDeleting(true)\r\n      await onDelete(item)\r\n      onSuccess?.()\r\n    } catch (error) {\r\n      console.error('삭제 실패:', error)\r\n      onError?.(error as Error)\r\n    } finally {\r\n      setIsDeleting(false)\r\n    }\r\n  }, [isDeleting, onDelete, onSuccess, onError])\r\n\r\n  const state: CRUDState<T> = {\r\n    showForm,\r\n    editingItem,\r\n    isSaving,\r\n    isDeleting\r\n  }\r\n\r\n  const actions: CRUDActions<T> = {\r\n    handleCreate,\r\n    handleEdit,\r\n    handleCancel,\r\n    handleSave,\r\n    handleDelete,\r\n    setShowForm,\r\n    setEditingItem\r\n  }\r\n\r\n  return [state, actions]\r\n}\r\n\r\n/**\r\n * 낙관적 업데이트를 지원하는 CRUD 관리자 Hook\r\n * API 호출 전에 UI를 먼저 업데이트하여 더 나은 사용자 경험을 제공합니다.\r\n */\r\nexport function useOptimisticCRUDManager<T>({\r\n  onSave,\r\n  onDelete,\r\n  onOptimisticUpdate,\r\n  onOptimisticDelete,\r\n  onSuccess,\r\n  onError\r\n}: UseCRUDManagerOptions<T> & {\r\n  onOptimisticUpdate?: (data: any, editingItem?: T | null) => void\r\n  onOptimisticDelete?: (item: T) => void\r\n}) {\r\n  \r\n  const [state, actions] = useCRUDManager<T>({\r\n    onSave: async (data, editingItem) => {\r\n      // 낙관적 업데이트 실행\r\n      onOptimisticUpdate?.(data, editingItem)\r\n      \r\n      try {\r\n        await onSave(data, editingItem)\r\n      } catch (error) {\r\n        // 실패 시 롤백 (상위 컴포넌트에서 처리)\r\n        throw error\r\n      }\r\n    },\r\n    onDelete: async (item) => {\r\n      // 낙관적 삭제 실행\r\n      onOptimisticDelete?.(item)\r\n      \r\n      try {\r\n        await onDelete(item)\r\n      } catch (error) {\r\n        // 실패 시 롤백 (상위 컴포넌트에서 처리)\r\n        throw error\r\n      }\r\n    },\r\n    onSuccess,\r\n    onError\r\n  })\r\n\r\n  return [state, actions] as const\r\n}\r\n\r\nexport default useCRUDManager\r\n","import { useState, useEffect, useCallback } from 'react'\r\nimport { experiencesAPI } from '../services/api'\r\nimport { Experience } from '../types'\r\n\r\nexport const useExperienceManagerData = () => {\r\n  const [experiences, setExperiences] = useState<Experience[]>([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  // Experience 데이터만 가져오는 함수\r\n  const fetchExperiences = useCallback(async () => {\r\n    setIsLoading(true)\r\n    try {\r\n      const response = await experiencesAPI.getAll()\r\n        setExperiences(response.data.data || [])\r\n    } catch (error) {\r\n      console.error('Experience 데이터 로드 실패:', error)\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }, [])\r\n\r\n  // Experience 생성\r\n  const createExperience = useCallback(async (experienceData: any) => {\r\n    try {\r\n      await experiencesAPI.create(experienceData)\r\n      await fetchExperiences() // 새로고침\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('Experience 생성 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }, [fetchExperiences])\r\n\r\n  // Experience 수정\r\n  const updateExperience = useCallback(async (id: string, experienceData: any) => {\r\n    try {\r\n      await experiencesAPI.update(id, experienceData)\r\n      await fetchExperiences() // 새로고침\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('Experience 수정 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }, [fetchExperiences])\r\n\r\n  // Experience 삭제\r\n  const deleteExperience = useCallback(async (id: string) => {\r\n    try {\r\n      await experiencesAPI.delete(id)\r\n      await fetchExperiences() // 새로고침\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('Experience 삭제 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }, [fetchExperiences])\r\n\r\n  useEffect(() => {\r\n    fetchExperiences()\r\n  }, [])\r\n\r\n  return {\r\n    experiences,\r\n    isLoading,\r\n    fetchExperiences,\r\n    createExperience,\r\n    updateExperience,\r\n    deleteExperience\r\n  }\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { Project, ProjectFormData } from '../types'\r\nimport { AdminLanguage } from '../components/common/LanguageTabs'\r\n\r\n// Video item type with multilingual descriptions\r\nexport interface VideoItem {\r\n  url: string\r\n  description: string\r\n  descriptionEn: string\r\n  descriptionJa: string\r\n}\r\n\r\ninterface UseProjectFormReturn {\r\n  formData: any\r\n  videoItems: VideoItem[]\r\n  currentLang: AdminLanguage\r\n  setCurrentLang: (lang: AdminLanguage) => void\r\n  setFormData: React.Dispatch<React.SetStateAction<any>>\r\n  setVideoItems: React.Dispatch<React.SetStateAction<VideoItem[]>>\r\n  handleFieldChange: (key: string, value: any) => void\r\n  handleArrayFieldChange: (key: string, value: string[]) => void\r\n  handleVideoUrlChange: (index: number, url: string) => void\r\n  handleVideoDescriptionChange: (index: number, description: string, lang: 'ko' | 'en' | 'ja') => void\r\n  handleAddVideo: () => void\r\n  handleRemoveVideo: (index: number) => void\r\n  prepareDataForSubmit: () => any\r\n}\r\n\r\n/**\r\n * Custom hook for ProjectForm\r\n * Handles all form state management, data initialization, and preparation for submission\r\n */\r\nexport const useProjectForm = (initialData: Project | null): UseProjectFormReturn => {\r\n  const [currentLang, setCurrentLang] = useState<AdminLanguage>('ko')\r\n  \r\n  // Initialize categoryIds\r\n  const initialCategoryIds = initialData?.categoryIds \r\n    ? (initialData.categoryIds as any[]).map((catIdOrObj: any) => \r\n        typeof catIdOrObj === 'string' ? catIdOrObj : catIdOrObj._id\r\n      ).filter(Boolean) as string[]\r\n    : []\r\n\r\n  // Initialize skillIds\r\n  const initialSkillIds = initialData?.skillIds \r\n    ? (initialData.skillIds as any[]).map((skillIdOrObj: any) => \r\n        typeof skillIdOrObj === 'string' ? skillIdOrObj : skillIdOrObj._id\r\n      ).filter(Boolean) as string[]\r\n    : []\r\n\r\n  // Initialize video items\r\n  const [videoItems, setVideoItems] = useState<VideoItem[]>(() => {\r\n    if (initialData?.videos && Array.isArray(initialData.videos)) {\r\n      return initialData.videos.map((url, index) => ({\r\n        url,\r\n        description: initialData.videoDescriptions?.[index] || '',\r\n        descriptionEn: initialData.videoDescriptionsEn?.[index] || '',\r\n        descriptionJa: initialData.videoDescriptionsJa?.[index] || ''\r\n      }))\r\n    }\r\n    return []\r\n  })\r\n\r\n  // Initialize form data\r\n  const [formData, setFormData] = useState<any>(\r\n    initialData ? {\r\n      ...initialData,\r\n      // Convert arrays to strings for textarea inputs\r\n      technologies: Array.isArray(initialData.technologies) ? initialData.technologies.join('\\n') : initialData.technologies || '',\r\n      technologiesEn: Array.isArray(initialData.technologiesEn) ? initialData.technologiesEn.join('\\n') : initialData.technologiesEn || '',\r\n      technologiesJa: Array.isArray(initialData.technologiesJa) ? initialData.technologiesJa.join('\\n') : initialData.technologiesJa || '',\r\n      images: Array.isArray(initialData.images) ? initialData.images.join('\\n') : initialData.images || '',\r\n      features: Array.isArray(initialData.features) ? initialData.features.join('\\n') : initialData.features || '',\r\n      featuresEn: Array.isArray(initialData.featuresEn) ? initialData.featuresEn.join('\\n') : initialData.featuresEn || '',\r\n      featuresJa: Array.isArray(initialData.featuresJa) ? initialData.featuresJa.join('\\n') : initialData.featuresJa || '',\r\n      learnings: Array.isArray(initialData.learnings) ? initialData.learnings.join('\\n') : initialData.learnings || '',\r\n      learningsEn: Array.isArray(initialData.learningsEn) ? initialData.learningsEn.join('\\n') : initialData.learningsEn || '',\r\n      learningsJa: Array.isArray(initialData.learningsJa) ? initialData.learningsJa.join('\\n') : initialData.learningsJa || '',\r\n      skillIds: initialSkillIds,\r\n      categoryIds: initialCategoryIds\r\n    } : {\r\n      title: '',\r\n      titleEn: '',\r\n      titleJa: '',\r\n      description: '',\r\n      descriptionEn: '',\r\n      descriptionJa: '',\r\n      technologies: '',\r\n      technologiesEn: '',\r\n      technologiesJa: '',\r\n      category: 'automation',\r\n      categoryIds: [],\r\n      status: 'preparing',\r\n      githubLink: '',\r\n      liveLink: '',\r\n      image: '',\r\n      images: '',\r\n      detailedDescription: '',\r\n      detailedDescriptionEn: '',\r\n      detailedDescriptionJa: '',\r\n      features: '',\r\n      featuresEn: '',\r\n      featuresJa: '',\r\n      learnings: '',\r\n      learningsEn: '',\r\n      learningsJa: '',\r\n      order: 0,\r\n      skillIds: []\r\n    }\r\n  )\r\n\r\n  // Handle simple field change\r\n  const handleFieldChange = (key: string, value: any) => {\r\n    setFormData((prev: any) => ({\r\n      ...prev,\r\n      [key]: value\r\n    }))\r\n  }\r\n\r\n  // Handle array field change (for TagInput or other array inputs)\r\n  const handleArrayFieldChange = (key: string, value: string[]) => {\r\n    setFormData((prev: any) => ({\r\n      ...prev,\r\n      [key]: value\r\n    }))\r\n  }\r\n\r\n  // Video management functions\r\n  const handleAddVideo = () => {\r\n    setVideoItems([...videoItems, { url: '', description: '', descriptionEn: '', descriptionJa: '' }])\r\n  }\r\n\r\n  const handleRemoveVideo = (index: number) => {\r\n    setVideoItems(videoItems.filter((_, i) => i !== index))\r\n  }\r\n\r\n  const handleVideoUrlChange = (index: number, url: string) => {\r\n    const newVideoItems = [...videoItems]\r\n    if (newVideoItems[index]) {\r\n      newVideoItems[index].url = url\r\n      setVideoItems(newVideoItems)\r\n    }\r\n  }\r\n\r\n  const handleVideoDescriptionChange = (index: number, description: string, lang: 'ko' | 'en' | 'ja') => {\r\n    const newVideoItems = [...videoItems]\r\n    if (newVideoItems[index]) {\r\n      if (lang === 'ko') {\r\n        newVideoItems[index].description = description\r\n      } else if (lang === 'en') {\r\n        newVideoItems[index].descriptionEn = description\r\n      } else if (lang === 'ja') {\r\n        newVideoItems[index].descriptionJa = description\r\n      }\r\n      setVideoItems(newVideoItems)\r\n    }\r\n  }\r\n\r\n  // Prepare data for submission\r\n  const prepareDataForSubmit = (): any => {\r\n    // Extract video data\r\n    const videos = videoItems.map(item => item.url).filter(url => url.trim().length > 0)\r\n    const videoDescriptions = videoItems.map(item => item.description)\r\n    const videoDescriptionsEn = videoItems.map(item => item.descriptionEn)\r\n    const videoDescriptionsJa = videoItems.map(item => item.descriptionJa)\r\n    \r\n    // Validate video descriptions length\r\n    for (let i = 0; i < videoItems.length; i++) {\r\n      const item = videoItems[i]\r\n      if (!item) continue\r\n      if (item.description && item.description.length > 5000) {\r\n        throw new Error(`영상 ${i + 1}의 한국어 설명이 너무 깁니다 (현재: ${item.description.length}자, 최대: 5000자)`)\r\n      }\r\n      if (item.descriptionEn && item.descriptionEn.length > 5000) {\r\n        throw new Error(`영상 ${i + 1}의 영어 설명이 너무 깁니다 (현재: ${item.descriptionEn.length}자, 최대: 5000자)`)\r\n      }\r\n      if (item.descriptionJa && item.descriptionJa.length > 5000) {\r\n        throw new Error(`영상 ${i + 1}의 일본어 설명이 너무 깁니다 (현재: ${item.descriptionJa.length}자, 최대: 5000자)`)\r\n      }\r\n    }\r\n    \r\n    // Process all array fields\r\n    const processedData = {\r\n      ...formData,\r\n      // Technologies\r\n      technologies: typeof formData.technologies === 'string' \r\n        ? formData.technologies.split(/[,\\n]/).map((s: string) => s.trim()).filter((s: string) => s.length > 0)\r\n        : formData.technologies || [],\r\n      technologiesEn: typeof formData.technologiesEn === 'string'\r\n        ? formData.technologiesEn.split(/[,\\n]/).map((s: string) => s.trim()).filter((s: string) => s.length > 0)\r\n        : formData.technologiesEn || [],\r\n      technologiesJa: typeof formData.technologiesJa === 'string'\r\n        ? formData.technologiesJa.split(/[,\\n]/).map((s: string) => s.trim()).filter((s: string) => s.length > 0)\r\n        : formData.technologiesJa || [],\r\n      // Images\r\n      images: typeof formData.images === 'string' \r\n        ? formData.images.split('\\n').map((s: string) => s.trim()).filter((s: string) => s.length > 0)\r\n        : formData.images || [],\r\n      // Videos\r\n      videos,\r\n      videoDescriptions,\r\n      videoDescriptionsEn,\r\n      videoDescriptionsJa,\r\n      // Features\r\n      features: typeof formData.features === 'string' \r\n        ? formData.features.split('\\n').map((s: string) => s.trim()).filter((s: string) => s.length > 0)\r\n        : formData.features || [],\r\n      featuresEn: typeof formData.featuresEn === 'string'\r\n        ? formData.featuresEn.split('\\n').map((s: string) => s.trim()).filter((s: string) => s.length > 0)\r\n        : formData.featuresEn || [],\r\n      featuresJa: typeof formData.featuresJa === 'string'\r\n        ? formData.featuresJa.split('\\n').map((s: string) => s.trim()).filter((s: string) => s.length > 0)\r\n        : formData.featuresJa || [],\r\n      // Learnings\r\n      learnings: typeof formData.learnings === 'string' \r\n        ? formData.learnings.split('\\n').map((s: string) => s.trim()).filter((s: string) => s.length > 0)\r\n        : formData.learnings || [],\r\n      learningsEn: typeof formData.learningsEn === 'string'\r\n        ? formData.learningsEn.split('\\n').map((s: string) => s.trim()).filter((s: string) => s.length > 0)\r\n        : formData.learningsEn || [],\r\n      learningsJa: typeof formData.learningsJa === 'string'\r\n        ? formData.learningsJa.split('\\n').map((s: string) => s.trim()).filter((s: string) => s.length > 0)\r\n        : formData.learningsJa || [],\r\n      // SkillIds (already array)\r\n      skillIds: formData.skillIds || []\r\n    }\r\n    \r\n    return processedData\r\n  }\r\n\r\n  return {\r\n    formData,\r\n    videoItems,\r\n    currentLang,\r\n    setCurrentLang,\r\n    setFormData,\r\n    setVideoItems,\r\n    handleFieldChange,\r\n    handleArrayFieldChange,\r\n    handleVideoUrlChange,\r\n    handleVideoDescriptionChange,\r\n    handleAddVideo,\r\n    handleRemoveVideo,\r\n    prepareDataForSubmit\r\n  }\r\n}\r\n\r\n","import { useState, useEffect, useCallback } from 'react'\r\nimport { projectsAPI } from '../services/api'\r\nimport { Project } from '../types'\r\n\r\nexport const useProjectManagerData = () => {\r\n  const [projects, setProjects] = useState<Project[]>([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  // Project 데이터만 가져오는 함수\r\n  const fetchProjects = useCallback(async () => {\r\n    setIsLoading(true)\r\n    try {\r\n      console.log('📥 프로젝트 목록 가져오기...')\r\n      const response = await projectsAPI.getAll()\r\n      const projectsData = response.data.data || []\r\n      console.log(`✅ ${projectsData.length}개 프로젝트 로드됨`)\r\n      console.log('📊 프로젝트 데이터:', projectsData)\r\n      setProjects(projectsData)\r\n    } catch (error) {\r\n      console.error('❌ Project 데이터 로드 실패:', error)\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }, [])\r\n\r\n  // Project 생성\r\n  const createProject = useCallback(async (projectData: any) => {\r\n    try {\r\n      console.log('➕ 프로젝트 생성 API 호출:', projectData)\r\n      const response = await projectsAPI.create(projectData)\r\n      console.log('✅ 서버 응답:', response.data)\r\n      console.log('🔄 프로젝트 목록 새로고침 시작...')\r\n      await fetchProjects() // 새로고침\r\n      console.log('✅ 프로젝트 목록 새로고침 완료')\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('❌ Project 생성 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }, [fetchProjects])\r\n\r\n  // Project 수정\r\n  const updateProject = useCallback(async (id: string, projectData: any) => {\r\n    try {\r\n      console.log('🔄 프로젝트 수정 API 호출:', { id, projectData })\r\n      const response = await projectsAPI.update(id, projectData)\r\n      console.log('✅ 서버 응답:', response.data)\r\n      console.log('🔄 프로젝트 목록 새로고침 시작...')\r\n      await fetchProjects() // 새로고침\r\n      console.log('✅ 프로젝트 목록 새로고침 완료')\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('❌ Project 수정 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }, [fetchProjects])\r\n\r\n  // Project 삭제\r\n  const deleteProject = useCallback(async (id: string) => {\r\n    try {\r\n      await projectsAPI.delete(id)\r\n      await fetchProjects() // 새로고침\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('Project 삭제 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }, [fetchProjects])\r\n\r\n  useEffect(() => {\r\n    fetchProjects()\r\n  }, [])\r\n\r\n  return {\r\n    projects,\r\n    isLoading,\r\n    fetchProjects,\r\n    createProject,\r\n    updateProject,\r\n    deleteProject\r\n  }\r\n}\r\n","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { messagesAPI } from '../services/api'\r\nimport { ContactMessage } from '../types'\r\n\r\n// 💡 메시지 관련 쿼리 키 상수 - 모든 메시지 데이터 캐시의 기준점\r\nexport const MESSAGE_QUERY_KEY = 'adminMessages'\r\n\r\n// 🌟 메시지 목록 조회 (React Query)\r\nexport const useMessages = () => {\r\n  return useQuery<ContactMessage[], Error>({\r\n    queryKey: [MESSAGE_QUERY_KEY, 'list'],\r\n    queryFn: async () => {\r\n      const response = await messagesAPI.getAll()\r\n      return response.data.data || response.data || []\r\n    },\r\n    staleTime: 2 * 60 * 1000, // 2분 동안 캐시 유지\r\n    gcTime: 5 * 60 * 1000, // 5분 후 가비지 컬렉션\r\n  })\r\n}\r\n\r\n// 🌟 메시지 읽음 처리 (React Query Mutation)\r\nexport const useMarkMessageAsRead = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<void, Error, string>({\r\n    mutationFn: async (id: string) => {\r\n      await messagesAPI.markAsRead(id)\r\n    },\r\n    onSuccess: () => {\r\n      // 💡 핵심: 메시지 관련 모든 쿼리 무효화 → 자동으로 다시 fetch\r\n      queryClient.invalidateQueries({ queryKey: [MESSAGE_QUERY_KEY] })\r\n      // 💡 데이터 카운트도 무효화하여 메시지 개수 업데이트\r\n      queryClient.invalidateQueries({ queryKey: ['dataCounts'] })\r\n    },\r\n  })\r\n}\r\n\r\n// 🌟 메시지 삭제 (React Query Mutation)\r\nexport const useDeleteMessage = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<void, Error, string>({\r\n    mutationFn: async (id: string) => {\r\n      await messagesAPI.delete(id)\r\n    },\r\n    onSuccess: () => {\r\n      // 💡 핵심: 메시지 관련 모든 쿼리 무효화 → 자동으로 다시 fetch\r\n      queryClient.invalidateQueries({ queryKey: [MESSAGE_QUERY_KEY] })\r\n      // 💡 데이터 카운트도 무효화하여 메시지 개수 업데이트\r\n      queryClient.invalidateQueries({ queryKey: ['dataCounts'] })\r\n    },\r\n  })\r\n}\r\n\r\n// 🌟 일괄 읽음 처리 (React Query Mutation)\r\nexport const useBulkMarkAsRead = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<void, Error, string[]>({\r\n    mutationFn: (ids: string[]) => Promise.all(ids.map(id => messagesAPI.markAsRead(id))).then(() => undefined),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: [MESSAGE_QUERY_KEY] })\r\n      // 💡 데이터 카운트도 무효화하여 메시지 개수 업데이트\r\n      queryClient.invalidateQueries({ queryKey: ['dataCounts'] })\r\n    },\r\n  })\r\n}\r\n\r\n// 🌟 일괄 삭제 (React Query Mutation)\r\nexport const useBulkDeleteMessages = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<void, Error, string[]>({\r\n    mutationFn: (ids: string[]) => Promise.all(ids.map(id => messagesAPI.delete(id))).then(() => undefined),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: [MESSAGE_QUERY_KEY] })\r\n      // 💡 데이터 카운트도 무효화하여 메시지 개수 업데이트\r\n      queryClient.invalidateQueries({ queryKey: ['dataCounts'] })\r\n    },\r\n  })\r\n}\r\n\r\n// 🔄 기존 훅 호환성 유지 (기존 컴포넌트가 바로 사용할 수 있도록)\r\nexport const useMessageManagerData = () => {\r\n  const { data: messages = [], isLoading } = useMessages()\r\n  const markAsReadMutation = useMarkMessageAsRead()\r\n  const deleteMessageMutation = useDeleteMessage()\r\n  const bulkMarkAsReadMutation = useBulkMarkAsRead()\r\n  const bulkDeleteMutation = useBulkDeleteMessages()\r\n\r\n  const markAsRead = async (id: string) => {\r\n    try {\r\n      await markAsReadMutation.mutateAsync(id)\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('Message 읽음 처리 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  const deleteMessage = async (id: string) => {\r\n    try {\r\n      await deleteMessageMutation.mutateAsync(id)\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('Message 삭제 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  const bulkMarkAsRead = async (ids: string[]) => {\r\n    try {\r\n      await bulkMarkAsReadMutation.mutateAsync(ids)\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('Message 일괄 읽음 처리 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  const bulkDelete = async (ids: string[]) => {\r\n    try {\r\n      await bulkDeleteMutation.mutateAsync(ids)\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('Message 일괄 삭제 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  return {\r\n    messages,\r\n    isLoading,\r\n    fetchMessages: () => {}, // 더 이상 필요 없지만 호환성 유지\r\n    markAsRead,\r\n    deleteMessage,\r\n    bulkMarkAsRead,\r\n    bulkDelete\r\n  }\r\n}\r\n","import { useQuery } from '@tanstack/react-query'\r\nimport { messagesAPI } from '../services/api'\r\nimport { ContactMessage } from '../types'\r\nimport { MESSAGE_QUERY_KEY } from './useMessageManagerData'\r\n\r\ninterface UseMessageDetailOptions {\r\n  enabled?: boolean\r\n  staleTime?: number\r\n}\r\n\r\nexport function useMessageDetail(\r\n  messageId: string | undefined,\r\n  options: UseMessageDetailOptions = {}\r\n) {\r\n  const { enabled = true, staleTime = 5 * 60 * 1000 } = options\r\n\r\n  return useQuery({\r\n    queryKey: [MESSAGE_QUERY_KEY, 'detail', messageId], // 💡 통일된 쿼리 키 사용\r\n    queryFn: async () => {\r\n      if (!messageId) return null\r\n      const response = await messagesAPI.getById(messageId)\r\n      return response.data.data\r\n    },\r\n    enabled: !!messageId && enabled,\r\n    staleTime, // 5분 동안 캐시된 데이터 사용\r\n    gcTime: 10 * 60 * 1000, // 10분 후 가비지 컬렉션\r\n    retry: 2, // 실패 시 2번 재시도\r\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000), // 지수 백오프\r\n    refetchOnWindowFocus: false, // 창 포커스 시 자동 리페치 비활성화\r\n    select: (data): ContactMessage | null => {\r\n      // 데이터 변환 로직 (필요시)\r\n      return data || null\r\n    }\r\n  })\r\n}\r\n\r\n// 메시지 목록과 상세 정보를 함께 관리하는 복합 훅\r\nexport function useMessageWithDetail(messageId: string | undefined) {\r\n  const messageDetailQuery = useMessageDetail(messageId)\r\n  \r\n  return {\r\n    message: messageDetailQuery.data,\r\n    isLoading: messageDetailQuery.isLoading,\r\n    isError: messageDetailQuery.isError,\r\n    error: messageDetailQuery.error,\r\n    refetch: messageDetailQuery.refetch,\r\n    isFetching: messageDetailQuery.isFetching,\r\n    isStale: messageDetailQuery.isStale\r\n  }\r\n}\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { skillsAPI } from '@/services/api'\r\nimport { SkillCategory, SkillFormData, SkillCategoryFormData } from '@/types'\r\n\r\n// useSkills.ts와 동일한 캐시 키\r\nconst SKILLS_QUERY_KEY = ['skillCategories']\r\n\r\n// =================================================================\r\n// 🌟 1. 스킬 업데이트 (핵심 문제 해결)\r\n// =================================================================\r\n\r\nexport const useUpdateSkillMutation = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<any, Error, { id: string; data: SkillFormData }>({\r\n    mutationFn: async ({ id, data }) => {\r\n      // 서버에 저장\r\n      const response = await skillsAPI.update(id, data)\r\n      return response.data?.data || response.data\r\n    },\r\n    \r\n    // 🚀 낙관적 업데이트\r\n    onMutate: async ({ id, data }) => {\r\n      // 1. 진행 중인 쿼리 취소 (경쟁 조건 방지)\r\n      await queryClient.cancelQueries({ queryKey: SKILLS_QUERY_KEY })\r\n      \r\n      // 2. 이전 캐시 백업 (롤백용)\r\n      const previousCategories = queryClient.getQueryData<SkillCategory[]>(SKILLS_QUERY_KEY)\r\n\r\n      // 3. 캐시를 낙관적으로 업데이트\r\n      queryClient.setQueryData<SkillCategory[]>(SKILLS_QUERY_KEY, (oldCategories) => {\r\n        if (!oldCategories) return previousCategories\r\n        return oldCategories.map(category => ({\r\n          ...category,\r\n          skills: category.skills?.map(skill => \r\n            skill._id === id \r\n              ? { ...skill, ...data, updatedAt: new Date().toISOString() } // 🌟 병합\r\n              : skill\r\n          ) || []\r\n        }))\r\n      })\r\n      \r\n      // 4. 롤백에 사용할 Context 반환\r\n      return { previousCategories }\r\n    },\r\n\r\n    // ✅ 에러 시 롤백\r\n    onError: (err, variables, context: any) => {\r\n      console.error(\"❌ 스킬 업데이트 실패 - 롤백 실행:\", err)\r\n      if (context?.previousCategories) {\r\n        queryClient.setQueryData(SKILLS_QUERY_KEY, context.previousCategories)\r\n      }\r\n    },\r\n\r\n    // 🌟 onSettled 제거: 슬라이더 드래그 중 invalidateQueries 호출 방지\r\n    // 낙관적 업데이트만으로도 충분하며, 페이지 새로고침 시에만 서버 데이터 동기화\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 🌟 2. 스킬 카테고리 생성\r\n// =================================================================\r\n\r\nexport const useCreateSkillCategoryMutation = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<any, Error, SkillCategoryFormData>({\r\n    mutationFn: async (data) => {\r\n      const response = await skillsAPI.createCategory(data)\r\n      return response.data?.data || response.data\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: SKILLS_QUERY_KEY })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 🌟 3. 스킬 카테고리 수정\r\n// =================================================================\r\n\r\nexport const useUpdateSkillCategoryMutation = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<any, Error, { id: string; data: SkillCategoryFormData }>({\r\n    mutationFn: async ({ id, data }) => {\r\n      const response = await skillsAPI.updateCategory(id, data)\r\n      return response.data?.data || response.data\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: SKILLS_QUERY_KEY })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 🌟 4. 스킬 카테고리 삭제\r\n// =================================================================\r\n\r\nexport const useDeleteSkillCategoryMutation = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<any, Error, string>({\r\n    mutationFn: async (id) => {\r\n      await skillsAPI.deleteCategory(id)\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: SKILLS_QUERY_KEY })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 🌟 5. 스킬 생성\r\n// =================================================================\r\n\r\nexport const useCreateSkillMutation = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<any, Error, { categoryId: string; data: SkillFormData }>({\r\n    mutationFn: async ({ categoryId, data }) => {\r\n      const response = await skillsAPI.create(categoryId, data)\r\n      return response.data?.data || response.data\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: SKILLS_QUERY_KEY })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 🌟 6. 스킬 삭제\r\n// =================================================================\r\n\r\nexport const useDeleteSkillMutation = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<any, Error, string>({\r\n    mutationFn: async (id) => {\r\n      await skillsAPI.delete(id)\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: SKILLS_QUERY_KEY })\r\n    },\r\n  })\r\n}\r\n\r\n","import { useSkills } from './useSkills'\r\nimport { SkillFormData, SkillCategoryFormData } from '../types'\r\nimport { \r\n  useUpdateSkillMutation,\r\n  useCreateSkillCategoryMutation,\r\n  useUpdateSkillCategoryMutation,\r\n  useDeleteSkillCategoryMutation,\r\n  useCreateSkillMutation,\r\n  useDeleteSkillMutation\r\n} from './useSkillMutations'\r\n\r\n/**\r\n * 🌟 React Query 기반 스킬 관리 훅\r\n * \r\n * 주요 개선사항:\r\n * 1. useState → React Query Cache (단일 데이터 소스)\r\n * 2. useEffect → useQuery (자동 캐싱 및 동기화)\r\n * 3. 낙관적 업데이트로 즉각적인 UI 반응\r\n * 4. 에러 시 자동 롤백\r\n */\r\nexport const useSkillsManagerData = () => {\r\n  // 🌟 1. 데이터 조회: useSkills 훅에서 글로벌 캐시 데이터 가져오기\r\n  const { \r\n    skillCategories, \r\n    loading: isLoading, \r\n    refetch: fetchSkillCategories \r\n  } = useSkills()\r\n\r\n  // 🌟 2. 뮤테이션 훅 초기화\r\n  const updateSkillMutation = useUpdateSkillMutation()\r\n  const createCategoryMutation = useCreateSkillCategoryMutation()\r\n  const updateCategoryMutation = useUpdateSkillCategoryMutation()\r\n  const deleteCategoryMutation = useDeleteSkillCategoryMutation()\r\n  const createSkillMutation = useCreateSkillMutation()\r\n  const deleteSkillMutation = useDeleteSkillMutation()\r\n\r\n  // 🌟 3. updateSkill 함수를 useMutation으로 대체\r\n  const updateSkill = async (id: string, data: SkillFormData) => {\r\n    try {\r\n      const result = await updateSkillMutation.mutateAsync({ id, data })\r\n      return { success: true, data: result }\r\n    } catch (error) {\r\n      console.error('스킬 수정 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  // 🌟 4. 기타 CRUD 함수를 useMutation으로 대체\r\n  const createSkillCategory = async (data: SkillCategoryFormData) => {\r\n    try {\r\n      const result = await createCategoryMutation.mutateAsync(data)\r\n      return { success: true, data: result }\r\n    } catch (error) {\r\n      console.error('스킬 카테고리 생성 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  const updateSkillCategory = async (id: string, data: SkillCategoryFormData) => {\r\n    try {\r\n      const result = await updateCategoryMutation.mutateAsync({ id, data })\r\n      return { success: true, data: result }\r\n    } catch (error) {\r\n      console.error('스킬 카테고리 수정 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  const deleteSkillCategory = async (id: string) => {\r\n    try {\r\n      await deleteCategoryMutation.mutateAsync(id)\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('스킬 카테고리 삭제 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  const createSkill = async (categoryId: string, data: SkillFormData) => {\r\n    try {\r\n      const result = await createSkillMutation.mutateAsync({ categoryId, data })\r\n      return { success: true, data: result }\r\n    } catch (error) {\r\n      console.error('스킬 생성 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  const deleteSkill = async (id: string) => {\r\n    try {\r\n      await deleteSkillMutation.mutateAsync(id)\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('스킬 삭제 실패:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  return { \r\n    skillCategories, \r\n    isLoading, \r\n    fetchSkillCategories,\r\n    createSkillCategory,\r\n    updateSkillCategory,\r\n    deleteSkillCategory,\r\n    createSkill,\r\n    updateSkill,\r\n    deleteSkill\r\n  }\r\n}\r\n","import { useQuery, useQueryClient } from '@tanstack/react-query'\r\nimport { booksAPI, videoLearningsAPI, videoPlaylistsAPI, experiencesAPI, projectsAPI, messagesAPI, skillsAPI, categoriesAPI } from '../services/api'\r\nimport { MESSAGE_QUERY_KEY } from './useMessageManagerData'\r\n\r\ninterface DataCounts {\r\n  books: number\r\n  videoLearnings: number\r\n  videoPlaylists: number\r\n  experiences: number\r\n  projects: number\r\n  messages: number\r\n  skills: number\r\n  categories: number\r\n}\r\n\r\n// 🌟 React Query를 사용한 데이터 카운트 조회\r\nexport const useDataCounts = () => {\r\n  const queryClient = useQueryClient()\r\n  \r\n  const { data: counts, isLoading } = useQuery<DataCounts, Error>({\r\n    queryKey: ['dataCounts'], // 💡 독립적인 쿼리 키\r\n    queryFn: async () => {\r\n      // 실제로는 각 API에서 데이터 개수만 반환하는 전용 엔드포인트를 호출하는 것이 효율적\r\n      // 현재는 기존 API를 사용하여 데이터를 가져온 후 length를 계산\r\n      const [booksResponse, videoLearningsResponse, videoPlaylistsResponse, experiencesResponse, projectsResponse, messagesResponse, skillsResponse, categoriesResponse] = await Promise.all([\r\n        booksAPI.getAll(),\r\n        videoLearningsAPI.getAll(),\r\n        videoPlaylistsAPI.getAll(),\r\n        experiencesAPI.getAll(),\r\n        projectsAPI.getAll(),\r\n        messagesAPI.getAll(), // 💡 메시지도 직접 조회\r\n        skillsAPI.getCategories(),\r\n        categoriesAPI.getAll()\r\n      ])\r\n      \r\n      return {\r\n        books: booksResponse.data?.data?.length || 0,\r\n        videoLearnings: videoLearningsResponse.data?.data?.length || 0,\r\n        videoPlaylists: videoPlaylistsResponse.data?.data?.length || 0,\r\n        experiences: experiencesResponse.data?.data?.length || 0,\r\n        projects: projectsResponse.data?.data?.length || 0,\r\n        messages: messagesResponse.data?.data?.length || 0, // 💡 메시지 API 응답에서 길이 계산\r\n        skills: skillsResponse.data?.data?.length || 0,\r\n        categories: categoriesResponse.data?.length || 0,\r\n      }\r\n    },\r\n    staleTime: 2 * 60 * 1000, // 2분 동안 캐시 유지\r\n    gcTime: 5 * 60 * 1000, // 5분 후 가비지 컬렉션\r\n    refetchOnWindowFocus: true, // 창 포커스 시 자동 새로고침 (데이터 동기화)\r\n  })\r\n\r\n  return { \r\n    counts: counts || {\r\n      books: 0,\r\n      videoLearnings: 0,\r\n      videoPlaylists: 0,\r\n      experiences: 0,\r\n      projects: 0,\r\n      messages: 0,\r\n      skills: 0,\r\n      categories: 0,\r\n    }, \r\n    isLoading,\r\n    refreshCounts: () => {} // 더 이상 필요 없지만 호환성 유지\r\n  }\r\n}\r\n\r\nexport default useDataCounts\r\n","import { useState } from 'react'\r\n\r\n// 탭 타입 정의\r\nexport type AdminTab = 'settings' | 'books' | 'videoLearnings' | 'videoPlaylists' | 'experiences' | 'projects' | 'messages' | 'skills' | 'categories'\r\n\r\n// 필터 타입들\r\nexport type BookFilter = 'all' | 'five-star' | 'category'\r\nexport type ExperienceFilter = 'all' | 'company' | 'year'\r\nexport type ProjectFilter = 'all' | 'category' | 'featured'\r\n\r\n// 필터 그룹 인터페이스들\r\nexport interface BookFilterGroup {\r\n  state: {\r\n    filter: BookFilter\r\n    searchTerm: string\r\n    selectedCategory: string\r\n  }\r\n  actions: {\r\n    setFilter: (filter: BookFilter) => void\r\n    setSearchTerm: (term: string) => void\r\n    setSelectedCategory: (category: string) => void\r\n  }\r\n  data: {\r\n    categories: string[]\r\n  }\r\n}\r\n\r\nexport interface ExperienceFilterGroup {\r\n  state: {\r\n    filter: ExperienceFilter\r\n    searchTerm: string\r\n    selectedCompany: string\r\n    selectedYear: string\r\n  }\r\n  actions: {\r\n    setFilter: (filter: ExperienceFilter) => void\r\n    setSearchTerm: (term: string) => void\r\n    setSelectedCompany: (company: string) => void\r\n    setSelectedYear: (year: string) => void\r\n  }\r\n  data: {\r\n    companies: string[]\r\n    years: string[]\r\n  }\r\n}\r\n\r\nexport interface ProjectFilterGroup {\r\n  state: {\r\n    filter: ProjectFilter\r\n    searchTerm: string\r\n    selectedCategory: string\r\n  }\r\n  actions: {\r\n    setFilter: (filter: ProjectFilter) => void\r\n    setSearchTerm: (term: string) => void\r\n    setSelectedCategory: (category: string) => void\r\n  }\r\n  data: {\r\n    categories: string[]\r\n  }\r\n}\r\n\r\nexport const useAdminSidebarState = () => {\r\n  // 탭 및 설정 섹션 상태\r\n  const [activeTab, setActiveTab] = useState<AdminTab>('settings')\r\n  const [activeSettingsSection, setActiveSettingsSection] = useState<string | null>(null)\r\n\r\n  // 서적 필터 상태\r\n  const [bookFilter, setBookFilter] = useState<BookFilter>('all')\r\n  const [bookSearchTerm, setBookSearchTerm] = useState('')\r\n  const [selectedBookCategory, setSelectedBookCategory] = useState('')\r\n\r\n  // 경력 필터 상태\r\n  const [experienceFilter, setExperienceFilter] = useState<ExperienceFilter>('all')\r\n  const [experienceSearchTerm, setExperienceSearchTerm] = useState('')\r\n  const [selectedExperienceCompany, setSelectedExperienceCompany] = useState('')\r\n  const [selectedExperienceYear, setSelectedExperienceYear] = useState('')\r\n\r\n  // 프로젝트 필터 상태\r\n  const [projectFilter, setProjectFilter] = useState<ProjectFilter>('all')\r\n  const [projectSearchTerm, setProjectSearchTerm] = useState('')\r\n  const [selectedProjectCategory, setSelectedProjectCategory] = useState('')\r\n\r\n  // 더미 데이터 (실제로는 API에서 가져와야 함)\r\n  const bookCategories = ['프로그래밍', '데이터베이스', '웹 개발', 'AI/ML', '시스템 설계']\r\n  const experienceCompanies = ['ABC Corp', 'XYZ Inc', 'Dev Solutions', 'Tech Startup']\r\n  const experienceYears = ['2024', '2023', '2022', '2021', '2020']\r\n  const projectCategories = ['웹 개발', '모바일 앱', '데이터 분석', '임베디드', 'AI/ML']\r\n\r\n  return {\r\n    // 탭 관련 상태와 액션\r\n    activeTab,\r\n    setActiveTab,\r\n    activeSettingsSection,\r\n    setActiveSettingsSection,\r\n\r\n    // 서적 필터 관련 상태와 액션을 하나의 객체로 묶어서 반환\r\n    bookFilters: {\r\n      state: {\r\n        filter: bookFilter,\r\n        searchTerm: bookSearchTerm,\r\n        selectedCategory: selectedBookCategory,\r\n      },\r\n      actions: {\r\n        setFilter: setBookFilter,\r\n        setSearchTerm: setBookSearchTerm,\r\n        setSelectedCategory: setSelectedBookCategory,\r\n      },\r\n      data: {\r\n        categories: bookCategories,\r\n      },\r\n    } as BookFilterGroup,\r\n\r\n    // 경력 필터 관련 상태와 액션을 하나의 객체로 묶어서 반환\r\n    experienceFilters: {\r\n      state: {\r\n        filter: experienceFilter,\r\n        searchTerm: experienceSearchTerm,\r\n        selectedCompany: selectedExperienceCompany,\r\n        selectedYear: selectedExperienceYear,\r\n      },\r\n      actions: {\r\n        setFilter: setExperienceFilter,\r\n        setSearchTerm: setExperienceSearchTerm,\r\n        setSelectedCompany: setSelectedExperienceCompany,\r\n        setSelectedYear: setSelectedExperienceYear,\r\n      },\r\n      data: {\r\n        companies: experienceCompanies,\r\n        years: experienceYears,\r\n      },\r\n    } as ExperienceFilterGroup,\r\n\r\n    // 프로젝트 필터 관련 상태와 액션을 하나의 객체로 묶어서 반환\r\n    projectFilters: {\r\n      state: {\r\n        filter: projectFilter,\r\n        searchTerm: projectSearchTerm,\r\n        selectedCategory: selectedProjectCategory,\r\n      },\r\n      actions: {\r\n        setFilter: setProjectFilter,\r\n        setSearchTerm: setProjectSearchTerm,\r\n        setSelectedCategory: setSelectedProjectCategory,\r\n      },\r\n      data: {\r\n        categories: projectCategories,\r\n      },\r\n    } as ProjectFilterGroup,\r\n  }\r\n}\r\n"],"names":["INITIAL_SETTINGS","fullName","firstName","role","subtitle","location","education","yearsOfExperience","email","phone","githubUrl","linkedinUrl","heroTitle","heroSubtitle","heroTag","heroCtaLink1","heroCtaLink2","aboutTitle","aboutSubtitle","aboutDescription1","aboutDescription2","skillsTitle","skillsSubtitle","projectsTitle","projectsSubtitle","projectsUpdateTitle","projectsUpdateDescription","projectsUpdateTechList","booksTitle","booksSubtitle","contactTitle","contactSubtitle","experienceTitle","experienceSubtitle","learningGoalsTitle","learningGoalsDescription","learningGoalsList","stat1Number","stat1Label","stat2Number","stat2Label","stat3Number","stat3Label","mainSkills","SiteSettingsContext","createContext","SiteSettingsProvider","children","settings","setSettings","useState","loading","setLoading","error","setError","fetchSettings","useCallback","async","response","settingsAPI","get","mergedSettings","data","err","useEffect","refetchSettings","value","useMemo","jsx","Provider","useSiteSettings","context","useContext","Error","SECTION_IDS","DEFAULT_OPTIONS","offset","debounceDelay","useScrollSpy","options","activeSection","setActiveSection","timeoutRef","useRef","handleScroll","activationPoint","window","scrollY","newActiveSection","sectionId","element","document","getElementById","offsetTop","debouncedHandleScroll","func","delay","timeoutId","args","clearTimeout","setTimeout","debounce","addEventListener","passive","removeEventListener","current","useSidebarSkills","coreSkills","setCoreSkills","languageSkills","setLanguageSkills","isLoadingSkills","setIsLoadingSkills","siteSettings","fetchSkills","allSkills","skillsAPI","getAll","sidebarSkills","filter","skill","showInSidebar","sort","a","b","order","slice","sidebarSkillCount","length","level","langSkills","showInLanguageCard","languageCardSkillCount","BOOK_QUERY_KEY","useBooks","useQuery","queryKey","queryFn","booksAPI","staleTime","gcTime","useBook","bookId","getById","enabled","useDeleteBook","queryClient","useQueryClient","useMutation","mutationFn","id","delete","onSuccess","invalidateQueries","CATEGORIES_QUERY_KEY","useCategories","categoriesAPI","useCategoryUsage","getUsage","useCategoryManagerData","categories","isLoading","createMutation","create","useCreateCategory","updateMutation","update","useUpdateCategory","deleteMutation","useDeleteCategory","createCategory","mutateAsync","success","updateCategory","deleteCategory","useLearningManager","editingLearningId","setEditingLearningId","editingChapterId","setEditingChapterId","currentFormData","setCurrentFormData","topic","content","showAddForm","setShowAddForm","apiError","setApiError","learningsAPI","createForBook","useCreateLearning","learningId","updateForBook","useUpdateLearning","deleteForBook","useDeleteLearning","updateSkillsMutation","skillIds","updateSkills","useUpdateLearningSkills","isSaving","isPending","resetFormState","handleCancelEdit","learningApiError","handleToggleAddForm","prev","handleAddLearning","handleDeleteLearning","chapterId","confirm","deleteForChapter","handleStartEdit","learning","_id","handleSaveEdit","updateForChapter","handleSkillLinkChange","skillId","isLinked","chaptersQueryKey","previousBook","getQueryData","previousChapters","newSkillIds","currentLearning","flatMap","c","learnings","find","l","currentSkillIds","Array","from","Set","setQueryData","oldChapters","map","chapter","oldBook","chapters","fetchSkillCategories","getCategories","_a","useSkills","skillCategories","refetch","VIDEO_LEARNING_QUERY_KEY","useVideoLearnings","videoLearningsAPI","useVideoLearning","useUpdateVideoLearning","_","variables","useDeleteVideoLearning","useVideoLearningManagerData","videoLearnings","isError","useCreateVideoLearning","createVideoLearning","updateVideoLearning","deleteVideoLearning","useVideoPlaylists","videoPlaylistsAPI","useVideoPlaylist","usePlaylistVideos","playlistId","playlistVideosAPI","getByPlaylist","useDeleteVideoPlaylist","useCreatePlaylistVideo","useUpdatePlaylistVideo","_b","useDeletePlaylistVideo","useVideoPlaylistManagerData","playlists","useCreateVideoPlaylist","useUpdateVideoPlaylist","createPlaylist","updatePlaylist","deletePlaylist","useToastHelpers","showToast","rest","toasts","setToasts","toast","Math","random","toString","substr","newToast","duration","hideToast","clearAllToasts","useToast","title","message","type","warning","info","fetchProjects","projectsAPI","useProjects","projects","useProjectDetail","currentLang","project","setProject","localizedProject","getLocalizedField","titleEn","titleJa","description","descriptionEn","descriptionJa","detailedDescription","detailedDescriptionEn","detailedDescriptionJa","technologies","getLocalizedArrayField","technologiesEn","technologiesJa","features","featuresEn","featuresJa","learningsEn","learningsJa","videoDescriptions","videoDescriptionsEn","videoDescriptionsJa","linkedSkills","category","skills","skillIdSet","has","name","getLocalizedSkillName","getLocalizedSkillDescription","levelText","fetchExperiences","createdAt","Date","getTime","transformExperiences","experiencesAPI","useExperiences","experiences","useAbortController","abortControllerRef","createAbortController","abort","AbortController","getAbortController","signal","useOptimisticArrayUpdate","initialData","isOptimistic","optimisticUpdate","updateData","resetData","setData","setIsOptimistic","previousDataRef","onError","onRollback","optimisticData","apiCall","result","newData","useOptimisticUpdate","optimisticAdd","newItem","now","item","startsWith","optimisticUpdateItem","updates","optimisticDelete","optimisticReorder","reorderedItems","useBookManagerData","setIsLoading","showError","books","fetchBooks","abortController","aborted","includes","errorMessage","createBook","bookData","newBook","toISOString","updatedAt","then","res","updateBook","deleteBook","useCRUDManager","onSave","onDelete","showForm","setShowForm","editingItem","setEditingItem","setIsSaving","isDeleting","setIsDeleting","handleCreate","handleEdit","handleCancel","handleSave","handleDelete","useExperienceManagerData","setExperiences","createExperience","experienceData","updateExperience","deleteExperience","useProjectForm","setCurrentLang","initialCategoryIds","categoryIds","catIdOrObj","Boolean","initialSkillIds","skillIdOrObj","videoItems","setVideoItems","videos","isArray","url","index","_c","formData","setFormData","join","images","status","githubLink","liveLink","image","handleFieldChange","key","handleArrayFieldChange","handleVideoUrlChange","newVideoItems","handleVideoDescriptionChange","lang","handleAddVideo","handleRemoveVideo","i","prepareDataForSubmit","trim","split","s","useProjectManagerData","setProjects","projectsData","createProject","projectData","updateProject","deleteProject","MESSAGE_QUERY_KEY","useMessages","messagesAPI","useMessageManagerData","messages","markAsReadMutation","markAsRead","useMarkMessageAsRead","deleteMessageMutation","useDeleteMessage","bulkMarkAsReadMutation","ids","Promise","all","useBulkMarkAsRead","bulkDeleteMutation","useBulkDeleteMessages","fetchMessages","deleteMessage","bulkMarkAsRead","bulkDelete","useMessageDetail","messageId","retry","retryDelay","attemptIndex","min","refetchOnWindowFocus","select","SKILLS_QUERY_KEY","useSkillsManagerData","updateSkillMutation","onMutate","cancelQueries","previousCategories","oldCategories","useUpdateSkillMutation","createCategoryMutation","useCreateSkillCategoryMutation","updateCategoryMutation","useUpdateSkillCategoryMutation","deleteCategoryMutation","useDeleteSkillCategoryMutation","createSkillMutation","categoryId","useCreateSkillMutation","deleteSkillMutation","useDeleteSkillMutation","createSkillCategory","updateSkillCategory","deleteSkillCategory","createSkill","updateSkill","deleteSkill","useDataCounts","counts","booksResponse","videoLearningsResponse","videoPlaylistsResponse","experiencesResponse","projectsResponse","messagesResponse","skillsResponse","categoriesResponse","_d","videoPlaylists","_f","_e","_h","_g","_j","_i","_l","_k","_n","_m","_o","refreshCounts","useAdminSidebarState","activeTab","setActiveTab","activeSettingsSection","setActiveSettingsSection","bookFilter","setBookFilter","bookSearchTerm","setBookSearchTerm","selectedBookCategory","setSelectedBookCategory","experienceFilter","setExperienceFilter","experienceSearchTerm","setExperienceSearchTerm","selectedExperienceCompany","setSelectedExperienceCompany","selectedExperienceYear","setSelectedExperienceYear","projectFilter","setProjectFilter","projectSearchTerm","setProjectSearchTerm","selectedProjectCategory","setSelectedProjectCategory","bookFilters","state","searchTerm","selectedCategory","actions","setFilter","setSearchTerm","setSelectedCategory","experienceFilters","selectedCompany","selectedYear","setSelectedCompany","setSelectedYear","companies","years","projectFilters"],"mappings":"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"}