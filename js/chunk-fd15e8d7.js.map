{"version":3,"file":"chunk-fd15e8d7.js","sources":["../../src/hooks/useBooks.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { booksAPI } from '../services/api'\r\nimport { Book, BookFormData, BookUpdateData } from '../types'\r\n\r\n// üí° ÏÑúÏ†Å Í¥ÄÎ†® ÏøºÎ¶¨ ÌÇ§ ÏÉÅÏàò - Î™®Îì† ÏÑúÏ†Å Îç∞Ïù¥ÌÑ∞ Ï∫êÏãúÏùò Í∏∞Ï§ÄÏ†ê\r\nexport const BOOK_QUERY_KEY = 'books'\r\n\r\n// =================================================================\r\n// üìö ÏÑúÏ†Å Î™©Î°ù Ï°∞Ìöå (React Query)\r\n// =================================================================\r\n\r\nexport const useBooks = () => {\r\n  return useQuery<Book[], Error>({\r\n    queryKey: [BOOK_QUERY_KEY, 'list'],\r\n    queryFn: async () => {\r\n      const response = await booksAPI.getAll()\r\n      return response.data.data || response.data || []\r\n    },\r\n    staleTime: 5 * 60 * 1000, // 5Î∂Ñ ÎèôÏïà Ï∫êÏãú Ïú†ÏßÄ\r\n    gcTime: 10 * 60 * 1000, // 10Î∂Ñ ÌõÑ Í∞ÄÎπÑÏßÄ Ïª¨Î†âÏÖò\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// üìñ Í∞úÎ≥Ñ ÏÑúÏ†Å ÏÉÅÏÑ∏ Ï°∞Ìöå (React Query)\r\n// =================================================================\r\n\r\nexport const useBook = (bookId: string | undefined) => {\r\n  return useQuery<Book, Error>({\r\n    queryKey: [BOOK_QUERY_KEY, 'detail', bookId],\r\n    queryFn: async () => {\r\n      if (!bookId) throw new Error('Book ID is required')\r\n      const response = await booksAPI.getById(bookId)\r\n      return response.data\r\n    },\r\n    enabled: !!bookId, // bookIdÍ∞Ä ÏûàÏùÑ ÎïåÎßå Ïã§Ìñâ\r\n    staleTime: 5 * 60 * 1000,\r\n    gcTime: 10 * 60 * 1000,\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// ‚úèÔ∏è ÏÑúÏ†Å ÏÉùÏÑ± (React Query Mutation)\r\n// =================================================================\r\n\r\nexport const useCreateBook = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<Book, Error, BookFormData>({\r\n    mutationFn: async (bookData: BookFormData) => {\r\n      const response = await booksAPI.create(bookData)\r\n      return response.data\r\n    },\r\n    onSuccess: () => {\r\n      // üí° ÏÑúÏ†Å Î™©Î°ù Ï∫êÏãú Î¨¥Ìö®Ìôî ‚Üí ÏûêÎèôÏúºÎ°ú Îã§Ïãú fetch\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\r\n      // üí° Îç∞Ïù¥ÌÑ∞ Ïπ¥Ïö¥Ìä∏ÎèÑ Î¨¥Ìö®ÌôîÌïòÏó¨ ÏÑúÏ†Å Í∞úÏàò ÏóÖÎç∞Ïù¥Ìä∏\r\n      queryClient.invalidateQueries({ queryKey: ['dataCounts'] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// üîÑ ÏÑúÏ†Å ÏàòÏ†ï (React Query Mutation)\r\n// =================================================================\r\n\r\nexport const useUpdateBook = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<Book, Error, { id: string; data: BookUpdateData }>({\r\n    mutationFn: async ({ id, data }) => {\r\n      const response = await booksAPI.update(id, data)\r\n      return response.data\r\n    },\r\n    onSuccess: (_, variables) => {\r\n      // üí° ÏÑúÏ†Å Î™©Î°ù Ï∫êÏãú Î¨¥Ìö®Ìôî\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\r\n      // üí° Ìï¥Îãπ ÏÑúÏ†Å ÏÉÅÏÑ∏ Ï∫êÏãúÎèÑ Î¨¥Ìö®Ìôî\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', variables.id] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// üóëÔ∏è ÏÑúÏ†Å ÏÇ≠Ï†ú (React Query Mutation)\r\n// =================================================================\r\n\r\nexport const useDeleteBook = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<void, Error, string>({\r\n    mutationFn: async (id: string) => {\r\n      await booksAPI.delete(id)\r\n    },\r\n    onSuccess: () => {\r\n      // üí° ÏÑúÏ†Å Î™©Î°ù Ï∫êÏãú Î¨¥Ìö®Ìôî\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\r\n      // üí° Îç∞Ïù¥ÌÑ∞ Ïπ¥Ïö¥Ìä∏ÎèÑ Î¨¥Ìö®ÌôîÌïòÏó¨ ÏÑúÏ†Å Í∞úÏàò ÏóÖÎç∞Ïù¥Ìä∏\r\n      queryClient.invalidateQueries({ queryKey: ['dataCounts'] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// üîÑ Í∏∞Ï°¥ ÌõÖ Ìò∏ÌôòÏÑ± Ïú†ÏßÄ (Í∏∞Ï°¥ Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Î∞îÎ°ú ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎèÑÎ°ù)\r\n// =================================================================\r\n\r\nexport const useBookManagerData = () => {\r\n  const { data: books = [], isLoading, isError, error, refetch } = useBooks()\r\n  const createMutation = useCreateBook()\r\n  const updateMutation = useUpdateBook()\r\n  const deleteMutation = useDeleteBook()\r\n\r\n  const createBook = async (bookData: BookFormData) => {\r\n    try {\r\n      const result = await createMutation.mutateAsync(bookData)\r\n      return { success: true, data: result }\r\n    } catch (error) {\r\n      console.error('ÏÑúÏ†Å Ï∂îÍ∞Ä Ïã§Ìå®:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  const updateBook = async (id: string, bookData: BookUpdateData) => {\r\n    try {\r\n      const result = await updateMutation.mutateAsync({ id, data: bookData })\r\n      return { success: true, data: result }\r\n    } catch (error) {\r\n      console.error('ÏÑúÏ†Å ÏàòÏ†ï Ïã§Ìå®:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  const deleteBook = async (id: string) => {\r\n    try {\r\n      await deleteMutation.mutateAsync(id)\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('ÏÑúÏ†Å ÏÇ≠Ï†ú Ïã§Ìå®:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  return {\r\n    books,\r\n    isLoading,\r\n    error: isError ? (error?.message || 'ÏÑúÏ†ÅÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.') : null,\r\n    isOptimistic: false, // React QueryÎäî ÏûêÏ≤¥Ï†ÅÏúºÎ°ú ÎÇôÍ¥ÄÏ†Å ÏóÖÎç∞Ïù¥Ìä∏ ÏßÄÏõê\r\n    createBook,\r\n    updateBook,\r\n    deleteBook,\r\n    refetch,\r\n  }\r\n}\r\n\r\nexport default useBooks\r\n"],"names":["BOOK_QUERY_KEY","useBooks","useQuery","queryKey","queryFn","async","response","booksAPI","getAll","data","staleTime","gcTime","useBook","bookId","Error","getById","enabled","useDeleteBook","queryClient","useQueryClient","useMutation","mutationFn","id","delete","onSuccess","invalidateQueries"],"mappings":"+FAKO,MAAMA,EAAiB,QAMjBC,EAAW,IACfC,EAAwB,CAC7BC,SAAU,CAACH,EAAgB,QAC3BI,QAASC,UACD,MAAAC,QAAiBC,EAASC,SAChC,OAAOF,EAASG,KAAKA,MAAQH,EAASG,MAAQ,IAEhDC,UAAW,IACXC,OAAQ,MAQCC,EAAWC,GACfX,EAAsB,CAC3BC,SAAU,CAACH,EAAgB,SAAUa,GACrCT,QAASC,UACP,IAAKQ,EAAc,MAAA,IAAIC,MAAM,uBAE7B,aADuBP,EAASQ,QAAQF,IACxBJ,MAElBO,UAAWH,EACXH,UAAW,IACXC,OAAQ,MAkDCM,EAAgB,KAC3B,MAAMC,EAAcC,IAEpB,OAAOC,EAAiC,CACtCC,WAAYhB,MAAOiB,UACXf,EAASgB,OAAOD,IAExBE,UAAW,KAETN,EAAYO,kBAAkB,CAAEtB,SAAU,CAACH,EAAgB,UAE3DkB,EAAYO,kBAAkB,CAAEtB,SAAU,CAAC"}