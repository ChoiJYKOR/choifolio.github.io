{"version":3,"file":"chunk-abc135ce.js","sources":["../../src/utils/dateUtils.ts"],"sourcesContent":["/**\r\n * 날짜 관련 유틸리티 함수들\r\n */\r\n\r\n/**\r\n * 날짜 문자열을 한국어 형식으로 포맷팅\r\n * @param dateString - 포맷팅할 날짜 문자열\r\n * @returns 한국어 형식의 날짜 문자열 (예: \"2024. 1. 15.\")\r\n */\r\nexport const formatDate = (dateString: string): string => {\r\n  try {\r\n    const date = new Date(dateString)\r\n    return date.toLocaleDateString('ko-KR')\r\n  } catch (error) {\r\n    console.error('날짜 포맷팅 오류:', error)\r\n    return '날짜 정보 없음'\r\n  }\r\n}\r\n\r\n/**\r\n * 날짜 문자열을 상대적 시간으로 포맷팅 (예: \"3분 전\", \"2시간 전\", \"3일 전\")\r\n * @param dateString - 포맷팅할 날짜 문자열\r\n * @returns 상대적 시간 문자열\r\n */\r\nexport const formatRelativeDate = (dateString: string): string => {\r\n  try {\r\n    const date = new Date(dateString)\r\n    const now = new Date()\r\n    const diffInMs = now.getTime() - date.getTime()\r\n    \r\n    // 음수인 경우 미래 날짜 (방금 전으로 처리)\r\n    if (diffInMs < 0) return '방금 전'\r\n    \r\n    // 분 단위 계산\r\n    const diffInMinutes = Math.floor(diffInMs / (1000 * 60))\r\n    if (diffInMinutes < 1) return '방금 전'\r\n    if (diffInMinutes < 60) return `${diffInMinutes}분 전`\r\n    \r\n    // 시간 단위 계산\r\n    const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60))\r\n    if (diffInHours < 24) return `${diffInHours}시간 전`\r\n    \r\n    // 일 단위 계산\r\n    const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24))\r\n    if (diffInDays === 1) return '어제'\r\n    if (diffInDays < 7) return `${diffInDays}일 전`\r\n    \r\n    // 주 단위 계산\r\n    const diffInWeeks = Math.floor(diffInDays / 7)\r\n    if (diffInWeeks < 4) return `${diffInWeeks}주 전`\r\n    \r\n    // 월 단위 계산 (30일 기준)\r\n    const diffInMonths = Math.floor(diffInDays / 30)\r\n    if (diffInMonths < 12) return `${diffInMonths}개월 전`\r\n    \r\n    // 년 단위 계산\r\n    const diffInYears = Math.floor(diffInDays / 365)\r\n    return `${diffInYears}년 전`\r\n  } catch (error) {\r\n    console.error('상대적 날짜 포맷팅 오류:', error)\r\n    return '날짜 정보 없음'\r\n  }\r\n}\r\n\r\n/**\r\n * 모던한 Intl.RelativeTimeFormat API를 사용한 상대적 시간 포맷팅\r\n * @param dateString - 포맷팅할 날짜 문자열\r\n * @param locale - 로케일 (기본값: 'ko-KR')\r\n * @returns 상대적 시간 문자열\r\n */\r\nexport const formatRelativeDateModern = (dateString: string, locale: string = 'ko-KR'): string => {\r\n  try {\r\n    const date = new Date(dateString)\r\n    const now = new Date()\r\n    const diffInSeconds = (now.getTime() - date.getTime()) / 1000\r\n    \r\n    // 음수인 경우 미래 날짜\r\n    if (diffInSeconds < 0) return '방금 전'\r\n    \r\n    const formatter = new Intl.RelativeTimeFormat(locale, { numeric: 'auto' })\r\n    \r\n    // 초 단위\r\n    if (diffInSeconds < 60) {\r\n      return '방금 전'\r\n    }\r\n    \r\n    // 분 단위\r\n    if (diffInSeconds < 3600) {\r\n      return formatter.format(Math.floor(-diffInSeconds / 60), 'minute')\r\n    }\r\n    \r\n    // 시간 단위\r\n    if (diffInSeconds < 86400) {\r\n      return formatter.format(Math.floor(-diffInSeconds / 3600), 'hour')\r\n    }\r\n    \r\n    // 일 단위\r\n    if (diffInSeconds < 2592000) { // 30일 미만\r\n      return formatter.format(Math.floor(-diffInSeconds / 86400), 'day')\r\n    }\r\n    \r\n    // 월 단위\r\n    if (diffInSeconds < 31536000) { // 365일 미만\r\n      return formatter.format(Math.floor(-diffInSeconds / 2592000), 'month')\r\n    }\r\n    \r\n    // 년 단위\r\n    return formatter.format(Math.floor(-diffInSeconds / 31536000), 'year')\r\n  } catch (error) {\r\n    console.error('모던 상대적 날짜 포맷팅 오류:', error)\r\n    return '날짜 정보 없음'\r\n  }\r\n}\r\n\r\n/**\r\n * 날짜가 유효한지 확인\r\n * @param dateString - 확인할 날짜 문자열\r\n * @returns 유효한 날짜인지 여부\r\n */\r\nexport const isValidDate = (dateString: string): boolean => {\r\n  try {\r\n    const date = new Date(dateString)\r\n    return !isNaN(date.getTime())\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * 두 날짜 사이의 차이를 계산\r\n * @param startDate - 시작 날짜 문자열\r\n * @param endDate - 종료 날짜 문자열 (기본값: 현재 시간)\r\n * @returns 차이 정보 객체\r\n */\r\nexport const getDateDifference = (\r\n  startDate: string, \r\n  endDate: string = new Date().toISOString()\r\n): {\r\n  days: number\r\n  hours: number\r\n  minutes: number\r\n  totalMs: number\r\n} => {\r\n  try {\r\n    const start = new Date(startDate)\r\n    const end = new Date(endDate)\r\n    const diffInMs = Math.abs(end.getTime() - start.getTime())\r\n    \r\n    const days = Math.floor(diffInMs / (1000 * 60 * 60 * 24))\r\n    const hours = Math.floor((diffInMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\r\n    const minutes = Math.floor((diffInMs % (1000 * 60 * 60)) / (1000 * 60))\r\n    \r\n    return {\r\n      days,\r\n      hours,\r\n      minutes,\r\n      totalMs: diffInMs\r\n    }\r\n  } catch (error) {\r\n    console.error('날짜 차이 계산 오류:', error)\r\n    return {\r\n      days: 0,\r\n      hours: 0,\r\n      minutes: 0,\r\n      totalMs: 0\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 날짜를 다양한 형식으로 포맷팅\r\n * @param dateString - 포맷팅할 날짜 문자열\r\n * @param format - 포맷 타입 ('short', 'long', 'time', 'datetime')\r\n * @returns 포맷팅된 날짜 문자열\r\n */\r\nexport const formatDateByType = (\r\n  dateString: string, \r\n  format: 'short' | 'long' | 'time' | 'datetime' = 'short'\r\n): string => {\r\n  try {\r\n    const date = new Date(dateString)\r\n    \r\n    switch (format) {\r\n      case 'short':\r\n        return date.toLocaleDateString('ko-KR', {\r\n          year: 'numeric',\r\n          month: 'numeric',\r\n          day: 'numeric'\r\n        })\r\n      case 'long':\r\n        return date.toLocaleDateString('ko-KR', {\r\n          year: 'numeric',\r\n          month: 'long',\r\n          day: 'numeric',\r\n          weekday: 'long'\r\n        })\r\n      case 'time':\r\n        return date.toLocaleTimeString('ko-KR', {\r\n          hour: '2-digit',\r\n          minute: '2-digit'\r\n        })\r\n      case 'datetime':\r\n        return date.toLocaleString('ko-KR', {\r\n          year: 'numeric',\r\n          month: 'numeric',\r\n          day: 'numeric',\r\n          hour: '2-digit',\r\n          minute: '2-digit'\r\n        })\r\n      default:\r\n        return date.toLocaleDateString('ko-KR')\r\n    }\r\n  } catch (error) {\r\n    console.error('날짜 타입별 포맷팅 오류:', error)\r\n    return '날짜 정보 없음'\r\n  }\r\n}\r\n\r\n/**\r\n * 날짜가 오늘인지 확인\r\n * @param dateString - 확인할 날짜 문자열\r\n * @returns 오늘인지 여부\r\n */\r\nexport const isToday = (dateString: string): boolean => {\r\n  try {\r\n    const date = new Date(dateString)\r\n    const today = new Date()\r\n    \r\n    return date.getDate() === today.getDate() &&\r\n           date.getMonth() === today.getMonth() &&\r\n           date.getFullYear() === today.getFullYear()\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * 날짜가 최근 N일 이내인지 확인\r\n * @param dateString - 확인할 날짜 문자열\r\n * @param days - 기준 일수 (기본값: 7)\r\n * @returns 최근 N일 이내인지 여부\r\n */\r\nexport const isRecent = (dateString: string, days: number = 7): boolean => {\r\n  try {\r\n    const date = new Date(dateString)\r\n    const now = new Date()\r\n    const diffInMs = now.getTime() - date.getTime()\r\n    const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24))\r\n    \r\n    return diffInDays <= days && diffInDays >= 0\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n"],"names":["formatDate","dateString","Date","toLocaleDateString","error","formatRelativeDate","date","diffInMs","getTime","diffInMinutes","Math","floor","diffInHours","diffInDays","diffInWeeks","diffInMonths"],"mappings":"AASa,MAAAA,EAAcC,IACrB,IAEK,OADM,IAAIC,KAAKD,GACVE,mBAAmB,eACxBC,GAEA,MAAA,UACT,GAQWC,EAAsBJ,IAC7B,IACI,MAAAK,EAAO,IAAIJ,KAAKD,GAEhBM,OADUL,MACKM,UAAYF,EAAKE,UAGtC,GAAID,EAAW,EAAU,MAAA,OAGzB,MAAME,EAAgBC,KAAKC,MAAMJ,EAAA,KACjC,GAAIE,EAAgB,EAAU,MAAA,OAC9B,GAAIA,EAAgB,GAAI,MAAO,GAAGA,OAGlC,MAAMG,EAAcF,KAAKC,MAAMJ,EAAY,MAC3C,GAAIK,EAAc,GAAI,MAAO,GAAGA,QAGhC,MAAMC,EAAaH,KAAKC,MAAMJ,SAC9B,GAAmB,IAAfM,EAAyB,MAAA,KAC7B,GAAIA,EAAa,EAAG,MAAO,GAAGA,OAG9B,MAAMC,EAAcJ,KAAKC,MAAME,EAAa,GAC5C,GAAIC,EAAc,EAAG,MAAO,GAAGA,OAG/B,MAAMC,EAAeL,KAAKC,MAAME,EAAa,IAC7C,GAAIE,EAAe,GAAI,MAAO,GAAGA,QAIjC,MAAO,GADaL,KAAKC,MAAME,EAAa,gBAErCT,GAEA,MAAA,UACT"}