{"version":3,"file":"chunk-d2b19a2a.js","sources":["../../src/hooks/useVideoLearnings.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient, UseQueryResult } from '@tanstack/react-query'\r\nimport { videoLearningsAPI } from '../services/api'\r\nimport { VideoLearning, VideoLearningFormData } from '../types'\r\n\r\n// =================================================================\r\n// üìπ VideoLearning Query Keys\r\n// =================================================================\r\n\r\nconst VIDEO_LEARNING_QUERY_KEY = 'videoLearnings'\r\n\r\n// =================================================================\r\n// üì• ÏòÅÏÉÅ ÌïôÏäµ Î™©Î°ù Ï°∞Ìöå (React Query)\r\n// =================================================================\r\n\r\nexport const useVideoLearnings = (): UseQueryResult<VideoLearning[], Error> => {\r\n  return useQuery<VideoLearning[], Error>({\r\n    queryKey: [VIDEO_LEARNING_QUERY_KEY, 'list'],\r\n    queryFn: async () => {\r\n      const response = await videoLearningsAPI.getAll()\r\n      return response.data?.data || response.data || []\r\n    },\r\n    staleTime: 5 * 60 * 1000,  // 5Î∂Ñ\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// üì• ÌäπÏ†ï ÏòÅÏÉÅ ÌïôÏäµ Ï°∞Ìöå (React Query)\r\n// =================================================================\r\n\r\nexport const useVideoLearning = (id: string | undefined): UseQueryResult<VideoLearning, Error> => {\r\n  return useQuery<VideoLearning, Error>({\r\n    queryKey: [VIDEO_LEARNING_QUERY_KEY, 'detail', id],\r\n    queryFn: async () => {\r\n      if (!id) throw new Error('ID is required')\r\n      const response = await videoLearningsAPI.getById(id)\r\n      return response.data\r\n    },\r\n    enabled: !!id,\r\n    staleTime: 5 * 60 * 1000,\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// ‚ûï ÏòÅÏÉÅ ÌïôÏäµ ÏÉùÏÑ± (React Query Mutation)\r\n// =================================================================\r\n\r\nexport const useCreateVideoLearning = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<VideoLearning, Error, VideoLearningFormData>({\r\n    mutationFn: async (data: VideoLearningFormData) => {\r\n      const response = await videoLearningsAPI.create(data)\r\n      return response.data\r\n    },\r\n    onSuccess: () => {\r\n      // Î™©Î°ù Ï∫êÏãú Î¨¥Ìö®Ìôî\r\n      queryClient.invalidateQueries({ queryKey: [VIDEO_LEARNING_QUERY_KEY, 'list'] })\r\n      // Îç∞Ïù¥ÌÑ∞ Ïπ¥Ïö¥Ìä∏ÎèÑ Î¨¥Ìö®Ìôî\r\n      queryClient.invalidateQueries({ queryKey: ['dataCounts'] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// ‚úèÔ∏è ÏòÅÏÉÅ ÌïôÏäµ ÏàòÏ†ï (React Query Mutation)\r\n// =================================================================\r\n\r\nexport const useUpdateVideoLearning = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<VideoLearning, Error, { id: string; data: VideoLearningFormData }>({\r\n    mutationFn: async ({ id, data }) => {\r\n      const response = await videoLearningsAPI.update(id, data)\r\n      return response.data\r\n    },\r\n    onSuccess: (_, variables) => {\r\n      // Î™©Î°ù Ï∫êÏãú Î¨¥Ìö®Ìôî\r\n      queryClient.invalidateQueries({ queryKey: [VIDEO_LEARNING_QUERY_KEY, 'list'] })\r\n      // Ìï¥Îãπ ÏòÅÏÉÅ ÌïôÏäµ ÏÉÅÏÑ∏ Ï∫êÏãúÎèÑ Î¨¥Ìö®Ìôî\r\n      queryClient.invalidateQueries({ queryKey: [VIDEO_LEARNING_QUERY_KEY, 'detail', variables.id] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// üóëÔ∏è ÏòÅÏÉÅ ÌïôÏäµ ÏÇ≠Ï†ú (React Query Mutation)\r\n// =================================================================\r\n\r\nexport const useDeleteVideoLearning = () => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<void, Error, string>({\r\n    mutationFn: async (id: string) => {\r\n      await videoLearningsAPI.delete(id)\r\n    },\r\n    onSuccess: () => {\r\n      // Î™©Î°ù Ï∫êÏãú Î¨¥Ìö®Ìôî\r\n      queryClient.invalidateQueries({ queryKey: [VIDEO_LEARNING_QUERY_KEY, 'list'] })\r\n      // Îç∞Ïù¥ÌÑ∞ Ïπ¥Ïö¥Ìä∏ÎèÑ Î¨¥Ìö®Ìôî\r\n      queryClient.invalidateQueries({ queryKey: ['dataCounts'] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// üîÑ Í∏∞Ï°¥ ÌõÖ Ìò∏ÌôòÏÑ± Ïú†ÏßÄ (Í∏∞Ï°¥ Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Î∞îÎ°ú ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎèÑÎ°ù)\r\n// =================================================================\r\n\r\nexport const useVideoLearningManagerData = () => {\r\n  const { data: videoLearnings = [], isLoading, isError, error, refetch } = useVideoLearnings()\r\n  const createMutation = useCreateVideoLearning()\r\n  const updateMutation = useUpdateVideoLearning()\r\n  const deleteMutation = useDeleteVideoLearning()\r\n\r\n  const createVideoLearning = async (data: VideoLearningFormData) => {\r\n    try {\r\n      await createMutation.mutateAsync(data)\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('VideoLearning ÏÉùÏÑ± Ïã§Ìå®:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  const updateVideoLearning = async (id: string, data: VideoLearningFormData) => {\r\n    try {\r\n      await updateMutation.mutateAsync({ id, data })\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('VideoLearning ÏàòÏ†ï Ïã§Ìå®:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  const deleteVideoLearning = async (id: string) => {\r\n    try {\r\n      await deleteMutation.mutateAsync(id)\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error('VideoLearning ÏÇ≠Ï†ú Ïã§Ìå®:', error)\r\n      return { success: false, error }\r\n    }\r\n  }\r\n\r\n  return {\r\n    videoLearnings,\r\n    isLoading,\r\n    error: isError ? error : null,\r\n    createVideoLearning,\r\n    updateVideoLearning,\r\n    deleteVideoLearning,\r\n    refetch,\r\n  }\r\n}\r\n\r\n"],"names":["VIDEO_LEARNING_QUERY_KEY","useVideoLearnings","useQuery","queryKey","queryFn","async","response","videoLearningsAPI","getAll","_a","data","staleTime","useVideoLearning","id","Error","getById","enabled","useUpdateVideoLearning","queryClient","useQueryClient","useMutation","mutationFn","update","onSuccess","_","variables","invalidateQueries","useDeleteVideoLearning","delete","useVideoLearningManagerData","videoLearnings","isLoading","isError","error","refetch","createMutation","create","useCreateVideoLearning","updateMutation","deleteMutation","createVideoLearning","mutateAsync","success","updateVideoLearning","deleteVideoLearning"],"mappings":"+FAQA,MAAMA,EAA2B,iBAMpBC,EAAoB,IACxBC,EAAiC,CACtCC,SAAU,CAACH,EAA0B,QACrCI,QAASC,gBACD,MAAAC,QAAiBC,EAAkBC,SACzC,OAAO,OAAAC,IAASC,WAAT,EAAAD,EAAeC,OAAQJ,EAASI,MAAQ,IAEjDC,UAAW,MAQFC,EAAoBC,GACxBX,EAA+B,CACpCC,SAAU,CAACH,EAA0B,SAAUa,GAC/CT,QAASC,UACP,IAAKQ,EAAU,MAAA,IAAIC,MAAM,kBAEzB,aADuBP,EAAkBQ,QAAQF,IACjCH,MAElBM,UAAWH,EACXF,UAAW,MA6BFM,EAAyB,KACpC,MAAMC,EAAcC,IAEpB,OAAOC,EAA+E,CACpFC,WAAYhB,OAASQ,KAAIH,iBACAH,EAAkBe,OAAOT,EAAIH,IACpCA,KAElBa,UAAW,CAACC,EAAGC,KAEbP,EAAYQ,kBAAkB,CAAEvB,SAAU,CAACH,EAA0B,UAEzDkB,EAAAQ,kBAAkB,CAAEvB,SAAU,CAACH,EAA0B,SAAUyB,EAAUZ,UASlFc,EAAyB,KACpC,MAAMT,EAAcC,IAEpB,OAAOC,EAAiC,CACtCC,WAAYhB,MAAOQ,UACXN,EAAkBqB,OAAOf,IAEjCU,UAAW,KAETL,EAAYQ,kBAAkB,CAAEvB,SAAU,CAACH,EAA0B,UAErEkB,EAAYQ,kBAAkB,CAAEvB,SAAU,CAAC,oBASpC0B,EAA8B,KACnC,MAAEnB,KAAMoB,EAAiB,aAAIC,UAAWC,EAASC,MAAAA,EAAAC,QAAOA,GAAYjC,IACpEkC,EAhE8B,MACpC,MAAMjB,EAAcC,IAEpB,OAAOC,EAAyD,CAC9DC,WAAYhB,MAAOK,UACMH,EAAkB6B,OAAO1B,IAChCA,KAElBa,UAAW,KAETL,EAAYQ,kBAAkB,CAAEvB,SAAU,CAACH,EAA0B,UAErEkB,EAAYQ,kBAAkB,CAAEvB,SAAU,CAAC,oBAoDxBkC,GACjBC,EAAiBrB,IACjBsB,EAAiBZ,IAgChB,MAAA,CACLG,iBACAC,YACAE,MAAOD,EAAUC,EAAQ,KACzBO,oBAlC0BnC,MAAOK,IAC7B,IAEK,aADDyB,EAAeM,YAAY/B,GAC1B,CAAEgC,SAAS,SACXT,GAEP,MAAO,CAAES,SAAS,EAAOT,MAAAA,EAC3B,GA4BAU,oBAzB0BtC,MAAOQ,EAAYH,KACzC,IAEK,aADD4B,EAAeG,YAAY,CAAE5B,KAAIH,SAChC,CAAEgC,SAAS,SACXT,GAEP,MAAO,CAAES,SAAS,EAAOT,MAAAA,EAC3B,GAmBAW,oBAhB0BvC,MAAOQ,IAC7B,IAEK,aADD0B,EAAeE,YAAY5B,GAC1B,CAAE6B,SAAS,SACXT,GAEP,MAAO,CAAES,SAAS,EAAOT,MAAAA,EAC3B,GAUAC"}