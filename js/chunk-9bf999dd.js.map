{"version":3,"file":"chunk-9bf999dd.js","sources":["../../src/hooks/useExperiences.ts"],"sourcesContent":["import { useQuery } from '@tanstack/react-query';\r\nimport { experiencesAPI } from '../services/api';\r\n\r\n// 경력 상세 카테고리 타입\r\nexport interface ExperienceDetail {\r\n  category: string;  // 카테고리 이름 (예: \"근무경험\", \"교육\", \"근무매장\")\r\n  categoryEn?: string;\r\n  categoryJa?: string;\r\n  items: string[];   // 카테고리별 항목들\r\n  itemsEn?: string[];\r\n  itemsJa?: string[];\r\n  order?: number;\r\n}\r\n\r\n// 백엔드 ExperienceSchema에 맞춘 인터페이스 정의\r\nexport interface ExperienceItem {\r\n  _id: string;\r\n  period: string;\r\n  title: string;\r\n  titleEn?: string;\r\n  titleJa?: string;\r\n  company: string;\r\n  companyEn?: string;\r\n  companyJa?: string;\r\n  description: string;\r\n  descriptionEn?: string;\r\n  descriptionJa?: string;\r\n  details?: ExperienceDetail[];  // 카테고리별 상세 내용 (신규)\r\n  detailsEn?: ExperienceDetail[];\r\n  detailsJa?: ExperienceDetail[];\r\n  skills: string[];  // 🔄 호환성 유지\r\n  skillsEn?: string[];\r\n  skillsJa?: string[];\r\n  skillIds?: string[];  // 🌟 스킬 ID 목록 (Skills 페이지와 연결)\r\n  iconKey?: string;\r\n  color?: string;\r\n  bgColor?: string;\r\n  order?: number;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n}\r\n\r\ninterface UseExperiencesResult {\r\n  experiences: ExperienceItem[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  refetch: () => void;\r\n}\r\n\r\n// 데이터 변환 및 정렬 함수\r\nconst transformExperiences = (data: ExperienceItem[]): ExperienceItem[] => {\r\n  return data.slice().sort((a, b) => {\r\n    // case 1: 두 항목 모두 order가 있으면 order를 기준으로 오름차순\r\n    if (a.order !== undefined && b.order !== undefined) {\r\n      return a.order - b.order;\r\n    }\r\n    \r\n    // case 2: order가 하나만 있거나 둘 다 없으면 createdAt을 기준으로 역순 (최신순)\r\n    if (a.createdAt && b.createdAt) {\r\n      // Date 객체로 변환하여 비교 (내림차순)\r\n      return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\r\n    }\r\n    \r\n    return 0; // 정렬할 필드가 모두 없으면 순서 변경 없음\r\n  });\r\n};\r\n\r\n// React Query를 사용한 데이터 페칭\r\nconst fetchExperiences = async (): Promise<ExperienceItem[]> => {\r\n  const response = await experiencesAPI.getAll();\r\n  const data: ExperienceItem[] = response.data.data;\r\n  return transformExperiences(data);\r\n};\r\n\r\nexport const useExperiences = (): UseExperiencesResult => {\r\n  const {\r\n    data: experiences = [],\r\n    isLoading: loading,\r\n    error,\r\n    refetch\r\n  } = useQuery({\r\n    queryKey: ['experiences'],\r\n    queryFn: fetchExperiences,\r\n    staleTime: 5 * 60 * 1000, // 5분\r\n    gcTime: 10 * 60 * 1000, // 10분\r\n  });\r\n\r\n  return { \r\n    experiences, \r\n    loading, \r\n    error: error ? '경험 데이터를 불러오는 중 오류가 발생했습니다.' : null, \r\n    refetch \r\n  };\r\n};\r\n"],"names":["fetchExperiences","async","data","slice","sort","a","b","order","createdAt","Date","getTime","transformExperiences","experiencesAPI","getAll","useExperiences","experiences","isLoading","loading","error","refetch","useQuery","queryKey","queryFn","staleTime","gcTime"],"mappings":"gFAkDA,MAkBMA,EAAmBC,SAlBI,CAACC,GACrBA,EAAKC,QAAQC,KAAK,CAACC,EAAGC,SAEX,IAAZD,EAAEE,YAAmC,IAAZD,EAAEC,MACtBF,EAAEE,MAAQD,EAAEC,MAIjBF,EAAEG,WAAaF,EAAEE,UAEZ,IAAIC,KAAKH,EAAEE,WAAWE,UAAY,IAAID,KAAKJ,EAAEG,WAAWE,UAG1D,GAQFC,QAFgBC,EAAeC,UACEX,KAAKA,MAIlCY,EAAiB,KACtB,MACJZ,KAAMa,EAAc,GACpBC,UAAWC,EAAAC,MACXA,EAAAC,QACAA,GACEC,EAAS,CACXC,SAAU,CAAC,eACXC,QAAStB,EACTuB,UAAW,IACXC,OAAQ,MAGH,MAAA,CACLT,cACAE,UACAC,MAAOA,EAAQ,6BAA+B,KAC9CC"}