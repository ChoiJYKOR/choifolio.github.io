{"version":3,"file":"chunk-5cf4a90d.js","sources":["../../src/utils/videoUtils.tsx"],"sourcesContent":["// =================================================================\r\n// 📹 유튜브 영상 관련 유틸리티 함수\r\n// =================================================================\r\n\r\n/**\r\n * 다양한 유튜브 URL 형식에서 영상 ID 추출\r\n * @param url - 유튜브 URL\r\n * @returns 영상 ID 또는 null\r\n */\r\nexport const extractYouTubeId = (url: string): string | null => {\r\n  if (!url) return null\r\n  \r\n  // 다양한 유튜브 URL 패턴\r\n  const patterns = [\r\n    /(?:youtube\\.com\\/watch\\?v=)([a-zA-Z0-9_-]{11})/,  // https://www.youtube.com/watch?v=VIDEO_ID\r\n    /(?:youtu\\.be\\/)([a-zA-Z0-9_-]{11})/,  // https://youtu.be/VIDEO_ID\r\n    /(?:youtube\\.com\\/embed\\/)([a-zA-Z0-9_-]{11})/,  // https://www.youtube.com/embed/VIDEO_ID\r\n    /(?:youtube\\.com\\/shorts\\/)([a-zA-Z0-9_-]{11})/,  // https://www.youtube.com/shorts/VIDEO_ID\r\n    /(?:youtube\\.com\\/v\\/)([a-zA-Z0-9_-]{11})/,  // https://www.youtube.com/v/VIDEO_ID\r\n  ]\r\n  \r\n  for (const pattern of patterns) {\r\n    const match = url.match(pattern)\r\n    if (match && match[1]) {\r\n      return match[1]\r\n    }\r\n  }\r\n  \r\n  return null\r\n}\r\n\r\n/**\r\n * 유튜브 영상 ID로 고해상도 썸네일 URL 생성\r\n * @param videoId - 유튜브 영상 ID\r\n * @param quality - 썸네일 품질 (maxresdefault, hqdefault, mqdefault, sddefault)\r\n * @returns 썸네일 URL\r\n */\r\nexport const getYouTubeThumbnail = (videoId: string, quality: string = 'maxresdefault'): string => {\r\n  return `https://img.youtube.com/vi/${videoId}/${quality}.jpg`\r\n}\r\n\r\n/**\r\n * 유튜브 임베드 URL 생성 (타임스탬프 지원, 전문성 최적화)\r\n * @param videoId - 유튜브 영상 ID\r\n * @param startTime - 시작 시간 (초 단위)\r\n * @param autoplay - 자동 재생 여부 (기본값: false)\r\n * @returns 임베드 URL\r\n */\r\nexport const getYouTubeEmbedUrl = (videoId: string, startTime?: number, autoplay: boolean = false): string => {\r\n  const baseUrl = `https://www.youtube.com/embed/${videoId}`\r\n  const params = new URLSearchParams()\r\n  \r\n  if (startTime !== undefined && startTime > 0) {\r\n    params.append('start', startTime.toString())\r\n  }\r\n  \r\n  if (autoplay) {\r\n    params.append('autoplay', '1')\r\n  }\r\n  \r\n  // 🌟 전문성을 위한 플레이어 최적화 파라미터\r\n  params.append('rel', '0')  // 관련 영상 추천 비활성화\r\n  params.append('modestbranding', '1')  // 유튜브 로고 최소화 & '동영상 더보기' 툴팁 제거\r\n  params.append('iv_load_policy', '3')  // 영상 주석(annotations) 비활성화\r\n  params.append('showinfo', '0')  // 영상 정보 표시 최소화\r\n  params.append('fs', '1')  // 전체 화면 버튼 표시\r\n  params.append('cc_load_policy', '0')  // 자막 자동 로드 비활성화\r\n  params.append('controls', '1')  // 컨트롤러 표시\r\n  \r\n  return `${baseUrl}?${params.toString()}`\r\n}\r\n\r\n/**\r\n * 텍스트에서 타임스탬프 패턴 추출 및 초 단위 변환\r\n * @param text - 타임스탬프를 포함한 텍스트\r\n * @returns 타임스탬프 정보 배열 [{ text: '[1:30]', seconds: 90, position: 10 }]\r\n */\r\nexport interface TimestampMatch {\r\n  text: string  // 원본 텍스트 (예: '[1:30]')\r\n  seconds: number  // 초 단위 시간\r\n  position: number  // 텍스트 내 위치\r\n}\r\n\r\nexport const parseTimestamps = (text: string): TimestampMatch[] => {\r\n  if (!text) return []\r\n  \r\n  // 타임스탬프 패턴: [MM:SS] 또는 [H:MM:SS]\r\n  const pattern = /\\[(\\d{1,2}):(\\d{2})(?::(\\d{2}))?\\]/g\r\n  const matches: TimestampMatch[] = []\r\n  \r\n  let match\r\n  while ((match = pattern.exec(text)) !== null) {\r\n    const hours = match[3] ? parseInt(match[1] || '0', 10) : 0\r\n    const minutes = match[3] ? parseInt(match[2] || '0', 10) : parseInt(match[1] || '0', 10)\r\n    const seconds = match[3] ? parseInt(match[3] || '0', 10) : parseInt(match[2] || '0', 10)\r\n    \r\n    const totalSeconds = hours * 3600 + minutes * 60 + seconds\r\n    \r\n    matches.push({\r\n      text: match[0],\r\n      seconds: totalSeconds,\r\n      position: match.index,\r\n    })\r\n  }\r\n  \r\n  return matches\r\n}\r\n\r\n/**\r\n * 타임스탬프가 포함된 텍스트를 클릭 가능한 링크로 변환\r\n * @param text - 원본 텍스트\r\n * @param onTimestampClick - 타임스탬프 클릭 핸들러\r\n * @returns JSX 요소 배열\r\n */\r\nexport const renderTextWithTimestamps = (\r\n  text: string,\r\n  onTimestampClick?: (seconds: number) => void\r\n): (string | JSX.Element)[] => {\r\n  if (!text) return []\r\n  \r\n  const timestamps = parseTimestamps(text)\r\n  if (timestamps.length === 0) return [text]\r\n  \r\n  const result: (string | JSX.Element)[] = []\r\n  let lastIndex = 0\r\n  \r\n  timestamps.forEach((ts, idx) => {\r\n    // 타임스탬프 이전 텍스트 추가\r\n    if (ts.position > lastIndex) {\r\n      result.push(text.substring(lastIndex, ts.position))\r\n    }\r\n    \r\n    // 타임스탬프를 클릭 가능한 버튼으로 추가\r\n    if (onTimestampClick) {\r\n      result.push(\r\n        <button\r\n          key={`ts-${idx}`}\r\n          onClick={() => onTimestampClick(ts.seconds)}\r\n          className=\"inline-flex items-center px-2 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded font-mono text-xs font-bold transition-colors mx-1\"\r\n          title={`영상 ${ts.text} 위치로 이동`}\r\n        >\r\n          {ts.text}\r\n        </button>\r\n      )\r\n    } else {\r\n      result.push(\r\n        <span key={`ts-${idx}`} className=\"inline-flex items-center px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded font-mono text-xs font-bold mx-1\">\r\n          {ts.text}\r\n        </span>\r\n      )\r\n    }\r\n    \r\n    lastIndex = ts.position + ts.text.length\r\n  })\r\n  \r\n  // 마지막 타임스탬프 이후 텍스트 추가\r\n  if (lastIndex < text.length) {\r\n    result.push(text.substring(lastIndex))\r\n  }\r\n  \r\n  return result\r\n}\r\n\r\n/**\r\n * 유튜브 URL 유효성 검사\r\n * @param url - 검증할 URL\r\n * @returns 유효한 유튜브 URL 여부\r\n */\r\nexport const isValidYouTubeUrl = (url: string): boolean => {\r\n  if (!url) return false\r\n  return extractYouTubeId(url) !== null\r\n}\r\n\r\n/**\r\n * 유튜브 재생 목록 ID 추출\r\n * @param url - 유튜브 재생 목록 URL\r\n * @returns 재생 목록 ID 또는 null\r\n */\r\nexport const extractYouTubePlaylistId = (url: string): string | null => {\r\n  if (!url) return null\r\n  \r\n  // 재생 목록 URL 패턴\r\n  const patterns = [\r\n    /[?&]list=([a-zA-Z0-9_-]{13,})/,  // ?list=PLAYLIST_ID 또는 &list=PLAYLIST_ID\r\n    /youtube\\.com\\/playlist\\?list=([a-zA-Z0-9_-]{13,})/,  // playlist 전용 URL\r\n  ]\r\n  \r\n  for (const pattern of patterns) {\r\n    const match = url.match(pattern)\r\n    if (match && match[1]) {\r\n      return match[1]\r\n    }\r\n  }\r\n  \r\n  return null\r\n}\r\n\r\n/**\r\n * 유튜브 재생 목록 임베드 URL 생성\r\n * @param playlistId - 유튜브 재생 목록 ID\r\n * @param startVideoId - 시작할 영상 ID (선택사항)\r\n * @returns 재생 목록 임베드 URL\r\n */\r\nexport const getYouTubePlaylistEmbedUrl = (playlistId: string, startVideoId?: string): string => {\r\n  const params = new URLSearchParams()\r\n  \r\n  params.append('list', playlistId)\r\n  params.append('rel', '0')\r\n  params.append('modestbranding', '1')\r\n  params.append('iv_load_policy', '3')\r\n  params.append('showinfo', '0')\r\n  params.append('fs', '1')\r\n  params.append('cc_load_policy', '0')\r\n  params.append('controls', '1')\r\n  params.append('enablejsapi', '1')\r\n  \r\n  if (startVideoId) {\r\n    // 특정 영상부터 시작\r\n    return `https://www.youtube.com/embed/${startVideoId}?${params.toString()}`\r\n  } else {\r\n    // 재생 목록 첫 영상부터 시작\r\n    return `https://www.youtube.com/embed?${params.toString()}`\r\n  }\r\n}\r\n\r\n/**\r\n * 유튜브 재생 목록 썸네일 URL 생성\r\n * @param playlistId - 유튜브 재생 목록 ID\r\n * @returns 썸네일 URL\r\n */\r\nexport const getYouTubePlaylistThumbnail = (playlistId: string): string => {\r\n  // 재생 목록 썸네일은 특정 API를 통해서만 가능하므로\r\n  // 대신 첫 번째 영상의 썸네일을 사용하거나 기본 이미지 사용\r\n  return `https://i.ytimg.com/vi//hqdefault.jpg` // 플레이스홀더\r\n}\r\n\r\n/**\r\n * 마크다운을 HTML로 변환\r\n * @param markdown - 마크다운 텍스트\r\n * @returns HTML 문자열\r\n */\r\nexport const renderMarkdown = (markdown: string): string => {\r\n  if (!markdown) return ''\r\n  \r\n  return markdown\r\n    // 제목\r\n    .replace(/^### (.*$)/gim, '<h3 class=\"text-lg font-semibold mt-4 mb-2 text-gray-900 dark:text-white\">$1</h3>')\r\n    .replace(/^## (.*$)/gim, '<h2 class=\"text-xl font-semibold mt-4 mb-2 text-gray-900 dark:text-white\">$1</h2>')\r\n    .replace(/^# (.*$)/gim, '<h1 class=\"text-2xl font-bold mt-4 mb-2 text-gray-900 dark:text-white\">$1</h1>')\r\n    // 볼드\r\n    .replace(/\\*\\*(.*?)\\*\\*/g, '<strong class=\"font-bold\">$1</strong>')\r\n    // 이탤릭\r\n    .replace(/\\*(.*?)\\*/g, '<em class=\"italic\">$1</em>')\r\n    // 밑줄\r\n    .replace(/__(.*?)__/g, '<u class=\"underline\">$1</u>')\r\n    // 인라인 코드\r\n    .replace(/`(.*?)`/g, '<code class=\"bg-gray-200 dark:bg-gray-600 text-red-600 dark:text-red-400 px-1 rounded text-sm\">$1</code>')\r\n    // 토글\r\n    .replace(/^▶ (.*$)/gim, '<div class=\"flex items-center mt-2 mb-1\"><span class=\"mr-2\">▶</span><span class=\"font-medium text-gray-900 dark:text-white\">$1</span></div>')\r\n    // 불릿 리스트\r\n    .replace(/^[\\s]*[-*+]\\s(.*$)/gim, '<div class=\"ml-4 mb-1\"><span class=\"mr-2\">•</span>$1</div>')\r\n    // 숫자 리스트\r\n    .replace(/^[\\s]*\\d+\\.\\s(.*$)/gim, '<div class=\"ml-4 mb-1\"><span class=\"mr-2\">1.</span>$1</div>')\r\n    // 코드 블록\r\n    .replace(/```(.*?)\\n([\\s\\S]*?)\\n```/gim, (_match, p1, p2) => {\r\n      const lang = p1 ? `language-${p1.trim()}` : ''\r\n      return `<pre class=\"bg-gray-800 p-3 rounded-lg overflow-x-auto my-3\"><code class=\"${lang} text-sm text-gray-100\">${p2.trim()}</code></pre>`\r\n    })\r\n    // 줄바꿈\r\n    .replace(/\\n/g, '<br>')\r\n}\r\n\r\n/**\r\n * 마크다운을 HTML로 변환하고 타임스탬프를 클릭 가능한 버튼으로 변환\r\n * @param markdown - 마크다운 형식의 콘텐츠\r\n * @param onTimestampClick - 타임스탬프 클릭 핸들러\r\n * @returns 변환된 HTML 문자열\r\n */\r\nexport const renderHtmlWithTimestamps = (\r\n  markdown: string,\r\n  onTimestampClick?: (seconds: number) => void\r\n): string => {\r\n  if (!markdown) return ''\r\n  \r\n  // 1단계: 마크다운을 HTML로 변환\r\n  let html = renderMarkdown(markdown)\r\n  \r\n  // 2단계: 타임스탬프를 버튼으로 변환\r\n  const pattern = /\\[(\\d{1,2}):(\\d{2})(?::(\\d{2}))?\\]/g\r\n  \r\n  html = html.replace(pattern, (match, ...groups) => {\r\n    const hours = groups[2] ? parseInt(groups[0], 10) : 0\r\n    const minutes = groups[2] ? parseInt(groups[1], 10) : parseInt(groups[0], 10)\r\n    const seconds = groups[2] ? parseInt(groups[2], 10) : parseInt(groups[1], 10)\r\n    \r\n    const totalSeconds = hours * 3600 + minutes * 60 + seconds\r\n    \r\n    // 데이터 속성으로 초를 저장하여 클릭 이벤트에서 사용\r\n    return `<button \r\n      class=\"inline-flex items-center px-2 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded font-mono text-xs font-bold transition-colors mx-1 cursor-pointer\"\r\n      data-timestamp=\"${totalSeconds}\"\r\n      title=\"영상 ${match} 위치로 이동\"\r\n    >${match}</button>`\r\n  })\r\n  \r\n  return html\r\n}\r\n\r\n"],"names":["extractYouTubeId","url","patterns","pattern","match","getYouTubeThumbnail","videoId","quality","extractYouTubePlaylistId","getYouTubePlaylistThumbnail","playlistId","renderHtmlWithTimestamps","markdown","onTimestampClick","html","replace","_match","p1","p2","trim","renderMarkdown","groups","parseInt"],"mappings":"4BASa,MAAAA,EAAoBC,IAC/B,IAAKA,EAAY,OAAA,KAGjB,MAAMC,EAAW,CACf,iDACA,qCACA,+CACA,gDACA,4CAGF,IAAA,MAAWC,KAAWD,EAAU,CACxB,MAAAE,EAAQH,EAAIG,MAAMD,GACpB,GAAAC,GAASA,EAAM,GACjB,OAAOA,EAAM,EAEjB,CAEO,OAAA,MASIC,EAAsB,CAACC,EAAiBC,EAAkB,kBAC9D,8BAA8BD,KAAWC,QA4IrCC,EAA4BP,IACvC,IAAKA,EAAY,OAAA,KAGjB,MAAMC,EAAW,CACf,gCACA,qDAGF,IAAA,MAAWC,KAAWD,EAAU,CACxB,MAAAE,EAAQH,EAAIG,MAAMD,GACpB,GAAAC,GAASA,EAAM,GACjB,OAAOA,EAAM,EAEjB,CAEO,OAAA,MAoCIK,EAA+BC,GAGnC,wCA6CIC,EAA2B,CACtCC,EACAC,KAEA,IAAKD,EAAiB,MAAA,GAGlB,IAAAE,EA5CwB,CAACF,GACxBA,EAEEA,EAEJG,QAAQ,gBAAiB,qFACzBA,QAAQ,eAAgB,qFACxBA,QAAQ,cAAe,kFAEvBA,QAAQ,iBAAkB,yCAE1BA,QAAQ,aAAc,8BAEtBA,QAAQ,aAAc,+BAEtBA,QAAQ,WAAY,4GAEpBA,QAAQ,cAAe,+IAEvBA,QAAQ,wBAAyB,8DAEjCA,QAAQ,wBAAyB,+DAEjCA,QAAQ,+BAAgC,CAACC,EAAQC,EAAIC,IAE7C,6EADMD,EAAK,YAAYA,EAAGE,SAAW,6BACuED,EAAGC,uBAGvHJ,QAAQ,MAAO,QA3BI,GA2CXK,CAAeR,GAoBnB,OAfPE,EAAOA,EAAKC,QAFI,sCAEa,CAACX,KAAUiB,IAQ/B,wMAHsB,MAJfA,EAAO,GAAKC,SAASD,EAAO,GAAI,IAAM,GAIN,IAH9BA,EAAO,GAAKC,SAASD,EAAO,GAAI,IAAMC,SAASD,EAAO,GAAI,MAC1DA,EAAO,GAAKC,SAASD,EAAO,GAAI,IAAMC,SAASD,EAAO,GAAI,0BAQ5DjB,mBACXA,cAGEU"}