{"version":3,"file":"chunk-05d807e2.js","sources":["../../node_modules/devlop/lib/default.js","../../node_modules/estree-util-is-identifier-name/lib/index.js","../../node_modules/hast-util-whitespace/lib/index.js","../../node_modules/property-information/lib/util/schema.js","../../node_modules/property-information/lib/util/merge.js","../../node_modules/property-information/lib/normalize.js","../../node_modules/property-information/lib/util/info.js","../../node_modules/property-information/lib/util/types.js","../../node_modules/property-information/lib/util/defined-info.js","../../node_modules/property-information/lib/util/create.js","../../node_modules/property-information/lib/aria.js","../../node_modules/property-information/lib/util/case-sensitive-transform.js","../../node_modules/property-information/lib/util/case-insensitive-transform.js","../../node_modules/property-information/lib/html.js","../../node_modules/property-information/lib/svg.js","../../node_modules/property-information/lib/xlink.js","../../node_modules/property-information/lib/xmlns.js","../../node_modules/property-information/lib/xml.js","../../node_modules/property-information/lib/hast-to-react.js","../../node_modules/property-information/lib/find.js","../../node_modules/property-information/index.js","../../node_modules/inline-style-parser/index.js","../../node_modules/style-to-object/cjs/index.js","../../node_modules/style-to-js/cjs/utilities.js","../../node_modules/style-to-js/cjs/index.js","../../node_modules/unist-util-position/lib/index.js","../../node_modules/unist-util-stringify-position/lib/index.js","../../node_modules/vfile-message/lib/index.js","../../node_modules/hast-util-to-jsx-runtime/lib/index.js","../../node_modules/comma-separated-tokens/index.js","../../node_modules/space-separated-tokens/index.js","../../node_modules/html-url-attributes/lib/index.js","../../node_modules/mdast-util-to-string/lib/index.js","../../node_modules/decode-named-character-reference/index.dom.js","../../node_modules/micromark-util-chunked/index.js","../../node_modules/micromark-util-combine-extensions/index.js","../../node_modules/micromark-util-decode-numeric-character-reference/index.js","../../node_modules/micromark-util-normalize-identifier/index.js","../../node_modules/micromark-util-character/index.js","../../node_modules/micromark-util-sanitize-uri/index.js","../../node_modules/micromark-factory-space/index.js","../../node_modules/micromark/lib/initialize/content.js","../../node_modules/micromark/lib/initialize/document.js","../../node_modules/micromark-util-classify-character/index.js","../../node_modules/micromark-util-resolve-all/index.js","../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../../node_modules/micromark-util-subtokenize/index.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark-factory-destination/index.js","../../node_modules/micromark-factory-label/index.js","../../node_modules/micromark-factory-title/index.js","../../node_modules/micromark-factory-whitespace/index.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-util-html-tag-name/index.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/micromark/lib/initialize/flow.js","../../node_modules/micromark/lib/initialize/text.js","../../node_modules/micromark/lib/constructs.js","../../node_modules/micromark/lib/create-tokenizer.js","../../node_modules/micromark/lib/parse.js","../../node_modules/micromark/lib/preprocess.js","../../node_modules/micromark-util-decode-string/index.js","../../node_modules/mdast-util-from-markdown/lib/index.js","../../node_modules/micromark/lib/postprocess.js","../../node_modules/remark-parse/lib/index.js","../../node_modules/mdast-util-to-hast/lib/revert.js","../../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../../node_modules/trim-lines/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../../node_modules/mdast-util-to-hast/lib/handlers/break.js","../../node_modules/mdast-util-to-hast/lib/handlers/code.js","../../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../../node_modules/mdast-util-to-hast/lib/handlers/html.js","../../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/image.js","../../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/link.js","../../node_modules/mdast-util-to-hast/lib/handlers/list.js","../../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../../node_modules/mdast-util-to-hast/lib/handlers/root.js","../../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../../node_modules/mdast-util-to-hast/lib/handlers/table.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../../node_modules/mdast-util-to-hast/lib/handlers/text.js","../../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../../node_modules/@ungap/structured-clone/esm/types.js","../../node_modules/@ungap/structured-clone/esm/deserialize.js","../../node_modules/@ungap/structured-clone/esm/serialize.js","../../node_modules/@ungap/structured-clone/esm/index.js","../../node_modules/mdast-util-to-hast/lib/footer.js","../../node_modules/unist-util-is/lib/index.js","../../node_modules/unist-util-visit-parents/lib/index.js","../../node_modules/unist-util-visit/lib/index.js","../../node_modules/mdast-util-to-hast/lib/state.js","../../node_modules/mdast-util-to-hast/lib/index.js","../../node_modules/remark-rehype/lib/index.js","../../node_modules/bail/index.js","../../node_modules/extend/index.js","../../node_modules/is-plain-obj/index.js","../../node_modules/trough/lib/index.js","../../node_modules/vfile/lib/minpath.browser.js","../../node_modules/vfile/lib/minproc.browser.js","../../node_modules/vfile/lib/minurl.shared.js","../../node_modules/vfile/lib/minurl.browser.js","../../node_modules/vfile/lib/index.js","../../node_modules/unified/lib/callable-instance.js","../../node_modules/unified/lib/index.js","../../node_modules/react-markdown/lib/index.js"],"sourcesContent":["export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @import {Schema as SchemaType, Space} from 'property-information'\n */\n\n/** @type {SchemaType} */\nexport class Schema {\n  /**\n   * @param {SchemaType['property']} property\n   *   Property.\n   * @param {SchemaType['normal']} normal\n   *   Normal.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Schema.\n   */\n  constructor(property, normal, space) {\n    this.normal = normal\n    this.property = property\n\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\nSchema.prototype.normal = {}\nSchema.prototype.property = {}\nSchema.prototype.space = undefined\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {ReadonlyArray<Schema>} definitions\n *   Definitions.\n * @param {Space | undefined} [space]\n *   Space.\n * @returns {Schema}\n *   Schema.\n */\nexport function merge(definitions, space) {\n  /** @type {Record<string, Info>} */\n  const property = {}\n  /** @type {Record<string, string>} */\n  const normal = {}\n\n  for (const definition of definitions) {\n    Object.assign(property, definition.property)\n    Object.assign(normal, definition.normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * Get the cleaned case insensitive form of an attribute or property.\n *\n * @param {string} value\n *   An attribute-like or property-like name.\n * @returns {string}\n *   Value that can be used to look up the properly cased property on a\n *   `Schema`.\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","/**\n * @import {Info as InfoType} from 'property-information'\n */\n\n/** @type {InfoType} */\nexport class Info {\n  /**\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute) {\n    this.attribute = attribute\n    this.property = property\n  }\n}\n\nInfo.prototype.attribute = ''\nInfo.prototype.booleanish = false\nInfo.prototype.boolean = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.defined = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.number = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.property = ''\nInfo.prototype.spaceSeparated = false\nInfo.prototype.space = undefined\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @import {Space} from 'property-information'\n */\n\nimport {Info} from './info.js'\nimport * as types from './types.js'\n\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\n  Object.keys(types)\n)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @param {number | null | undefined} [mask]\n   *   Mask.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @template {keyof DefinedInfo} Key\n *   Key type.\n * @param {DefinedInfo} values\n *   Info.\n * @param {Key} key\n *   Key.\n * @param {DefinedInfo[Key]} value\n *   Value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\n/**\n * @typedef Definition\n *   Definition of a schema.\n * @property {Record<string, string> | undefined} [attributes]\n *   Normalzed names to special attribute case.\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\n *   Normalized names that must be set as properties.\n * @property {Record<string, number | null>} properties\n *   Property names to their types.\n * @property {Space | undefined} [space]\n *   Space.\n * @property {Transform} transform\n *   Transform a property name.\n */\n\n/**\n * @callback Transform\n *   Transform.\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Attribute.\n */\n\nimport {normalize} from '../normalize.js'\nimport {DefinedInfo} from './defined-info.js'\nimport {Schema} from './schema.js'\n\n/**\n * @param {Definition} definition\n *   Definition.\n * @returns {Schema}\n *   Schema.\n */\nexport function create(definition) {\n  /** @type {Record<string, Info>} */\n  const properties = {}\n  /** @type {Record<string, string>} */\n  const normals = {}\n\n  for (const [property, value] of Object.entries(definition.properties)) {\n    const info = new DefinedInfo(\n      property,\n      definition.transform(definition.attributes || {}, property),\n      value,\n      definition.space\n    )\n\n    if (\n      definition.mustUseProperty &&\n      definition.mustUseProperty.includes(property)\n    ) {\n      info.mustUseProperty = true\n    }\n\n    properties[property] = info\n\n    normals[normalize(property)] = property\n    normals[normalize(info.attribute)] = property\n  }\n\n  return new Schema(properties, normals, definition.space)\n}\n","import {create} from './util/create.js'\nimport {booleanish, number, spaceSeparated} from './util/types.js'\n\nexport const aria = create({\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  },\n  transform(_, property) {\n    return property === 'role'\n      ? property\n      : 'aria-' + property.slice(4).toLowerCase()\n  }\n})\n","/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} attribute\n *   Attribute.\n * @returns {string}\n *   Transformed attribute.\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Transformed property.\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  booleanish,\n  boolean,\n  commaSeparated,\n  number,\n  overloadedBoolean,\n  spaceSeparated\n} from './util/types.js'\n\nexport const html = create({\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: overloadedBoolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  },\n  space: 'html',\n  transform: caseInsensitiveTransform\n})\n","import {caseSensitiveTransform} from './util/case-sensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  boolean,\n  commaOrSpaceSeparated,\n  commaSeparated,\n  number,\n  spaceSeparated\n} from './util/types.js'\n\nexport const svg = create({\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  },\n  space: 'svg',\n  transform: caseSensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  },\n  space: 'xlink',\n  transform(_, property) {\n    return 'xlink:' + property.slice(5).toLowerCase()\n  }\n})\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  properties: {xmlnsXLink: null, xmlns: null},\n  space: 'xmlns',\n  transform: caseInsensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},\n  space: 'xml',\n  transform(_, property) {\n    return 'xml:' + property.slice(3).toLowerCase()\n  }\n})\n","/**\n * Special cases for React (`Record<string, string>`).\n *\n * `hast` is close to `React` but differs in a couple of cases.\n * To get a React property from a hast property,\n * check if it is in `hastToReact`.\n * If it is, use the corresponding value;\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * @import {Schema} from 'property-information'\n */\n\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\nimport {normalize} from './normalize.js'\n\nconst cap = /[A-Z]/g\nconst dash = /-[a-z]/g\nconst valid = /^data[-\\w.:]+$/i\n\n/**\n * Look up info on a property.\n *\n * In most cases the given `schema` contains info on the property.\n * All standard,\n * most legacy,\n * and some non-standard properties are supported.\n * For these cases,\n * the returned `Info` has hints about the value of the property.\n *\n * `name` can also be a valid data attribute or property,\n * in which case an `Info` object with the correctly cased `attribute` and\n * `property` is returned.\n *\n * `name` can be an unknown attribute,\n * in which case an `Info` object with `attribute` and `property` set to the\n * given name is returned.\n * It is not recommended to provide unsupported legacy or recently specced\n * properties.\n *\n *\n * @param {Schema} schema\n *   Schema;\n *   either the `html` or `svg` export.\n * @param {string} value\n *   An attribute-like or property-like name;\n *   it will be passed through `normalize` to hopefully find the correct info.\n * @returns {Info}\n *   Info.\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let property = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(property, value)\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Kebab.\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Camel.\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","// Note: types exposed from `index.d.ts`.\nimport {merge} from './lib/util/merge.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\nimport {xlink} from './lib/xlink.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {xml} from './lib/xml.js'\n\nexport {hastToReact} from './lib/hast-to-react.js'\n\nexport const html = merge([aria, htmlBase, xlink, xmlns, xml], 'html')\n\nexport {find} from './lib/find.js'\nexport {normalize} from './lib/normalize.js'\n\nexport const svg = merge([aria, svgBase, xlink, xmlns, xml], 'svg')\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = StyleToObject;\nconst inline_style_parser_1 = __importDefault(require(\"inline-style-parser\"));\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nfunction StyleToObject(style, iterator) {\n    let styleObject = null;\n    if (!style || typeof style !== 'string') {\n        return styleObject;\n    }\n    const declarations = (0, inline_style_parser_1.default)(style);\n    const hasIterator = typeof iterator === 'function';\n    declarations.forEach((declaration) => {\n        if (declaration.type !== 'declaration') {\n            return;\n        }\n        const { property, value } = declaration;\n        if (hasIterator) {\n            iterator(property, value, declaration);\n        }\n        else if (value) {\n            styleObject = styleObject || {};\n            styleObject[property] = value;\n        }\n    });\n    return styleObject;\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.camelCase = void 0;\nvar CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;\nvar HYPHEN_REGEX = /-([a-z])/g;\nvar NO_HYPHEN_REGEX = /^[^-]+$/;\nvar VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\nvar MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\n/**\n * Checks whether to skip camelCase.\n */\nvar skipCamelCase = function (property) {\n    return !property ||\n        NO_HYPHEN_REGEX.test(property) ||\n        CUSTOM_PROPERTY_REGEX.test(property);\n};\n/**\n * Replacer that capitalizes first character.\n */\nvar capitalize = function (match, character) {\n    return character.toUpperCase();\n};\n/**\n * Replacer that removes beginning hyphen of vendor prefix property.\n */\nvar trimHyphen = function (match, prefix) { return \"\".concat(prefix, \"-\"); };\n/**\n * CamelCases a CSS property.\n */\nvar camelCase = function (property, options) {\n    if (options === void 0) { options = {}; }\n    if (skipCamelCase(property)) {\n        return property;\n    }\n    property = property.toLowerCase();\n    if (options.reactCompat) {\n        // `-ms` vendor prefix should not be capitalized\n        property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\n    }\n    else {\n        // for non-React, remove first hyphen so vendor prefix is not capitalized\n        property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\n    }\n    return property.replace(HYPHEN_REGEX, capitalize);\n};\nexports.camelCase = camelCase;\n//# sourceMappingURL=utilities.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar style_to_object_1 = __importDefault(require(\"style-to-object\"));\nvar utilities_1 = require(\"./utilities\");\n/**\n * Parses CSS inline style to JavaScript object (camelCased).\n */\nfunction StyleToJS(style, options) {\n    var output = {};\n    if (!style || typeof style !== 'string') {\n        return output;\n    }\n    (0, style_to_object_1.default)(style, function (property, value) {\n        // skip CSS comment\n        if (property && value) {\n            output[(0, utilities_1.camelCase)(property, options)] = value;\n        }\n    });\n    return output;\n}\nStyleToJS.default = StyleToJS;\nmodule.exports = StyleToJS;\n//# sourceMappingURL=index.js.map","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file = ''\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual = undefined\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected = undefined\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note = undefined\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url = undefined\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToJs from 'style-to-js'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JsxElement}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  try {\n    return styleToJs(value, {reactCompat: true})\n  } catch (error) {\n    if (state.ignoreInvalidStyle) {\n      return {}\n    }\n\n    const cause = /** @type {Error} */ (error)\n    const message = new VFileMessage('Cannot parse `style` attribute', {\n      ancestors: state.ancestors,\n      cause,\n      ruleId: 'style',\n      source: 'hast-util-to-jsx-runtime'\n    })\n    message.file = state.filePath || undefined\n    message.url = docs + '#cannot-parse-style-attribute'\n\n    throw message\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {string | number} */ (result.value)\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/// <reference lib=\"dom\" />\n\n/* global document */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = \"\\uFFFD\";\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else if (otherEvent[1].type === \"linePrefix\" || otherEvent[1].type === \"listItemIndent\") {\n          // Move past.\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  let tokenizer = token._tokenizer;\n  if (!tokenizer) {\n    tokenizer = context.parser[token.contentType](token.start);\n    if (token._contentTypeTextTrailing) {\n      tokenizer._contentTypeTextTrailing = true;\n    }\n  }\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[content][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n\n      // Allow final trailing whitespace.\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\n        size = 0;\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n        /* c8 ignore next 4 -- used to be used, no longer */\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n      case 'ArrayBuffer':\n        return as(new Uint8Array(value).buffer, value);\n      case 'DataView': {\n        const { buffer } = new Uint8Array(value);\n        return as(new DataView(buffer), value);\n      }\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n    case 'DataView':\n      return [ARRAY, asString];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type) {\n          let spread = value;\n          if (type === 'DataView') {\n            spread = new Uint8Array(value.buffer);\n          }\n          else if (type === 'ArrayBuffer') {\n            spread = new Uint8Array(value);\n          }\n          return as([type, [...spread]], value);\n        }\n\n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * * if a processor is given,\n *   runs the (rehype) plugins used on it with a hast tree,\n *   then discards the result (*bridge mode*)\n * * otherwise,\n *   returns a hast tree,\n *   the plugins used after `remarkRehype` are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**:\n * > It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * * `rehype-stringify` also has an option `allowDangerousHtml` which will\n *   output the raw HTML.\n *   This is typically discouraged as noted by the option name but is useful if\n *   you completely trust authors\n * * `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *   into standard hast nodes (`element`, `text`, etc);\n *   this is a heavy task as it needs a full HTML parser,\n *   but it is the only way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark,\n * which we follow by default.\n * They are supported by GitHub,\n * so footnotes can be enabled in markdown with `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes,\n * which is hidden for sighted users but shown to assistive technology.\n * When your page is not in English,\n * you must define translated values.\n *\n * Back references use ARIA attributes,\n * but the section label itself uses a heading that is hidden with an\n * `sr-only` class.\n * To show it to sighted users,\n * define different attributes in `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem,\n * as it links footnote calls to footnote definitions on the page through `id`\n * attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * * when the node has a `value`\n *   (and doesn’t have `data.hName`, `data.hProperties`, or `data.hChildren`,\n *   see later),\n *   create a hast `text` node\n * * otherwise,\n *   create a `<div>` element (which could be changed with `data.hName`),\n *   with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @overload\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge | TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given,\n *   configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @import {Element, Nodes, Parents, Root} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {ComponentType, JSX, ReactElement, ReactNode} from 'react'\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\n * @import {BuildVisitor} from 'unist-util-visit'\n * @import {PluggableList, Processor} from 'unified'\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n */\n\n/**\n * @typedef ExtraProps\n *   Extra fields we pass.\n * @property {Element | undefined} [node]\n *   passed when `passNode` is on.\n */\n\n/**\n * @typedef {{\n *   [Key in keyof JSX.IntrinsicElements]?: ComponentType<JSX.IntrinsicElements[Key] & ExtraProps> | keyof JSX.IntrinsicElements\n * }} Components\n *   Map tag names to components.\n */\n\n/**\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n */\n\n/**\n * @typedef HooksOptionsOnly\n *   Configuration specifically for {@linkcode MarkdownHooks}.\n * @property {ReactNode | null | undefined} [fallback]\n *   Content to render while the processor processing the markdown (optional).\n */\n\n/**\n * @typedef {Options & HooksOptionsOnly} HooksOptions\n *   Configuration for {@linkcode MarkdownHooks};\n *   extends the regular {@linkcode Options} with a `fallback` prop.\n */\n\n/**\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport {useEffect, useState} from 'react'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {from: 'className', id: 'remove-classname'},\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * This is a synchronous component.\n * When using async plugins,\n * see {@linkcode MarkdownAsync} or {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nexport function Markdown(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  return post(processor.runSync(processor.parse(file), file), options)\n}\n\n/**\n * Component to render markdown with support for async plugins\n * through async/await.\n *\n * Components returning promises are supported on the server.\n * For async support on the client,\n * see {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Promise<ReactElement>}\n *   Promise to a React element.\n */\nexport async function MarkdownAsync(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  const tree = await processor.run(processor.parse(file), file)\n  return post(tree, options)\n}\n\n/**\n * Component to render markdown with support for async plugins through hooks.\n *\n * This uses `useEffect` and `useState` hooks.\n * Hooks run on the client and do not immediately render something.\n * For async support on the server,\n * see {@linkcode MarkdownAsync}.\n *\n * @param {Readonly<HooksOptions>} options\n *   Props.\n * @returns {ReactNode}\n *   React node.\n */\nexport function MarkdownHooks(options) {\n  const processor = createProcessor(options)\n  const [error, setError] = useState(\n    /** @type {Error | undefined} */ (undefined)\n  )\n  const [tree, setTree] = useState(/** @type {Root | undefined} */ (undefined))\n\n  useEffect(\n    function () {\n      let cancelled = false\n      const file = createFile(options)\n\n      processor.run(processor.parse(file), file, function (error, tree) {\n        if (!cancelled) {\n          setError(error)\n          setTree(tree)\n        }\n      })\n\n      /**\n       * @returns {undefined}\n       *   Nothing.\n       */\n      return function () {\n        cancelled = true\n      }\n    },\n    [\n      options.children,\n      options.rehypePlugins,\n      options.remarkPlugins,\n      options.remarkRehypeOptions\n    ]\n  )\n\n  if (error) throw error\n\n  return tree ? post(tree, options) : options.fallback\n}\n\n/**\n * Set up the `unified` processor.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Processor<MdastRoot, MdastRoot, Root, undefined, undefined>}\n *   Result.\n */\nfunction createProcessor(options) {\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  return processor\n}\n\n/**\n * Set up the virtual file.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {VFile}\n *   Result.\n */\nfunction createFile(options) {\n  const children = options.children || ''\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  return file\n}\n\n/**\n * Process the result from unified some more.\n *\n * @param {Nodes} tree\n *   Tree.\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nfunction post(tree, options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  visit(tree, transform)\n\n  return toJsxRuntime(tree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {BuildVisitor<Root>} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n          ? disallowedElements.includes(node.tagName)\n          : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon === -1 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash !== -1 && colon > slash) ||\n    (questionMark !== -1 && colon > questionMark) ||\n    (numberSign !== -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n"],"names":["ok","unreachable","nameRe","nameReJsx","emptyOptions","name","options","re","jsx","test","empty","value","replace","Schema","constructor","property","normal","space","this","merge","definitions","definition","Object","assign","normalize","toLowerCase","prototype","Info","attribute","booleanish","boolean","commaOrSpaceSeparated","commaSeparated","defined","mustUseProperty","number","overloadedBoolean","spaceSeparated","powers","increment","checks","keys","types","DefinedInfo","mask","index","super","mark","length","check","values","key","create","properties","normals","entries","info","transform","attributes","includes","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","_","slice","caseSensitiveTransform","caseInsensitiveTransform","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","content","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","default","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","list","loading","loop","low","manifest","max","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","size","sizes","slot","span","spellCheck","src","srcDoc","srcLang","srcSet","start","step","style","tabIndex","target","title","translate","type","typeMustMatch","useMap","width","wrap","writingSuggestions","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","code","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","end","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","from","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","result","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xmlns","xmlnsxlink","xmlnsXLink","xml","xmlBase","xmlLang","xmlSpace","hastToReact","cap","dash","valid","kebab","$0","camelcase","charAt","toUpperCase","htmlBase","svgBase","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","__importDefault","mod","__esModule","defineProperty","cjs","iterator","styleObject","declarations","inline_style_parser_1","hasIterator","forEach","declaration","TypeError","lineno","column","updatePosition","lines","match","i","lastIndexOf","position","line","node","Position","whitespace","source","error","msg","err","Error","reason","filename","silent","m","exec","comments","c","comment","push","pos","prop","val","ret","decl","decls","utilities","camelCase","CUSTOM_PROPERTY_REGEX","HYPHEN_REGEX","NO_HYPHEN_REGEX","VENDOR_PREFIX_REGEX","MS_VENDOR_PREFIX_REGEX","capitalize","character","trimHyphen","concat","skipCamelCase","reactCompat","style_to_object_1","require$$0","utilities_1","require$$1","StyleToJS","output","pointEnd","point","pointStart","stringifyPosition","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","message","ruleId","indexOf","parent","fatal","file","stack","actual","expected","note","url","own","hasOwnProperty","emptyMap","Map","tableElements","Set","tableCellElement","docs","toJsxRuntime","tree","Fragment","filePath","development","jsxDEV","props","isStaticChildren","Array","isArray","children","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","one","parentSchema","tagName","findComponentFromName","alignValue","call","createProperty","has","createElementProps","createChildren","child","thing","addNode","addChildren","pop","element","estree","expression","body","evaluateExpression","crashEstree","mdxExpression","ok$1","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","countsByName","count","get","set","Type","rest","dashes","find","Number","isNaN","settings","join","padRight","padLeft","commas","styleToJs","parseStyle","String","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","isIdentifierName","computed","Boolean","optional","toDash","urlAttributes","icon","includeImageAlt","includeHtml","all","document","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","charCodeAt","splice","remove","items","parameters","chunkStart","unshift","syntaxExtension","extension","hook","left","right","constructs","existing","before","add","decodeNumericCharacterReference","base","parseInt","fromCodePoint","normalizeIdentifier","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","fromCharCode","normalizeUri","skip","next","encodeURIComponent","factorySpace","effects","limit","POSITIVE_INFINITY","enter","consume","exit","tokenize","contentStart","attempt","parser","contentInitial","lineStart","previous","token","contentType","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","_tokenizer","flowContinue","writeToChild","endOfFile","stream","sliceStream","defineSkip","write","seen","entry","closeFlow","nok","disable","null","classifyCharacter","resolveAll","context","called","resolve","attention","group","openingSequence","closingSequence","use","nextEvents","_close","_open","sliceSerialize","movePoint","insideSpan","attentionMarkers","marker","inside","after","close","_bufferIndex","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","blankLine","partial","blockQuote","contBefore","_container","characterEscape","numeric","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","tail","sequenceOpen","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","codeIndented","afterPrefix","atBreak","furtherStart","codeText","tailExitIndex","headEnterIndex","between","SpliceBuffer","initial","RangeError","shift","setCursor","stop","reverse","deleteCount","Math","trunc","removed","chunkedPush","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","eventIndex","startPosition","startPositions","tokenizer","_contentTypeTextTrailing","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","hardBreakEscape","headingAtx","sequenceFurther","htmlBlockNames","htmlRawNames","htmlFlow","resolveTo","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","htmlText","returnState","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelEnd","newEvents","_inactive","_balanced","labelStart","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","labelStartLink","lineEnding","thematicBreak","sequence","furtherBlankLines","initialBlankLine","notInCurrentItem","indentConstruct","initialSize","atMarker","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","setextUnderline","heading","paragraph","flowInitial","afterConstruct","resolver","createResolver","initializeFactory","field","resolveAllLineSuffixes","notText","extraResolver","chunks","tabs","bufferIndex","chunk","_index","resolveText","createTokenizer","initialize","columnStart","resolveAllConstructs","constructFactory","construct","addResult","onsuccessfulcheck","fields","expandTabs","atTab","serializeChunks","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","sliceChunks","main","chunkIndex","go","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","accountForPotentialSkip","parse","extensions","defaultConstructs","search","characterEscapeOrReference","decode","$1","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","toString","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","atCarriageReturn","endPosition","TextDecoder","lastIndex","ceil","preprocess","combined","remarkParse","doc","revert","subtype","suffix","contents","listItemLoose","trimLines","last","trimLine","handlers","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","env","globalThis","deserialize","serialized","$","out","unpair","arr","Date","flags","RegExp","BigInt","Uint8Array","DataView","deserializer","EMPTY","asString","shouldSkip","TYPE","serialize","json","lossy","strict","pair","valueOf","toJSON","toISOString","serializer","structuredClone$1","structuredClone","any","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","convert","castFactory","tests","apply","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","CONTINUE","EXIT","visitParents","visitor","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","defaultHandlers","handle","passThrough","shallow","unknownHandler","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","hasOwn","toStr","gOPD","getOwnPropertyDescriptor","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","setProperty","enumerable","configurable","newValue","writable","getProperty","extend","copy","copyIsArray","clone","arguments","deep","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","middlewareIndex","callback","middleware","wrapped","fnExpectsCallback","done","then","middelware","minpath","basename","extname","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","segments","joined","assertPath$1","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","stringify","minproc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","setPrototypeOf","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","processor","rehypePlugins","remarkPlugins","remarkRehypeOptions","createProcessor","createFile","allowedElements","allowElement","disallowedElements","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","deprecation","post","colon","questionMark","numberSign"],"mappings":"uFAMO,SAASA,IAAO,CAEhB,SAASC,IAAc,CCE9B,MAAMC,EAAS,0DACTC,EAAY,2DAGZC,EAAe,CAAE,EA0ChB,SAASC,EAAKA,EAAMC,GAGlBC,QAFUD,GAAWF,GACRI,IAAML,EAAYD,GAC5BO,KAAKJ,EACjB,CCtDA,MAAME,EAAK,eAyBX,SAASG,EAAMC,GACb,MAAiC,KAA1BA,EAAMC,QAAQL,EAAI,GAC3B,CC5BO,MAAMM,EAWX,WAAAC,CAAYC,EAAUC,EAAQC,GAC5BC,KAAKF,OAASA,EACdE,KAAKH,SAAWA,EAEZE,IACFC,KAAKD,MAAQA,EAEhB,ECTI,SAASE,EAAMC,EAAaH,GAEjC,MAAMF,EAAW,CAAE,EAEbC,EAAS,CAAE,EAEjB,IAAA,MAAWK,KAAcD,EAChBE,OAAAC,OAAOR,EAAUM,EAAWN,UAC5BO,OAAAC,OAAOP,EAAQK,EAAWL,QAGnC,OAAO,IAAIH,EAAOE,EAAUC,EAAQC,EACtC,CCjBO,SAASO,EAAUb,GACxB,OAAOA,EAAMc,aACf,CFeAZ,EAAOa,UAAUV,OAAS,CAAE,EAC5BH,EAAOa,UAAUX,SAAW,CAAE,EAC9BF,EAAOa,UAAUT,WAAQ,EGvBlB,MAAMU,EASX,WAAAb,CAAYC,EAAUa,GACpBV,KAAKU,UAAYA,EACjBV,KAAKH,SAAWA,CACjB,EAGHY,EAAKD,UAAUE,UAAY,GAC3BD,EAAKD,UAAUG,YAAa,EAC5BF,EAAKD,UAAUI,SAAU,EACzBH,EAAKD,UAAUK,uBAAwB,EACvCJ,EAAKD,UAAUM,gBAAiB,EAChCL,EAAKD,UAAUO,SAAU,EACzBN,EAAKD,UAAUQ,iBAAkB,EACjCP,EAAKD,UAAUS,QAAS,EACxBR,EAAKD,UAAUU,mBAAoB,EACnCT,EAAKD,UAAUX,SAAW,GAC1BY,EAAKD,UAAUW,gBAAiB,EAChCV,EAAKD,UAAUT,WAAQ,EC/BvB,IAAIqB,EAAS,EAEN,MAAMR,EAAUS,IACVV,EAAaU,IACbH,EAAoBG,IACpBJ,EAASI,IACTF,EAAiBE,IACjBP,EAAiBO,IACjBR,EAAwBQ,IAErC,SAASA,IACP,OAAO,KAAOD,CAChB,kNCLME,EACJlB,OAAOmB,KAAKC,GAGP,MAAMC,UAAoBhB,EAc/B,WAAAb,CAAYC,EAAUa,EAAWgB,EAAM3B,GACrC,IAAI4B,GAAQ,EAMR,GAJJC,MAAM/B,EAAUa,GAEXmB,EAAA7B,KAAM,QAASD,GAEA,iBAAT2B,EACF,OAAEC,EAAQL,EAAOQ,QAAQ,CACxB,MAAAC,EAAQT,EAAOK,GAChBE,EAAA7B,KAAMsB,EAAOK,IAASD,EAAOF,EAAMO,MAAYP,EAAMO,GAC3D,CAEJ,EAiBH,SAASF,EAAKG,EAAQC,EAAKxC,GACrBA,IACFuC,EAAOC,GAAOxC,EAElB,CCnBO,SAASyC,EAAO/B,GAErB,MAAMgC,EAAa,CAAE,EAEfC,EAAU,CAAE,EAEP,IAAA,MAACvC,EAAUJ,KAAUW,OAAOiC,QAAQlC,EAAWgC,YAAa,CACrE,MAAMG,EAAO,IAAIb,EACf5B,EACAM,EAAWoC,UAAUpC,EAAWqC,YAAc,CAAA,EAAI3C,GAClDJ,EACAU,EAAWJ,OAIXI,EAAWa,iBACXb,EAAWa,gBAAgByB,SAAS5C,KAEpCyC,EAAKtB,iBAAkB,GAGzBmB,EAAWtC,GAAYyC,EAEfhC,EAAAA,EAAUT,IAAaA,EAC/BuC,EAAQ9B,EAAUgC,EAAK5B,YAAcb,CACtC,CAED,OAAO,IAAIF,EAAOwC,EAAYC,EAASjC,EAAWJ,MACpD,CD3BA0B,EAAYjB,UAAUO,SAAU,EEtCzB,MAAM2B,EAAOR,EAAO,CACzBC,WAAY,CACVQ,qBAAsB,KACtBC,WAAYjC,EACZkC,iBAAkB,KAClBC,SAAUnC,EACVoC,YAAapC,EACbqC,aAAc/B,EACdgC,aAAchC,EACdiC,YAAajC,EACbkC,aAAchC,EACdiC,YAAa,KACbC,gBAAiBlC,EACjBmC,YAAa,KACbC,aAAc5C,EACd6C,eAAgBrC,EAChBsC,iBAAkB,KAClBC,aAAc/C,EACdgD,WAAYxC,EACZyC,YAAajD,EACbkD,aAAc,KACdC,WAAYnD,EACZoD,YAAa,KACbC,iBAAkB,KAClBC,UAAW,KACXC,eAAgB/C,EAChBgD,UAAWlD,EACXmD,SAAU,KACVC,UAAW1D,EACX2D,cAAe3D,EACf4D,oBAAqB5D,EACrB6D,gBAAiB,KACjBC,SAAUtD,EACVuD,gBAAiB,KACjBC,aAAc1D,EACd2D,YAAajE,EACbkE,aAAclE,EACdmE,aAAc,KACdC,aAAcpE,EACdqE,oBAAqB7D,EACrB8D,aAAchE,EACdiE,aAAcjE,EACdkE,YAAalE,EACbmE,aAAczE,EACd0E,YAAapE,EACbqE,SAAU,KACVC,aAActE,EACduE,aAAcvE,EACdwE,aAAcxE,EACdyE,cAAe,KACfC,KAAM,MAERpD,UAAA,CAAUqD,EAAG/F,IACS,SAAbA,EACHA,EACA,QAAUA,EAASgG,MAAM,GAAGtF,gBClD7B,SAASuF,EAAuBtD,EAAY9B,GACjD,OAAOA,KAAa8B,EAAaA,EAAW9B,GAAaA,CAC3D,CCAO,SAASqF,EAAyBvD,EAAY3C,GACnD,OAAOiG,EAAuBtD,EAAY3C,EAASU,cACrD,CCDO,MAAMyF,EAAO9D,EAAO,CACzBM,WAAY,CACVyD,cAAe,iBACfC,UAAW,QACXC,QAAS,MACTC,UAAW,cAEbpF,gBAAiB,CAAC,UAAW,WAAY,QAAS,YAClDmB,WAAY,CAEVkE,KAAM,KACNC,OAAQxF,EACRyF,cAAepF,EACfqF,UAAWrF,EACXsF,OAAQ,KACRC,MAAO,KACPC,gBAAiB/F,EACjBgG,oBAAqBhG,EACrBiG,eAAgBjG,EAChBkG,IAAK,KACLC,GAAI,KACJC,MAAOpG,EACPqG,eAAgB,KAChBC,aAAc/F,EACdgG,UAAWvG,EACXwG,SAAUxG,EACVyG,SAAUlG,EACVmG,QAAS,KACTC,QAAS,KACTC,QAAS5G,EACT6G,KAAM,KACNC,UAAWvG,EACXwG,KAAM1G,EACN2G,QAAS,KACTC,QAAS,KACTC,gBAAiBnH,EACjBoH,SAAUnH,EACVoH,aAAc7G,EACd8G,OAAQhH,EAASH,EACjBoH,YAAa,KACbC,KAAM,KACNC,SAAU,KACVC,SAAU,KACVC,QAAS1H,EACT2H,MAAO3H,EACP4H,IAAK,KACLC,QAAS,KACTC,SAAU9H,EACV+H,SAAUzH,EACV0H,UAAWjI,EACXkI,QAAS,KACTC,aAAc,KACdC,cAAe,KACfC,KAAM,KACNC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,eAAgBxI,EAChByI,WAAY,KACZC,QAASnI,EACToI,OAAQtI,EACRuI,OAAQtI,EACRuI,KAAMxI,EACNyI,KAAM,KACNC,SAAU,KACVC,QAASzI,EACT0I,UAAW1I,EACX2I,GAAI,KACJC,WAAY,KACZC,YAAa,KACbC,MAAOrJ,EACPsJ,UAAW,KACXC,UAAW,KACXC,GAAI,KACJC,MAAOzJ,EACP0J,OAAQ,KACRC,SAAUpJ,EACVqJ,QAASrJ,EACTsJ,UAAW7J,EACX8J,SAAUvJ,EACVwJ,KAAM,KACNC,MAAO,KACPC,KAAM,KACNC,SAAU,KACVC,KAAM,KACNC,QAAS,KACTC,KAAMrK,EACNsK,IAAKjK,EACLkK,SAAU,KACVC,IAAK,KACLC,UAAWpK,EACXqK,MAAO,KACPC,OAAQ,KACRC,IAAK,KACLC,UAAWxK,EACXyK,SAAU9K,EACV+K,MAAO/K,EACPzB,KAAM,KACNyM,MAAO,KACPC,SAAUjL,EACVkL,WAAYlL,EACZmL,QAAS,KACTC,aAAc,KACdC,WAAY,KACZC,cAAe,KACfC,cAAe,KACfC,eAAgB,KAChBC,eAAgB,KAChBC,OAAQ,KACRC,SAAU,KACVC,UAAW,KACXC,iBAAkB,KAClBC,SAAU,KACVC,QAAS,KACTC,QAAS,KACTC,cAAe,KACfC,cAAe,KACfC,kBAAmB,KACnBC,OAAQ,KACRC,YAAa,KACbC,MAAO,KACPC,WAAY,KACZC,OAAQ,KACRC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,OAAQ,KACRC,iBAAkB,KAClBC,UAAW,KACXC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,WAAY,KACZC,aAAc,KACdC,QAAS,KACTC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,QAAS,KACTC,iBAAkB,KAClBC,OAAQ,KACRC,aAAc,KACdC,iBAAkB,KAClBC,UAAW,KACXC,YAAa,KACbC,UAAW,KACXC,eAAgB,KAChBC,YAAa,KACbC,aAAc,KACdC,aAAc,KACdC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,QAAS,KACTC,QAAS,KACTC,OAAQ,KACRC,UAAW,KACXC,WAAY,KACZC,WAAY,KACZC,aAAc,KACdC,mBAAoB,KACpBC,QAAS,KACTC,SAAU,KACVC,SAAU,KACVC,YAAa,KACbC,0BAA2B,KAC3BC,SAAU,KACVC,UAAW,KACXC,SAAU,KACVC,aAAc,KACdC,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,UAAW,KACXC,aAAc,KACdC,SAAU,KACVC,qBAAsB,KACtBC,SAAU,KACVC,eAAgB,KAChBC,UAAW,KACXC,QAAS,KACTC,KAAM3Q,EACN4Q,QAASvQ,EACTwQ,QAAS,KACTC,KAAMvQ,EACNwQ,YAAa,KACbC,YAAahR,EACbiR,QAAS,KACTC,cAAe,KACfC,oBAAqB,KACrBC,OAAQ,KACRC,QAAS,KACTC,SAAUtR,EACVuR,eAAgB,KAChBC,IAAKjR,EACLkR,SAAUzR,EACV0R,SAAU1R,EACV2R,KAAMtR,EACNuR,QAASvR,EACTwR,QAAStR,EACTuR,MAAO,KACPC,OAAQ/R,EACRgS,SAAUhS,EACViS,SAAUjS,EACVkS,mBAAoBlS,EACpBmS,yBAA0BnS,EAC1BoS,eAAgB,KAChBC,MAAO,KACPC,KAAMjS,EACNkS,MAAO,KACPC,KAAM,KACNC,KAAMpS,EACNqS,WAAY3S,EACZ4S,IAAK,KACLC,OAAQ,KACRC,QAAS,KACTC,OAAQ,KACRC,MAAO1S,EACP2S,KAAM,KACNC,MAAO,KACPC,SAAU7S,EACV8S,OAAQ,KACRC,MAAO,KACPC,UAAW,KACXC,KAAM,KACNC,cAAevT,EACfwT,OAAQ,KACR3U,MAAOkB,EACP0T,MAAOpT,EACPqT,KAAM,KACNC,mBAAoB,KAIpBC,MAAO,KACPC,MAAO,KACPC,QAASvT,EACTwT,KAAM,KACNC,WAAY,KACZC,QAAS,KACTC,OAAQ7T,EACR8T,YAAa,KACbC,aAAc/T,EACdgU,YAAa,KACbC,YAAa,KACbC,KAAM,KACNC,QAAS,KACTC,QAAS,KACTC,MAAO,KACPC,KAAM,KACNC,SAAU,KACVC,SAAU,KACVC,MAAO,KACPC,QAAS/U,EACTgV,QAAShV,EACTiV,MAAO,KACPC,KAAM,KACNC,MAAO,KACPC,YAAa,KACbC,OAAQhV,EACRiV,WAAYjV,EACZkV,KAAM,KACNC,SAAU,KACVC,OAAQ,KACRC,aAAcrV,EACdsV,YAAatV,EACbuV,SAAU5V,EACV6V,OAAQ7V,EACR8V,QAAS9V,EACT+V,OAAQ/V,EACRgW,OAAQ,KACRC,QAAS,KACTC,OAAQ,KACRC,IAAK,KACLC,YAAa/V,EACbgW,MAAO,KACPC,OAAQ,KACRC,UAAWxW,EACXyW,QAAS,KACTC,QAAS,KACTC,KAAM,KACNC,UAAWtW,EACXuW,UAAW,KACXC,QAAS,KACTC,OAAQ,KACRC,MAAO,KACPC,OAAQ3W,EAGR4W,kBAAmB,KACnBC,YAAa,KACbC,SAAU,KACVC,wBAAyBpX,EACzBqX,sBAAuBrX,EACvBsX,OAAQ,KACRrY,SAAU,KACVsY,QAASlX,EACTmX,SAAU,KACVC,aAAc,MAEhBtY,MAAO,OACPwC,UAAWwD,ICtTAuS,EAAMpW,EAAO,CACxBM,WAAY,CACV+V,aAAc,gBACdC,kBAAmB,qBACnBC,WAAY,cACZC,cAAe,iBACfC,UAAW,aACXjR,UAAW,QACXkR,SAAU,YACVC,SAAU,YACVC,mBAAoB,sBACpBC,0BAA2B,8BAC3BC,aAAc,gBACdC,eAAgB,kBAChB/Q,YAAa,cACbgR,SAAU,WACVC,iBAAkB,oBAClBC,iBAAkB,oBAClBC,YAAa,eACbC,SAAU,YACVC,WAAY,cACZC,aAAc,gBACdC,WAAY,cACZC,SAAU,YACVC,eAAgB,mBAChBC,YAAa,eACbC,UAAW,aACXC,YAAa,eACbC,WAAY,cACZC,UAAW,aACXC,2BAA4B,+BAC5BC,yBAA0B,6BAC1BvQ,SAAU,WACVwQ,UAAW,cACXC,aAAc,iBACdC,aAAc,iBACdC,eAAgB,kBAChBC,cAAe,iBACfC,cAAe,iBACfC,UAAW,aACXC,UAAW,aACXC,YAAa,eACbC,QAAS,WACTC,YAAa,gBACbC,aAAc,iBACdC,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,SAAU,YACVC,MAAO,SACPC,UAAW,cACXC,WAAY,eACZtP,QAAS,UACTuP,WAAY,aACZtP,aAAc,eACdG,cAAe,gBACfoP,QAAS,UACThP,SAAU,WACVC,UAAW,YACXC,iBAAkB,mBAClBC,SAAU,WACVC,QAAS,UACTC,QAAS,UACTI,OAAQ,SACRC,YAAa,cACbC,MAAO,QACPC,WAAY,aACZC,OAAQ,SACRC,UAAW,YACXC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,OAAQ,SACRC,iBAAkB,mBAClBC,UAAW,YACX2N,MAAO,QACP1N,QAAS,UACTC,QAAS,UACTC,QAAS,UACTyN,UAAW,YACXC,WAAY,aACZxN,aAAc,eACdC,QAAS,UACTC,UAAW,YACXC,UAAW,YACXC,WAAY,aACZC,QAAS,UACTE,OAAQ,SACRC,aAAc,eACdC,iBAAkB,mBAClBE,YAAa,cACbC,UAAW,YACXE,YAAa,cACbC,aAAc,eACdC,aAAc,eACdC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,UAAW,YACXqM,aAAc,eACdpM,UAAW,YACXC,SAAU,WACVC,WAAY,aACZC,WAAY,aACZC,QAAS,UACTC,QAAS,UACTC,OAAQ,SACRC,UAAW,YACXC,WAAY,aACZC,WAAY,aACZC,aAAc,eACd2L,SAAU,WACVzL,QAAS,UACTC,SAAU,WACVC,SAAU,WACVG,SAAU,WACVC,UAAW,YACXC,SAAU,WACVmL,OAAQ,SACRjL,UAAW,YACXC,UAAW,YACXC,SAAU,WACVC,UAAW,YACXC,aAAc,eACdC,SAAU,WACVE,SAAU,WACVC,eAAgB,iBAChBC,UAAW,YACXyK,OAAQ,SACRC,iBAAkB,oBAClBC,kBAAmB,qBACnBC,WAAY,cACZC,QAAS,WACTC,cAAe,iBACfhK,eAAgB,iBAChBiK,gBAAiB,mBACjBC,eAAgB,kBAChBC,UAAW,aACXC,YAAa,eACbC,sBAAuB,yBACvBC,uBAAwB,0BACxBC,gBAAiB,mBACjBC,iBAAkB,oBAClBC,cAAe,iBACfC,eAAgB,kBAChBC,iBAAkB,oBAClBC,cAAe,iBACfC,YAAa,eACblJ,SAAU,WACVmJ,WAAY,cACZC,eAAgB,kBAChBC,cAAe,iBACfC,gBAAiB,mBACjBC,OAAQ,SACRC,kBAAmB,qBACnBC,mBAAoB,sBACpBC,YAAa,eACbC,aAAc,gBACdC,WAAY,eACZC,YAAa,eACbC,SAAU,YACVC,aAAc,gBACdC,cAAe,iBACfC,aAAc,gBACdC,SAAU,aACVC,YAAa,gBACbC,YAAa,gBACbC,YAAa,eACbC,YAAa,eACbC,QAAS,WAETC,cAAe,gBACfC,cAAe,iBAEjBpc,WAAY,CACVqc,MAAO3d,EACP0X,aAActX,EACdwd,WAAY,KACZC,SAAU,KACVlG,kBAAmB,KACnBmG,WAAY1d,EACZ2d,UAAW3d,EACXwX,WAAY,KACZoG,OAAQ5d,EACR6d,cAAe,KACfC,cAAe,KACfC,QAAS/d,EACTge,UAAW,KACXvG,cAAe,KACfwG,cAAe,KACfC,YAAa,KACbC,KAAM,KACNC,MAAO,KACPC,KAAMre,EACNse,GAAI,KACJC,SAAU,KACV7G,UAAW1X,EACXyG,UAAWvG,EACXse,KAAM,KACN7G,SAAU,KACV8G,cAAe,KACf7G,SAAU,KACVnD,MAAO,KACPoD,mBAAoB,KACpBC,0BAA2B,KAC3BC,aAAc,KACdC,eAAgB,KAChBpR,QAAS,KACT8X,kBAAmB,KACnBC,iBAAkB,KAClB1X,YAAa,KACb2X,OAAQ,KACRC,GAAI,KACJC,GAAI,KACJC,EAAG,KACH9G,SAAU,KACV+G,cAAe,KACfC,QAASjf,EACTkf,gBAAiBlf,EACjBmf,UAAW,KACXC,QAAS,KACTC,IAAK,KACLC,QAAStf,EACTkY,iBAAkB,KAClBxQ,SAAU/H,EACV4f,GAAI,KACJC,GAAI,KACJC,SAAU,KACVC,SAAU,KACVC,UAAW3f,EACXmY,iBAAkB,KAClByH,IAAK,KACLhL,MAAO,KACPiL,SAAU7f,EACV8f,0BAA2B,KAC3BC,KAAM,KACN3H,YAAapY,EACbqY,SAAU,KACV2H,OAAQ,KACRC,UAAW,KACXC,YAAa,KACb5H,WAAY,KACZC,aAAc,KACd4H,UAAW,KACXC,eAAgB,KAChB5H,WAAY,KACZC,SAAU,KACVC,eAAgB,KAChBC,YAAa,KACbC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZuH,OAAQ,KACRC,GAAI,KACJC,KAAM,KACNC,GAAI,KACJC,GAAI,KACJC,GAAI7gB,EACJ8gB,GAAI9gB,EACJkZ,UAAWlZ,EACXmZ,2BAA4B,KAC5BC,yBAA0B,KAC1B2H,SAAU,KACVC,kBAAmB,KACnBC,cAAe,KACfC,QAAS,KACTC,QAAShhB,EACTihB,kBAAmB,KACnBC,WAAY,KACZ5Y,OAAQ,KACRG,KAAM,KACNC,SAAU,KACVwQ,UAAWlZ,EACXmZ,aAAcnZ,EACdoZ,aAAcpZ,EACd6I,GAAI,KACJsY,YAAanhB,EACbqZ,eAAgB,KAChB+H,kBAAmB,KACnBC,GAAI,KACJC,IAAK,KACLC,UAAWvhB,EACXwhB,EAAGxhB,EACHyhB,GAAIzhB,EACJ0hB,GAAI1hB,EACJ2hB,GAAI3hB,EACJ4hB,GAAI5hB,EACJ6hB,aAAcjiB,EACdkiB,iBAAkB,KAClBC,UAAW,KACXC,WAAY,KACZC,SAAU,KACVC,QAAS,KACTtY,KAAM,KACNuY,aAAc,KACd7I,cAAe,KACfC,cAAe,KACf6I,kBAAmBpiB,EACnBqiB,MAAO,KACP7I,UAAW,KACXC,UAAW,KACXC,YAAa,KACb4I,aAAc,KACdC,YAAa,KACbC,YAAa,KACb/hB,KAAM,KACNgiB,iBAAkB,KAClBC,UAAW,KACXC,aAAc,KACdxY,IAAK,KACLE,MAAO,KACPuY,uBAAwB,KACxBC,sBAAuB,KACvBC,UAAW9iB,EACX+iB,UAAW,KACXzY,OAAQ,KACRC,IAAK,KACLyY,KAAM,KACN9kB,KAAM,KACNyb,QAAS,KACTC,YAAa,KACbC,aAAc,KACdC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,SAAU,KACVC,MAAO,KACPC,UAAW,KACXC,WAAY,KACZ6I,WAAY,KACZC,SAAU,KACVC,OAAQ,KACRrY,QAAS,KACTuP,WAAY,KACZtP,aAAc,KACdG,cAAe,KACfoP,QAAS,KACThP,SAAU,KACVC,UAAW,KACXC,iBAAkB,KAClBC,SAAU,KACVC,QAAS,KACTC,QAAS,KACTI,OAAQ,KACRC,YAAa,KACbC,MAAO,KACPC,WAAY,KACZC,OAAQ,KACRC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,OAAQ,KACRC,iBAAkB,KAClBC,UAAW,KACX2N,MAAO,KACP1N,QAAS,KACTC,QAAS,KACTC,QAAS,KACTyN,UAAW,KACXC,WAAY,KACZxN,aAAc,KACdC,QAAS,KACTC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,QAAS,KACTE,OAAQ,KACRC,aAAc,KACdC,iBAAkB,KAClBE,YAAa,KACbC,UAAW,KACXE,YAAa,KACbC,aAAc,KACdC,aAAc,KACdC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,UAAW,KACXqM,aAAc,KACdpM,UAAW,KACXC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,QAAS,KACTC,QAAS,KACTC,OAAQ,KACRC,UAAW,KACXC,WAAY,KACZC,WAAY,KACZC,aAAc,KACd2L,SAAU,KACVzL,QAAS,KACTC,SAAU,KACVC,SAAU,KACVG,SAAU,KACVC,UAAW,KACXC,SAAU,KACVmL,OAAQ,KACRjL,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,UAAW,KACXC,aAAc,KACdC,SAAU,KACVE,SAAU,KACVC,eAAgB,KAChBC,UAAW,KACXyK,OAAQ,KACRuI,QAAS,KACTC,SAAU,KACVC,MAAO,KACPC,OAAQ,KACRC,YAAa,KACbC,OAAQ,KACRC,SAAU,KACVC,QAAS,KACT7I,iBAAkB9a,EAClB+a,kBAAmB/a,EACnBgb,WAAY,KACZC,QAAS,KACT2I,KAAM,KACNC,WAAY7jB,EACZ8jB,oBAAqB,KACrBC,iBAAkB,KAClBC,aAAc,KACdC,MAAO,KACPxT,KAAMvQ,EACNgkB,MAAO,KACP7G,cAAe,KACfnC,cAAe,KACfiJ,OAAQ,KACRC,UAAWpkB,EACXqkB,UAAWrkB,EACXskB,UAAWtkB,EACXukB,cAAe,KACfC,oBAAqB,KACrBC,eAAgB,KAChBC,UAAW,KACX9lB,SAAUgB,EACV+kB,EAAG,KACHC,OAAQ,KACR1T,eAAgB,KAChB2T,KAAM,KACNC,KAAM,KACN3T,IAAKvR,EACLkW,IAAKlW,EACLub,gBAAiB,KACjB4J,YAAa,KACbC,UAAW,KACXC,mBAAoBrlB,EACpBslB,iBAAkBtlB,EAClBulB,cAAevlB,EACfwlB,gBAAiBxlB,EACjBylB,SAAU,KACVC,QAAS,KACTC,OAAQ,KACRC,OAAQ,KACRC,GAAI,KACJC,GAAI,KACJC,MAAO,KACPC,KAAM,KACNxK,eAAgB,KAChByK,KAAM,KACNC,MAAO,KACPC,aAAc,KACdC,iBAAkBhmB,EAClBimB,iBAAkBjmB,EAClBkmB,aAAc,KACdC,QAAS,KACTC,YAAa,KACbC,aAAc,KACdC,MAAO,KACPC,MAAO,KACPC,YAAa,KACbnL,UAAW,KACXC,YAAa,KACbC,sBAAuBvb,EACvBwb,uBAAwBxb,EACxBymB,OAAQ,KACRC,OAAQ,KACRjL,gBAAiB7b,EACjB8b,iBAAkB,KAClBC,cAAe,KACfC,eAAgB,KAChBC,iBAAkB7b,EAClB8b,cAAe9b,EACf+b,YAAa,KACbnJ,MAAO,KACP+T,aAAc3mB,EACd4mB,aAAc,KACdC,oBAAqB,KACrBC,WAAY,KACZC,cAAe,KACfC,qBAAsB,KACtBC,eAAgBrnB,EAChBiT,SAAU7S,EACVknB,YAAa,KACbpU,OAAQ,KACRqU,QAASnnB,EACTonB,QAASpnB,EACTgc,WAAY,KACZC,eAAgB,KAChBC,cAAe,KACfmL,WAAY,KACZ/J,cAAe,KACfvK,MAAO,KACPuU,kBAAmB,KACnBrU,KAAM,KACNmJ,OAAQxc,EACR2nB,GAAI,KACJjmB,UAAW,KACX6a,gBAAiB,KACjBqL,GAAI,KACJC,GAAI,KACJpL,kBAAmBrc,EACnBsc,mBAAoBtc,EACpB0nB,QAAS,KACTnL,YAAa,KACbC,aAAc,KACdC,WAAYzc,EACZe,OAAQ,KACR2b,YAAa1c,EACb6c,cAAe7c,EACf8c,aAAc,KACdH,SAAU3c,EACV4c,aAAc5c,EACdwW,QAAS,KACTuG,SAAU/c,EACVgd,YAAahd,EACbid,YAAajd,EACb2nB,QAAS,KACTC,WAAY,KACZC,WAAY,KACZzU,MAAO,KACP0U,OAAQ,KACR5K,YAAa,KACbC,YAAa,KACb4K,EAAG,KACHC,GAAI,KACJC,GAAI,KACJC,iBAAkB,KAClB9K,QAASpd,EACTmoB,EAAG,KACHC,GAAI,KACJC,GAAI,KACJC,iBAAkB,KAClBC,EAAG,KACHC,WAAY,MAEd1pB,MAAO,MACPwC,UAAWuD,ICnjBA4jB,EAAQxnB,EAAO,CAC1BC,WAAY,CACVwnB,aAAc,KACdC,aAAc,KACdC,UAAW,KACXC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,UAAW,MAEblqB,MAAO,QACPwC,UAAA,CAAUqD,EAAG/F,IACJ,SAAWA,EAASgG,MAAM,GAAGtF,gBCX3B2pB,EAAQhoB,EAAO,CAC1BM,WAAY,CAAC2nB,WAAY,eACzBhoB,WAAY,CAACioB,WAAY,KAAMF,MAAO,MACtCnqB,MAAO,QACPwC,UAAWwD,ICLAskB,EAAMnoB,EAAO,CACxBC,WAAY,CAACmoB,QAAS,KAAMC,QAAS,KAAMC,SAAU,MACrDzqB,MAAO,MACPwC,UAAA,CAAUqD,EAAG/F,IACJ,OAASA,EAASgG,MAAM,GAAGtF,gBCKzBkqB,EAAc,CACzBpV,QAAS,UACT6D,SAAU,WACV5O,OAAQ,SACRoS,gBAAiB,kBACjBC,iBAAkB,mBAClBC,cAAe,gBACfC,eAAgB,iBAChBC,iBAAkB,mBAClBO,OAAQ,SACRsM,aAAc,eACdC,aAAc,eACdC,UAAW,YACXC,UAAW,YACXC,UAAW,YACXC,WAAY,aACZC,UAAW,YACXG,WAAY,cCpBRM,EAAM,SACNC,EAAO,UACPC,EAAQ,kBA0Ed,SAASC,EAAMC,GACN,MAAA,IAAMA,EAAGvqB,aAClB,CAQA,SAASwqB,EAAUD,GACjB,OAAOA,EAAGE,OAAO,GAAGC,aACtB,CCrFO,MAAMjlB,EAAO/F,EAAM,CAACyC,EAAMwoB,EAAUxB,EAAOQ,EAAOG,GAAM,QAKlD/R,EAAMrY,EAAM,CAACyC,EAAMyoB,EAASzB,EAAOQ,EAAOG,GAAM,gBCdzDe,EAAgB,kCAEhBC,EAAgB,MAChBC,EAAmB,OAGnBC,EAAiB,yCACjBC,EAAc,QACdC,EAAc,uDACdC,EAAkB,UAGlBC,EAAa,aAMbC,GAAe,GA8OnB,SAASC,GAAKC,GACZ,OAAOA,EAAMA,EAAIpsB,QAAQisB,EAAYC,IAAgBA,EACvD,CCnQA,IAAIG,GAAmB/rB,GAAQA,EAAK+rB,iBAAoB,SAAUC,GAC9D,OAAQA,GAAOA,EAAIC,WAAcD,EAAM,CAAE1jB,QAAW0jB,EACxD,EACA5rB,OAAO8rB,eAAeC,EAAS,aAAc,CAAE1sB,OAAO,IACvC0sB,EAAA7jB,QAgBf,SAAuBuL,EAAOuY,GAC1B,IAAIC,EAAc,KAClB,IAAKxY,GAA0B,iBAAVA,EACV,OAAAwY,EAEX,MAAMC,GAAmB,EAAAC,GAAsBjkB,SAASuL,GAClD2Y,EAAkC,mBAAbJ,EAcpB,OAbME,EAAAG,QAASC,IACd,GAAqB,gBAArBA,EAAYxY,KACZ,OAEE,MAAArU,SAAEA,EAAUJ,MAAAA,GAAUitB,EACxBF,EACSJ,EAAAvsB,EAAUJ,EAAOitB,GAErBjtB,IACL4sB,EAAcA,GAAe,GAC7BA,EAAYxsB,GAAYJ,KAGzB4sB,CACX,EApCA,MAAME,GAAwBR,GD2Bb,SAAUlY,EAAOzU,GAC5B,GAAiB,iBAAVyU,EACH,MAAA,IAAI8Y,UAAU,mCAGtB,IAAK9Y,EAAO,MAAO,GAEnBzU,EAAUA,GAAW,GAKrB,IAAIwtB,EAAS,EACTC,EAAS,EAOb,SAASC,EAAehB,GAClB,IAAAiB,EAAQjB,EAAIkB,MAAM3B,GAClB0B,IAAOH,GAAUG,EAAMjrB,QACvB,IAAAmrB,EAAInB,EAAIoB,YAvCF,MAwCVL,GAAUI,EAAInB,EAAIhqB,OAASmrB,EAAIJ,EAASf,EAAIhqB,MAC7C,CAOD,SAASqrB,IACP,IAAIxZ,EAAQ,CAAEyZ,KAAMR,EAAQC,UAC5B,OAAO,SAAUQ,GAGRA,OAFPA,EAAKF,SAAW,IAAIG,EAAS3Z,GAC7B4Z,IACOF,CACb,CACG,CAUD,SAASC,EAAS3Z,GAChB3T,KAAK2T,MAAQA,EACb3T,KAAK6gB,IAAM,CAAEuM,KAAMR,EAAQC,UAC3B7sB,KAAKwtB,OAASpuB,EAAQouB,MACvB,CAeD,SAASC,EAAMC,GACb,IAAIC,EAAM,IAAIC,MACZxuB,EAAQouB,OAAS,IAAMZ,EAAS,IAAMC,EAAS,KAAOa,GAQxD,GANAC,EAAIE,OAASH,EACbC,EAAIG,SAAW1uB,EAAQouB,OACvBG,EAAIP,KAAOR,EACXe,EAAId,OAASA,EACbc,EAAIH,OAAS3Z,GAETzU,EAAQ2uB,OAGJ,MAAAJ,CAET,CAQD,SAASX,EAAM3tB,GACT,IAAA2uB,EAAI3uB,EAAG4uB,KAAKpa,GAChB,GAAKma,EAAL,CACI,IAAAlC,EAAMkC,EAAE,GAGL,OAFPlB,EAAehB,GACPjY,EAAAA,EAAMhO,MAAMimB,EAAIhqB,QACjBksB,CAJC,CAKT,CAKD,SAAST,IACPP,EAAM1B,EACP,CAQD,SAAS4C,EAASjX,GACZ,IAAAkX,EAEI,IADRlX,EAAQA,GAAS,GACTkX,EAAIC,MACA,IAAND,GACFlX,EAAMoX,KAAKF,GAGR,OAAAlX,CACR,CAQD,SAASmX,IACP,IAAIE,EAAMnB,IACN,GAnJY,KAmJKtZ,EAAMmX,OAAO,IAlJvB,KAkJyCnX,EAAMmX,OAAO,GAA7D,CAGJ,IADA,IAAIiC,EAAI,EAENrB,IAAgB/X,EAAMmX,OAAOiC,KAtJpB,KAuJIpZ,EAAMmX,OAAOiC,IAxJZ,KAwJmCpZ,EAAMmX,OAAOiC,EAAI,OAEhEA,EAIJ,GAFKA,GAAA,EAEDrB,KAAiB/X,EAAMmX,OAAOiC,EAAI,GACpC,OAAOQ,EAAM,0BAGf,IAAI3B,EAAMjY,EAAMhO,MAAM,EAAGonB,EAAI,GAM7B,OALUJ,GAAA,EACVC,EAAehB,GACPjY,EAAAA,EAAMhO,MAAMonB,GACVJ,GAAA,EAEHyB,EAAI,CACTpa,KApKa,UAqKbka,QAAStC,GAvB0D,CAyBtE,CAQD,SAASY,IACP,IAAI4B,EAAMnB,IAGNoB,EAAOvB,EAAMzB,GACjB,GAAKgD,EAAL,CAII,QAACvB,EAAMxB,GAAc,OAAOiC,EAAM,wBAGlC,IAAAe,EAAMxB,EAAMvB,GAEZgD,EAAMH,EAAI,CACZpa,KA7LiB,cA8LjBrU,SAAUgsB,GAAK0C,EAAK,GAAG7uB,QAAQ0rB,EAAeQ,KAC9CnsB,MAAO+uB,EACH3C,GAAK2C,EAAI,GAAG9uB,QAAQ0rB,EAAeQ,KACnCA,KAMC,OAFPoB,EAAMtB,GAEC+C,CApBI,CAqBZ,CAyBD,OA9JAnB,EAAS9sB,UAAUqH,QAAUgM,EA6J7B0Z,IAjBA,WACE,IAKImB,EALAC,EAAQ,GAMJ,IAJRT,EAASS,GAIDD,EAAOhC,MACA,IAATgC,IACFC,EAAMN,KAAKK,GACXR,EAASS,IAIN,OAAAA,CACR,CAGMrC,EACT,aEzPAlsB,OAAO8rB,eAAe0C,GAAS,aAAc,CAAEnvB,OAAO,IACrCmvB,GAAAC,eAAG,EACpB,IAAIC,GAAwB,qBACxBC,GAAe,YACfC,GAAkB,UAClBC,GAAsB,6BACtBC,GAAyB,UAYzBC,GAAa,SAAUnC,EAAOoC,GAC9B,OAAOA,EAAUnE,aACrB,EAIIoE,GAAa,SAAUrC,EAAO9U,GAAiB,MAAA,GAAGoX,OAAOpX,EAAQ,MAoBpD0W,GAAAC,UAhBD,SAAUhvB,EAAUT,GAE5B,YADY,IAAZA,IAAsBA,EAAU,CAAE,GAnBtB,SAAUS,GACnB,OAACA,GACJmvB,GAAgBzvB,KAAKM,IACrBivB,GAAsBvvB,KAAKM,EACnC,CAgBQ0vB,CAAc1vB,GACPA,GAEXA,EAAWA,EAASU,eAGLV,EAFXT,EAAQowB,YAEG3vB,EAASH,QAAQwvB,GAAwBG,IAIzCxvB,EAASH,QAAQuvB,GAAqBI,KAErC3vB,QAAQqvB,GAAcI,IAC1C,EC3CA,IAGIM,IAHmBzvB,GAAQA,EAAK+rB,iBAAoB,SAAUC,GAC9D,OAAQA,GAAOA,EAAIC,WAAcD,EAAM,CAAE1jB,QAAW0jB,EACxD,GACwC0D,GACpCC,GAAcC,GAIlB,SAASC,GAAUhc,EAAOzU,GACtB,IAAI0wB,EAAS,CAAA,EACb,OAAKjc,GAA0B,iBAAVA,IAGrB,EAAI4b,GAAkBnnB,SAASuL,EAAO,SAAUhU,EAAUJ,GAElDI,GAAYJ,IACZqwB,GAAA,EAAWH,GAAYd,WAAWhvB,EAAUT,IAAYK,EAEpE,GACWqwB,GARIA,CASf,CACAD,GAAUvnB,QAAUunB,cACHA,ICMJE,GAAWC,GAAM,OAUjBC,GAAaD,GAAM,SAUhC,SAASA,GAAM9b,GACN8b,OAQP,SAAe3C,GACP2C,MAAAA,EAAS3C,GAAQA,EAAKF,UAAYE,EAAKF,SAASjZ,IAAU,CAAE,EAElE,GACwB,iBAAf8b,EAAM5C,MACb4C,EAAM5C,KAAO,GACW,iBAAjB4C,EAAMnD,QACbmD,EAAMnD,OAAS,EAER,MAAA,CACLO,KAAM4C,EAAM5C,KACZP,OAAQmD,EAAMnD,OACdzI,OAC0B,iBAAjB4L,EAAM5L,QAAuB4L,EAAM5L,QACtC4L,EAAAA,EAAM5L,YACN,EAGX,CACH,CCzCO,SAAS8L,GAAkBzwB,GAEhC,OAAKA,GAA0B,iBAAVA,EAKjB,aAAcA,GAAS,SAAUA,EAC5B0tB,GAAS1tB,EAAM0tB,UAIpB,UAAW1tB,GAAS,QAASA,EACxB0tB,GAAS1tB,GAId,SAAUA,GAAS,WAAYA,EAC1BuwB,GAAMvwB,GAIR,GAnBE,EAoBX,CAMA,SAASuwB,GAAMA,GACN,OAAAruB,GAAMquB,GAASA,EAAM5C,MAAQ,IAAMzrB,GAAMquB,GAASA,EAAMnD,OACjE,CAMA,SAASM,GAASmB,GACT0B,OAAAA,GAAM1B,GAAOA,EAAI3a,OAAS,IAAMqc,GAAM1B,GAAOA,EAAIzN,IAC1D,CAMA,SAASlf,GAAMlC,GACb,OAAOA,GAA0B,iBAAVA,EAAqBA,EAAQ,CACtD,CCzDO,MAAM0wB,WAAqBvC,MAwDhC,WAAAhuB,CAAYwwB,EAAeC,EAAwB3L,GAC1C9iB,QAE+B,iBAA3ByuB,IACA3L,EAAA2L,EACgBA,OAAA,GAI3B,IAAIxC,EAAS,GAETzuB,EAAU,CAAE,EACZkxB,GAAc,EAwCd,GAtCAD,IAMUjxB,EAHV,SAAUixB,GACV,WAAYA,GAMZ,UAAWA,GACX,QAASA,EALC,CAACE,MAAOF,GAUX,SAAUA,EACP,CACRG,UAAW,CAACH,GACZE,MAAOF,EAAuBlD,UAKtB,IAAIkD,IAIW,iBAAlBD,EACAvC,EAAAuC,GAGDhxB,EAAQqxB,OAASL,IACXE,GAAA,EACdzC,EAASuC,EAAcM,QACvBtxB,EAAQqxB,MAAQL,IAGbhxB,EAAQuxB,SAAWvxB,EAAQouB,QAA4B,iBAAX9I,EAAqB,CAC9D/iB,MAAAA,EAAQ+iB,EAAOkM,QAAQ,MAEX,IAAdjvB,EACFvC,EAAQuxB,OAASjM,GAEjBtlB,EAAQouB,OAAS9I,EAAO7e,MAAM,EAAGlE,GACjCvC,EAAQuxB,OAASjM,EAAO7e,MAAMlE,EAAQ,GAEzC,CAED,IAAKvC,EAAQmxB,OAASnxB,EAAQoxB,WAAapxB,EAAQoxB,UAAW,CAC5D,MAAMK,EAASzxB,EAAQoxB,UAAUpxB,EAAQoxB,UAAU1uB,OAAS,GAExD+uB,IACFzxB,EAAQmxB,MAAQM,EAAO1D,SAE1B,CAEK,MAAAxZ,EACJvU,EAAQmxB,OAAS,UAAWnxB,EAAQmxB,MAChCnxB,EAAQmxB,MAAM5c,MACdvU,EAAQmxB,MAOTvwB,KAAAwwB,UAAYpxB,EAAQoxB,gBAAa,EAOjCxwB,KAAAywB,MAAQrxB,EAAQqxB,YAAS,EAOzBzwB,KAAA6sB,OAASlZ,EAAQA,EAAMkZ,YAAS,EAWrC7sB,KAAK8wB,WAAQ,EAOb9wB,KAAK+wB,KAAO,GAQZ/wB,KAAK0wB,QAAU7C,EAOV7tB,KAAAotB,KAAOzZ,EAAQA,EAAMyZ,UAAO,EASjCptB,KAAKb,KAAO+wB,GAAkB9wB,EAAQmxB,QAAU,MAO3CvwB,KAAAuwB,MAAQnxB,EAAQmxB,YAAS,EAO9BvwB,KAAK6tB,OAAS7tB,KAAK0wB,QAOd1wB,KAAA2wB,OAASvxB,EAAQuxB,aAAU,EAO3B3wB,KAAAwtB,OAASpuB,EAAQouB,aAAU,EAW3BxtB,KAAAgxB,MACHV,GAAelxB,EAAQqxB,OAAwC,iBAAxBrxB,EAAQqxB,MAAMO,MACjD5xB,EAAQqxB,MAAMO,MACd,GAYNhxB,KAAKixB,YAAS,EAOdjxB,KAAKkxB,cAAW,EAOhBlxB,KAAKmxB,UAAO,EAUZnxB,KAAKoxB,SAAM,CACZ,EAGHjB,GAAa3vB,UAAUuwB,KAAO,GAC9BZ,GAAa3vB,UAAUrB,KAAO,GAC9BgxB,GAAa3vB,UAAUqtB,OAAS,GAChCsC,GAAa3vB,UAAUkwB,QAAU,GACjCP,GAAa3vB,UAAUwwB,MAAQ,GAC/Bb,GAAa3vB,UAAUqsB,YAAS,EAChCsD,GAAa3vB,UAAU4sB,UAAO,EAC9B+C,GAAa3vB,UAAUgwB,eAAY,EACnCL,GAAa3vB,UAAUiwB,WAAQ,EAC/BN,GAAa3vB,UAAUswB,WAAQ,EAC/BX,GAAa3vB,UAAU+vB,WAAQ,EAC/BJ,GAAa3vB,UAAUmwB,YAAS,EAChCR,GAAa3vB,UAAUgtB,YAAS,ECnShC,MAAM6D,GAAM,CAAE,EAACC,eAGTC,OAAeC,IAEf9G,GAAM,SAaN+G,OAAoBC,IAAI,CAAC,QAAS,QAAS,QAAS,QAAS,OAE7DC,GAAuB,IAAAD,IAAI,CAAC,KAAM,OAElCE,GAAO,0DAcN,SAASC,GAAaC,EAAM1yB,GACjC,IAAKA,QAAgC,IAArBA,EAAQ2yB,SAChB,MAAA,IAAIpF,UAAU,kCAGhB,MAAAqF,EAAW5yB,EAAQ4yB,eAAY,EAEjC9vB,IAAAA,EAEJ,GAAI9C,EAAQ6yB,YAAa,CACnB,GAA0B,mBAAnB7yB,EAAQ8yB,OACjB,MAAM,IAAIvF,UACR,yDAIJzqB,EA8TJ,SAA2B8vB,EAAUE,GAC5BhwB,OAAAA,EAEP,SAASA,EAAOmrB,EAAMnZ,EAAMie,EAAOlwB,GAEjC,MAAMmwB,EAAmBC,MAAMC,QAAQH,EAAMI,UACvCvC,EAAQC,GAAW5C,GAClB,OAAA6E,EACLhe,EACAie,EACAlwB,EACAmwB,EACA,CACEI,aAAcxC,EAAQA,EAAMnD,OAAS,OAAI,EACzC4F,SAAUT,EACVU,WAAY1C,EAAQA,EAAM5C,UAAO,QAEnC,EAEH,CACH,CAlVauF,CAAkBX,EAAU5yB,EAAQ8yB,OACjD,KAAS,CACD,GAAuB,mBAAhB9yB,EAAQE,IACX,MAAA,IAAIqtB,UAAU,wCAGlB,GAAwB,mBAAjBvtB,EAAQwzB,KACX,MAAA,IAAIjG,UAAU,yCAGtBzqB,EAiSJ,SAA0B0D,EAAGtG,EAAKszB,GACzB1wB,OAAAA,EAEP,SAASA,EAAO0D,EAAGsO,EAAMie,EAAOlwB,GAE9B,MACM4wB,EADmBR,MAAMC,QAAQH,EAAMI,UACfK,EAAOtzB,EAC9B,OAAA2C,EAAM4wB,EAAG3e,EAAMie,EAAOlwB,GAAO4wB,EAAG3e,EAAMie,EAC9C,CACH,CA1SaW,CAAiBd,EAAU5yB,EAAQE,IAAKF,EAAQwzB,KAC1D,CAGD,MAAMG,EAAQ,CACZhB,SAAU3yB,EAAQ2yB,SAClBvB,UAAW,GACXwC,WAAY5zB,EAAQ4zB,YAAc,CAAE,EACpC9wB,OAAAA,EACA+wB,yBAA0B7zB,EAAQ6zB,0BAA4B,QAC9DC,UAAW9zB,EAAQ+zB,gBAAkB/zB,EAAQ+zB,uBAAoB,EACjEnB,WACAoB,mBAAoBh0B,EAAQg0B,qBAAsB,EAClDC,UAA+B,IAArBj0B,EAAQi0B,SAClBC,SAAUl0B,EAAQk0B,WAAY,EAC9BC,OAA0B,QAAlBn0B,EAAQW,MAAkBuY,EAAMtS,EACxCwtB,sBAAuBp0B,EAAQo0B,uBAAyB,MACxDC,uBAAyD,IAAlCr0B,EAAQq0B,uBAG3BjN,EAASkN,GAAIX,EAAOjB,OAAM,GAG5B,OAAAtL,GAA4B,iBAAXA,EACZA,EAIFuM,EAAM7wB,OACX4vB,EACAiB,EAAMhB,SACN,CAACQ,SAAU/L,QAAU,QACrB,EAEJ,CAcA,SAASkN,GAAIX,EAAO1F,EAAMprB,GACpBorB,MAAc,YAAdA,EAAKnZ,KAqCX,SAAiB6e,EAAO1F,EAAMprB,GAC5B,MAAM0xB,EAAeZ,EAAMQ,OAC3B,IAAIA,EAASI,EAEsB,QAA/BtG,EAAKuG,QAAQrzB,eAAkD,SAAvBozB,EAAa5zB,QAC9CwzB,EAAAjb,EACTya,EAAMQ,OAASA,GAGXR,EAAAvC,UAAUnC,KAAKhB,GAErB,MAAMnZ,EAAO2f,GAAsBd,EAAO1F,EAAKuG,SAAS,GAClDzB,EAkPR,SAA4BY,EAAO1F,GAEjC,MAAM8E,EAAQ,CAAE,EAEZ,IAAA2B,EAEAvF,EAEC,IAAAA,KAAQlB,EAAKlrB,WAChB,GAAa,aAATosB,GAAuB8C,GAAI0C,KAAK1G,EAAKlrB,WAAYosB,GAAO,CAC1D,MAAM/H,EAASwN,GAAejB,EAAOxE,EAAMlB,EAAKlrB,WAAWosB,IAE3D,GAAI/H,EAAQ,CACJ,MAACvkB,EAAKxC,GAAS+mB,EAGnBuM,EAAMU,uBACE,UAARxxB,GACiB,iBAAVxC,GACPkyB,GAAiBsC,IAAI5G,EAAKuG,SAEbE,EAAAr0B,EAEb0yB,EAAMlwB,GAAOxC,CAEhB,CACF,CAGH,GAAIq0B,EAAY,EAEsB3B,EAAMte,QAAUse,EAAMte,MAAQ,CAAA,IAC5B,QAAhCkf,EAAMS,sBAAkC,aAAe,aAC3DM,CACH,CAEM,OAAA3B,CACT,CAvRgB+B,CAAmBnB,EAAO1F,GACpC,IAAAkF,EAAW4B,GAAepB,EAAO1F,GAEjCoE,GAAcwC,IAAI5G,EAAKuG,WACdrB,EAAAA,EAAStR,OAAO,SAAUmT,GACnC,MAAwB,iBAAVA,K1BvKM,iBADCC,E0BwK0BD,G1BtKhC,SAAfC,EAAMngB,MACJ1U,EAAM60B,EAAM50B,OAEdD,EAAM60B,IALL,IAAoBA,C0ByK3B,IAUE,OAPQC,GAAAvB,EAAOZ,EAAOje,EAAMmZ,GAC5BkH,GAAYpC,EAAOI,GAGnBQ,EAAMvC,UAAUgE,MAChBzB,EAAMQ,OAASI,EAERZ,EAAM7wB,OAAOmrB,EAAMnZ,EAAMie,EAAOlwB,EACzC,CAjEWwyB,CAAQ1B,EAAO1F,EAAMprB,GAGZ,sBAAdorB,EAAKnZ,MAA8C,sBAAdmZ,EAAKnZ,KA0EhD,SAAuB6e,EAAO1F,GAC5B,GAAIA,EAAKllB,MAAQklB,EAAKllB,KAAKusB,QAAU3B,EAAMG,UAAW,CAC9C,MACAyB,EADUtH,EAAKllB,KAAKusB,OACCE,KAAK,GAIhC,OAHOD,EAAWzgB,KAIhB6e,EAAMG,UAAU2B,mBAAmBF,EAAWA,WAEjD,CAEWG,GAAA/B,EAAO1F,EAAKF,SAC1B,CAtFW4H,CAAchC,EAAO1F,GAGZ,sBAAdA,EAAKnZ,MAA8C,sBAAdmZ,EAAKnZ,KAsHhD,SAAuB6e,EAAO1F,EAAMprB,GAClC,MAAM0xB,EAAeZ,EAAMQ,OAC3B,IAAIA,EAASI,EAEK,QAAdtG,EAAKluB,MAAyC,SAAvBw0B,EAAa5zB,QAC7BwzB,EAAAjb,EACTya,EAAMQ,OAASA,GAGXR,EAAAvC,UAAUnC,KAAKhB,GAEf,MAAAnZ,EACU,OAAdmZ,EAAKluB,KACD4zB,EAAMhB,SACN8B,GAAsBd,EAAO1F,EAAKluB,MAAM,GACxCgzB,EAuMR,SAA+BY,EAAO1F,GAEpC,MAAM8E,EAAQ,CAAE,EAEL,IAAA,MAAAzxB,KAAa2sB,EAAK7qB,WACvB,GAAmB,8BAAnB9B,EAAUwT,KACZ,GAAIxT,EAAUyH,MAAQzH,EAAUyH,KAAKusB,QAAU3B,EAAMG,UAAW,CACxD,MACAyB,EADUj0B,EAAUyH,KAAKusB,OACJE,KAAK,GACzBI,EAAAL,EAAWzgB,MAClB,MAAM+gB,EAAmBN,EAAWA,WAC7BK,EAAAC,EAAiB/gB,MAClB,MAAArU,EAAWo1B,EAAiB9yB,WAAW,GACtC6yB,EAAAn1B,EAASqU,MAET9T,OAAAC,OACL8xB,EACAY,EAAMG,UAAU2B,mBAAmBh1B,EAASq1B,UAEtD,MACoBJ,GAAA/B,EAAO1F,EAAKF,cAErB,CAEL,MAAMhuB,EAAOuB,EAAUvB,KAEnB,IAAAM,EAEJ,GAAIiB,EAAUjB,OAAoC,iBAApBiB,EAAUjB,MAEpC,GAAAiB,EAAUjB,MAAM0I,MAChBzH,EAAUjB,MAAM0I,KAAKusB,QACrB3B,EAAMG,UACN,CACM,MACAyB,EADUj0B,EAAUjB,MAAM0I,KAAKusB,OACVE,KAAK,GACzBI,EAAAL,EAAWzgB,MAClBzU,EAAQszB,EAAMG,UAAU2B,mBAAmBF,EAAWA,WAChE,MACsBG,GAAA/B,EAAO1F,EAAKF,eAG1B1tB,EAA4B,OAApBiB,EAAUjB,OAAwBiB,EAAUjB,MAItD0yB,EAAMhzB,GAA2CM,CAClD,CAGI,OAAA0yB,CACT,CA1PgBgD,CAAsBpC,EAAO1F,GACrCkF,EAAW4B,GAAepB,EAAO1F,GASvC,OAPQiH,GAAAvB,EAAOZ,EAAOje,EAAMmZ,GAC5BkH,GAAYpC,EAAOI,GAGnBQ,EAAMvC,UAAUgE,MAChBzB,EAAMQ,OAASI,EAERZ,EAAM7wB,OAAOmrB,EAAMnZ,EAAMie,EAAOlwB,EACzC,CA/IWmzB,CAAcrC,EAAO1F,EAAMprB,GAGlB,aAAdorB,EAAKnZ,KA2FX,SAAgB6e,EAAO1F,GACrB,GAAIA,EAAKllB,MAAQklB,EAAKllB,KAAKusB,QAAU3B,EAAMG,UAEzC,OACEH,EAAMG,UAAUmC,gBAAgBhI,EAAKllB,KAAKusB,QAIlCI,GAAA/B,EAAO1F,EAAKF,SAC1B,CAnGWmI,CAAOvC,EAAO1F,GAGL,SAAdA,EAAKnZ,KAsJX,SAAc6e,EAAO1F,EAAMprB,GAEzB,MAAMkwB,EAAQ,CAAE,EAIhB,OAFAoC,GAAYpC,EAAOgC,GAAepB,EAAO1F,IAElC0F,EAAM7wB,OAAOmrB,EAAM0F,EAAMhB,SAAUI,EAAOlwB,EACnD,CA5JWszB,CAAKxC,EAAO1F,EAAMprB,GAGT,SAAdorB,EAAKnZ,KAqKX,SAActO,EAAGynB,GACf,OAAOA,EAAK5tB,KACd,CAtKW6X,CAAKyb,EAAO1F,QADjBA,CAGN,CAoLA,SAASiH,GAAQvB,EAAOZ,EAAOje,EAAMmZ,GAEf,iBAATnZ,GAAqBA,IAAS6e,EAAMhB,UAAYgB,EAAMO,WAC/DnB,EAAM9E,KAAOA,EAEjB,CAYA,SAASkH,GAAYpC,EAAOI,GACtB,GAAAA,EAASzwB,OAAS,EAAG,CACvB,MAAMrC,EAAQ8yB,EAASzwB,OAAS,EAAIywB,EAAWA,EAAS,GAEpD9yB,IACF0yB,EAAMI,SAAW9yB,EAEpB,CACH,CA+KA,SAAS00B,GAAepB,EAAO1F,GAE7B,MAAMkF,EAAW,GACjB,IAAI5wB,GAAQ,EAIZ,MAAM6zB,EAAezC,EAAMM,SAAW,IAAI7B,IAAQD,GAElD,OAAS5vB,EAAQ0rB,EAAKkF,SAASzwB,QAAQ,CAC/B,MAAAsyB,EAAQ/G,EAAKkF,SAAS5wB,GAExB,IAAAM,EAEJ,GAAI8wB,EAAMM,SAAU,CAClB,MAAMl0B,EACW,YAAfi1B,EAAMlgB,KACFkgB,EAAMR,QACS,sBAAfQ,EAAMlgB,MACW,sBAAfkgB,EAAMlgB,KACNkgB,EAAMj1B,UACN,EAER,GAAIA,EAAM,CACR,MAAMs2B,EAAQD,EAAaE,IAAIv2B,IAAS,EACxC8C,EAAM9C,EAAO,IAAMs2B,EACND,EAAAG,IAAIx2B,EAAMs2B,EAAQ,EAChC,CACF,CAED,MAAMjP,EAASkN,GAAIX,EAAOqB,EAAOnyB,QAClB,IAAXukB,GAAsB+L,EAASlE,KAAK7H,EACzC,CAEM,OAAA+L,CACT,CAcA,SAASyB,GAAejB,EAAOxE,EAAM9uB,GACnC,MAAM6C,EThiBD,SAAcixB,EAAQ9zB,GACrB,MAAAK,EAASQ,EAAUb,GACzB,IAAII,EAAWJ,EACXm2B,EAAOn1B,EAEP,GAAAX,KAAUyzB,EAAOzzB,OACnB,OAAOyzB,EAAO1zB,SAAS0zB,EAAOzzB,OAAOA,IAGvC,GAAIA,EAAOgC,OAAS,GAA4B,SAAvBhC,EAAO+F,MAAM,EAAG,IAAiB+kB,EAAMrrB,KAAKE,GAAQ,CAE3E,GAAwB,MAApBA,EAAMurB,OAAO,GAAY,CAE3B,MAAM6K,EAAOp2B,EAAMoG,MAAM,GAAGnG,QAAQirB,EAAMI,GAC/BlrB,EAAA,OAASg2B,EAAK7K,OAAO,GAAGC,cAAgB4K,EAAKhwB,MAAM,EACpE,KAAW,CAEC,MAAAgwB,EAAOp2B,EAAMoG,MAAM,GAEzB,IAAK8kB,EAAKprB,KAAKs2B,GAAO,CACpB,IAAIC,EAASD,EAAKn2B,QAAQgrB,EAAKG,GAEN,MAArBiL,EAAO9K,OAAO,KAChB8K,EAAS,IAAMA,GAGjBr2B,EAAQ,OAASq2B,CAClB,CACF,CAEMF,EAAAn0B,CACR,CAEM,OAAA,IAAIm0B,EAAK/1B,EAAUJ,EAC5B,CS8fes2B,CAAKhD,EAAMQ,OAAQhF,GAI9B,KAAA9uB,SAEkB,iBAAVA,GAAsBu2B,OAAOC,MAAMx2B,IAF3C,CAcE,GAPA4yB,MAAMC,QAAQ7yB,KAGhBA,EAAQ6C,EAAKxB,eC5hBV,SAAmBkB,EAAQ5C,GAC1B,MAAA82B,EAAW92B,GAAW,CAAE,EAK9B,OAF4C,KAA9B4C,EAAOA,EAAOF,OAAS,GAAY,IAAIE,EAAQ,IAAMA,GAGhEm0B,MACED,EAASE,SAAW,IAAM,IACzB,MACsB,IAArBF,EAASG,QAAoB,GAAK,MAEtCxK,MACL,CD+gBkCyK,CAAO72B,GAAgBA,EElkBzC02B,KAAK,KAAKtK,QFskBF,UAAlBvpB,EAAKzC,SAAsB,CACzB,IAAAwsB,EACe,iBAAV5sB,EAAqBA,EA6BlC,SAAoBszB,EAAOtzB,GACrB,IACF,OAAO82B,GAAU92B,EAAO,CAAC+vB,aAAa,GACvC,OAAQ/B,GACP,GAAIsF,EAAMK,mBACR,MAAO,CAAE,EAGL,MAAA3C,EAAA,EACAC,EAAU,IAAIP,GAAa,iCAAkC,CACjEK,UAAWuC,EAAMvC,UACjBC,QACAE,OAAQ,QACRnD,OAAQ,6BAKJ,MAHEkD,EAAAK,KAAOgC,EAAMf,eAAY,EACjCtB,EAAQU,IAAMQ,GAAO,gCAEflB,CACP,CACH,CAjD0C8F,CAAWzD,EAAO0D,OAAOh3B,IAMxD,MAJ6B,QAAhCszB,EAAMS,wBACRnH,EA2IN,SAAoCqK,GAElC,MAAMC,EAAY,CAAE,EAEhB,IAAAnV,EAEJ,IAAKA,KAAQkV,EACPrF,GAAI0C,KAAK2C,EAAWlV,KACtBmV,EAAUC,GAA0BpV,IAASkV,EAAUlV,IAIpD,OAAAmV,CACT,CAxJoBE,CAA2BxK,IAGpC,CAAC,QAASA,EAClB,CAEM,MAAA,CAC8B,UAAnC0G,EAAME,0BAAwC3wB,EAAKvC,MAC/C0qB,EAAYnoB,EAAKzC,WAAayC,EAAKzC,SACnCyC,EAAK5B,UACTjB,EAxBD,CA0BH,CAgDA,SAASo0B,GAAsBd,EAAO5zB,EAAM23B,GAEtC,IAAAtQ,EAEJ,GAAKsQ,EAEM33B,GAAAA,EAAKsD,SAAS,KAAM,CACvB,MAAAs0B,EAAc53B,EAAK63B,MAAM,KAC/B,IAEI3J,EAFA1rB,GAAQ,EAIL,OAAEA,EAAQo1B,EAAYj1B,QAAQ,CAE7B,MAAAysB,EAAO0I,EAAiBF,EAAYp1B,IACtC,CAACuS,KAAM,aAAc/U,KAAM43B,EAAYp1B,IACvC,CAACuS,KAAM,UAAWzU,MAAOs3B,EAAYp1B,IACzC0rB,EAAOA,EACH,CACEnZ,KAAM,mBACN0C,OAAQyW,EACRxtB,SAAU0uB,EACV2I,SAAUC,QAAQx1B,GAAuB,YAAd4sB,EAAKra,MAChCkjB,UAAU,GAEZ7I,CACL,CAGQlB,EAAAA,CACb,MACI7G,EACEyQ,EAAiB93B,KAAU,SAASI,KAAKJ,GACrC,CAAC+U,KAAM,aAAY/U,KAAEA,GACrB,CAAC+U,KAAM,UAAWzU,MAAON,QA7B/BqnB,EAAS,CAACtS,KAAM,UAAWzU,MAAON,GAkChC,GAAgB,YAAhBqnB,EAAOtS,KAAoB,CACvB/U,MAAAA,EAAuCqnB,EAAO,MAC7C6K,OAAAA,GAAI0C,KAAKhB,EAAMC,WAAY7zB,GAAQ4zB,EAAMC,WAAW7zB,GAAQA,CACpE,CAGD,GAAI4zB,EAAMG,UACD,OAAAH,EAAMG,UAAU2B,mBAAmBrO,GAG5CsO,GAAY/B,EACd,CAOA,SAAS+B,GAAY/B,EAAOxC,GAC1B,MAAMG,EAAU,IAAIP,GAClB,sDACA,CACEK,UAAWuC,EAAMvC,UACjBD,QACAI,OAAQ,aACRnD,OAAQ,6BAMN,MAHEkD,EAAAK,KAAOgC,EAAMf,eAAY,EACjCtB,EAAQU,IAAMQ,GAAO,qDAEflB,CACR,CA6BA,SAASkG,GAA0BpV,GACjC,IAAIgH,EAAKhH,EAAK9hB,QAAQgrB,GAAK2M,IAGpB,MADgB,QAAnB7O,EAAG3iB,MAAM,EAAG,KAAc2iB,EAAK,IAAMA,GAClCA,CACT,CAUA,SAAS6O,GAAOvM,GACP,MAAA,IAAMA,EAAGvqB,aAClB,CG1wBO,MAAM+2B,GAAgB,CAC3B7wB,OAAQ,CAAC,QACTgB,KAAM,CAAC,aAAc,MAAO,MAAO,KACnCU,KAAM,CAAC,UACPc,WAAY,CAAC,SAAU,SACvBS,KAAM,CAAC,IAAK,OAAQ,OAAQ,QAC5B6tB,KAAM,CAAC,YACPjtB,OAAQ,KACRa,SAAU,CAAC,QACXuG,KAAM,CAAC,IAAK,QACZM,OAAQ,CAAC,SACTuB,IAAK,CACH,QACA,QACA,SACA,MACA,QACA,SACA,SACA,QACA,UChBErU,GAAe,CAAE,EAuCvB,SAASw0B,GAAIj0B,EAAO+3B,EAAiBC,GAC/B,GAqDN,SAAch4B,GACZ,OAAO03B,QAAQ13B,GAA0B,iBAAVA,EACjC,CAvDM4tB,CAAK5tB,GAAQ,CACf,GAAI,UAAWA,EACb,MAAsB,SAAfA,EAAMyU,MAAoBujB,EAAmBh4B,EAAMA,MAAX,GAGjD,GAAI+3B,GAAmB,QAAS/3B,GAASA,EAAMqH,IAC7C,OAAOrH,EAAMqH,IAGf,GAAI,aAAcrH,EAChB,OAAOi4B,GAAIj4B,EAAM8yB,SAAUiF,EAAiBC,EAE/C,CAEG,OAAApF,MAAMC,QAAQ7yB,GACTi4B,GAAIj4B,EAAO+3B,EAAiBC,GAG9B,EACT,CAcA,SAASC,GAAI11B,EAAQw1B,EAAiBC,GAEpC,MAAMjR,EAAS,GACf,IAAI7kB,GAAQ,EAEL,OAAEA,EAAQK,EAAOF,QACtB0kB,EAAO7kB,GAAS+xB,GAAI1xB,EAAOL,GAAQ61B,EAAiBC,GAG/C,OAAAjR,EAAO2P,KAAK,GACrB,CC3FA,MAAM1B,GAAUkD,SAASC,cAAc,KAMhC,SAASC,GAA8Bp4B,GACtCq4B,MAAAA,EAAqB,IAAMr4B,EAAQ,IACzCg1B,GAAQsD,UAAYD,EACpB,MAAM1I,EAAYqF,GAAQuD,YAQ1B,OAGiD,KAA/C5I,EAAU6I,WAAW7I,EAAUttB,OAAS,IAC9B,SAAVrC,KASK2vB,IAAc0I,GAA6B1I,EACpD,CCbO,SAAS8I,GAAOntB,EAAM4I,EAAOwkB,EAAQC,GAC1C,MAAMvX,EAAM9V,EAAKjJ,OACjB,IAEIu2B,EAFAC,EAAa,EAab,GAPF3kB,EADEA,EAAQ,GACDA,EAAQkN,EAAM,EAAIA,EAAMlN,EAEzBA,EAAQkN,EAAMA,EAAMlN,EAErBwkB,EAAAA,EAAS,EAAIA,EAAS,EAG3BC,EAAMt2B,OAAS,IACJu2B,EAAAhG,MAAM7Q,KAAK4W,GACbC,EAAAE,QAAQ5kB,EAAOwkB,GAE1BptB,EAAKmtB,UAAUG,QAMR,IAHHF,GAAQptB,EAAKmtB,OAAOvkB,EAAOwkB,GAGxBG,EAAaF,EAAMt2B,QACxBu2B,EAAaD,EAAMvyB,MAAMyyB,EAAYA,EAAa,KACvCD,EAAAE,QAAQ5kB,EAAO,GAE1B5I,EAAKmtB,UAAUG,GACDC,GAAA,IACL3kB,GAAA,GAGf,CAkBO,SAAS0a,GAAKtjB,EAAMqtB,GACrBrtB,OAAAA,EAAKjJ,OAAS,GAChBo2B,GAAOntB,EAAMA,EAAKjJ,OAAQ,EAAGs2B,GACtBrtB,GAEFqtB,CACT,CCrEA,MAAM9G,GAAiB,CAAE,EAACA,eAgC1B,SAASkH,GAAgBd,EAAKe,GAExB,IAAAC,EAEJ,IAAKA,KAAQD,EAAW,CAChB,MAEAE,GAFQrH,GAAeyC,KAAK2D,EAAKgB,GAAQhB,EAAIgB,QAAQ,KAEpChB,EAAIgB,GAAQ,CAAA,GAE7BE,EAAQH,EAAUC,GAEpBnjB,IAAAA,EAEJ,GAAIqjB,EACF,IAAKrjB,KAAQqjB,EAAO,CACbtH,GAAeyC,KAAK4E,EAAMpjB,KAAYA,EAAAA,GAAQ,IAC7C,MAAA9V,EAAQm5B,EAAMrjB,GACpBsjB,GAEEF,EAAKpjB,GACL8c,MAAMC,QAAQ7yB,GAASA,EAAQA,EAAQ,CAACA,GAAS,GAEpD,CAEJ,CACH,CAaA,SAASo5B,GAAWC,EAAU/tB,GAC5B,IAAIpJ,GAAQ,EAEZ,MAAMo3B,EAAS,GAER,OAAEp3B,EAAQoJ,EAAKjJ,SAEE,UAApBiJ,EAAKpJ,GAAOq3B,IAAkBF,EAAWC,GAAQ1K,KAAKtjB,EAAKpJ,IAGxDu2B,GAAAY,EAAU,EAAG,EAAGC,EACzB,CC9EO,SAASE,GAAgCx5B,EAAOy5B,GACrD,MAAM3jB,EAAOygB,OAAOmD,SAAS15B,EAAOy5B,GACpC,OAEA3jB,EAAO,GAAc,KAATA,GAAeA,EAAO,IAAMA,EAAO,IAE/CA,EAAO,KAAOA,EAAO,KAErBA,EAAO,OAAUA,EAAO,OAExBA,EAAO,OAAUA,EAAO,SACJ,OAAnBA,IAAiD,QAAZ,MAAPA,IAE/BA,EAAO,QACE,IAEFkhB,OAAO2C,cAAc7jB,EAC9B,CCZO,SAAS8jB,GAAoB55B,GAC3B,OAAAA,EAENC,QAAQ,cAAe,KAEvBA,QAAQ,SAAU,IAOlBa,cAAc0qB,aACjB,CCXO,MAAMqO,GAAaC,GAAW,YAcxBC,GAAoBD,GAAW,cAuB/BE,GAAaF,GAAW,uBAa9B,SAASG,GAAankB,GAC3B,OAGW,OAATA,IAAkBA,EAAO,IAAe,MAATA,EAEnC,CAaO,MAAMokB,GAAaJ,GAAW,MAoBxBK,GAAgBL,GAAW,cAe3BM,GAAmBN,GAAW,kBAiBpC,SAASO,GAAmBvkB,GAC1BA,OAAS,OAATA,GAAiBA,GAAO,CACjC,CAWO,SAASwkB,GAA0BxkB,GACxC,OAAgB,OAATA,IAAkBA,EAAO,GAAc,KAATA,EACvC,CAiBO,SAASykB,GAAczkB,GAC5B,OAAgB,IAATA,IAAwB,IAATA,GAAwB,KAATA,CACvC,CAuBO,MAAM0kB,GAAqBV,GAAW,gBAsBhCW,GAAoBX,GAAW,MAU5C,SAASA,GAAWY,GACX,OAUP,SAAe5kB,GACNA,OAAS,OAATA,GAAiBA,GAAO,GAAM4kB,EAAM56B,KAAKk3B,OAAO2D,aAAa7kB,GACrE,CACH,CC7LO,SAAS8kB,GAAa56B,GAE3B,MAAM+mB,EAAS,GACf,IAAI7kB,GAAQ,EACRgS,EAAQ,EACR2mB,EAAO,EACJ,OAAE34B,EAAQlC,EAAMqC,QAAQ,CACvByT,MAAAA,EAAO9V,EAAMw4B,WAAWt2B,GAE9B,IAAIjC,EAAU,GAGd,GAAa,KAAT6V,GAAeikB,GAAkB/5B,EAAMw4B,WAAWt2B,EAAQ,KAAO63B,GAAkB/5B,EAAMw4B,WAAWt2B,EAAQ,IACvG24B,EAAA,OACR,GAEQ/kB,EAAO,IACT,oBAAoBhW,KAAKk3B,OAAO2D,aAAa7kB,MACtC7V,EAAA+2B,OAAO2D,aAAa7kB,SAIzBA,GAAAA,EAAO,OAAUA,EAAO,MAAQ,CACvC,MAAMglB,EAAO96B,EAAMw4B,WAAWt2B,EAAQ,GAGlC4T,EAAO,OAAUglB,EAAO,OAAUA,EAAO,OACjC76B,EAAA+2B,OAAO2D,aAAa7kB,EAAMglB,GAC7BD,EAAA,GAIG56B,EAAA,GAEb,MAGWA,EAAA+2B,OAAO2D,aAAa7kB,GAE5B7V,IACK8mB,EAAA6H,KAAK5uB,EAAMoG,MAAM8N,EAAOhS,GAAQ64B,mBAAmB96B,IAC1DiU,EAAQhS,EAAQ24B,EAAO,EACb56B,EAAA,IAER46B,IACF34B,GAAS24B,EACFA,EAAA,EAEV,CACD,OAAO9T,EAAO2P,KAAK,IAAM12B,EAAMoG,MAAM8N,EACvC,CClEO,SAAS8mB,GAAaC,EAAS57B,EAAIoV,EAAM9I,GAC9C,MAAMuvB,EAAQvvB,EAAMA,EAAM,EAAI4qB,OAAO4E,kBACrC,IAAI1nB,EAAO,EACJ,OAGP,SAAeqC,GACT,GAAAykB,GAAczkB,GAEhB,OADAmlB,EAAQG,MAAM3mB,GACPgE,EAAO3C,GAEhB,OAAOzW,EAAGyW,EACX,EAGD,SAAS2C,EAAO3C,GACd,OAAIykB,GAAczkB,IAASrC,IAASynB,GAClCD,EAAQI,QAAQvlB,GACT2C,IAETwiB,EAAQK,KAAK7mB,GACNpV,EAAGyW,GACX,CACH,CClDO,MAAM1N,GAAU,CACrBmzB,SASF,SAA2BN,GACnB,MAAAO,EAAeP,EAAQQ,QAAQl7B,KAAKm7B,OAAOtC,WAAWuC,eAM5D,SAAoC7lB,GAClC,GAAa,OAATA,EAEF,YADAmlB,EAAQI,QAAQvlB,GAMX,OAHPmlB,EAAQG,MAAM,cACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,cACNN,GAAaC,EAASO,EAAc,aAC5C,EAGD,SAA0B1lB,GAExB,OADAmlB,EAAQG,MAAM,aACPQ,EAAU9lB,EAClB,GAnBG+lB,IAAAA,EACG,OAAAL,EAqBP,SAASI,EAAU9lB,GACX,MAAAgmB,EAAQb,EAAQG,MAAM,YAAa,CACvCW,YAAa,OACbF,SAAAA,IAMF,OAJIA,IACFA,EAASf,KAAOgB,GAElBD,EAAWC,EACJpzB,EAAKoN,EACb,CAGD,SAASpN,EAAKoN,GACZ,OAAa,OAATA,GACFmlB,EAAQK,KAAK,aACbL,EAAQK,KAAK,kBACbL,EAAQI,QAAQvlB,IAGdukB,GAAmBvkB,IACrBmlB,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,aACNM,IAITX,EAAQI,QAAQvlB,GACTpN,EACR,CACH,GCvDO,MAAMwvB,GAAW,CACtBqD,SAcF,SAA4BN,GAC1B,MAAMe,EAAOz7B,KAEPgxB,EAAQ,GACd,IAEI0K,EAEAC,EAEAC,EANAC,EAAY,EAOT,OAAAloB,EAGP,SAASA,EAAM4B,GAWT,GAAAsmB,EAAY7K,EAAMlvB,OAAQ,CACtB,MAAAg6B,EAAO9K,EAAM6K,GAEZ,OADPJ,EAAKM,eAAiBD,EAAK,GACpBpB,EAAQQ,QAAQY,EAAK,GAAGE,aAAcC,EAAkBC,EAAxDxB,CAA4EnlB,EACpF,CAGD,OAAO2mB,EAAmB3mB,EAC3B,CAGD,SAAS0mB,EAAiB1mB,GAMpBkmB,GALJI,IAKIJ,EAAKM,eAAeI,WAAY,CAClCV,EAAKM,eAAeI,gBAAa,EAC7BT,OAME,MAAAU,EAAmBX,EAAKY,OAAOv6B,OACrC,IAEIkuB,EAFAsM,EAAkBF,EAKtB,KAAOE,KACL,GAAwC,SAApCb,EAAKY,OAAOC,GAAiB,IAA0D,cAAzCb,EAAKY,OAAOC,GAAiB,GAAGpoB,KAAsB,CACtG8b,EAAQyL,EAAKY,OAAOC,GAAiB,GAAGzb,IACxC,KACD,CAEH0b,EAAeV,GAGf,IAAIl6B,EAAQy6B,EACLz6B,KAAAA,EAAQ85B,EAAKY,OAAOv6B,QACzB25B,EAAKY,OAAO16B,GAAO,GAAGkf,IAAM,IACvBmP,GAELruB,IAQF,OAJO85B,GAAAA,EAAKY,OAAQC,EAAkB,EAAG,EAAGb,EAAKY,OAAOx2B,MAAMu2B,IAG9DX,EAAKY,OAAOv6B,OAASH,EACdu6B,EAAmB3mB,EAC3B,CACD,OAAO5B,EAAM4B,EACd,CAGD,SAAS2mB,EAAmB3mB,GAMtB,GAAAsmB,IAAc7K,EAAMlvB,OAAQ,CAI9B,IAAK45B,EACH,OAAOc,EAAkBjnB,GAM3B,GAAImmB,EAAUe,kBAAoBf,EAAUe,iBAAiBC,SAC3D,OAAOC,EAAUpnB,GAQnBkmB,EAAKmB,UAAYzF,QAAQuE,EAAUe,mBAAqBf,EAAUmB,8BACnE,CAID,OADApB,EAAKM,eAAiB,GACfrB,EAAQ34B,MAAM+6B,GAAoBC,EAAsBC,EAAxDtC,CAA+EnlB,EACvF,CAGD,SAASwnB,EAAqBxnB,GAG5B,OAFImmB,OACJa,EAAeV,GACRW,EAAkBjnB,EAC1B,CAGD,SAASynB,EAAsBznB,GAG7B,OAFAkmB,EAAKN,OAAO8B,KAAKxB,EAAKyB,MAAM9P,MAAQyO,IAAc7K,EAAMlvB,OACtC25B,EAAAA,EAAKyB,MAAM9Y,OACtBuY,EAAUpnB,EAClB,CAGD,SAASinB,EAAkBjnB,GAGzB,OADAkmB,EAAKM,eAAiB,GACfrB,EAAQQ,QAAQ4B,GAAoBK,EAAmBR,EAAvDjC,CAAkEnlB,EAC1E,CAGD,SAAS4nB,EAAkB5nB,GAIzB,OAHAsmB,IACA7K,EAAM3C,KAAK,CAACoN,EAAKgB,iBAAkBhB,EAAKM,iBAEjCS,EAAkBjnB,EAC1B,CAGD,SAASonB,EAAUpnB,GACjB,OAAa,OAATA,GACEmmB,OACJa,EAAe,QACf7B,EAAQI,QAAQvlB,KAGlBmmB,EAAYA,GAAaD,EAAKN,OAAOiC,KAAK3B,EAAKyB,OAC/CxC,EAAQG,MAAM,YAAa,CACzBwC,WAAY3B,EACZF,YAAa,OACbF,SAAUK,IAEL2B,EAAa/nB,GACrB,CAGD,SAAS+nB,EAAa/nB,GACpB,OAAa,OAATA,GACFgoB,EAAa7C,EAAQK,KAAK,cAAc,GACxCwB,EAAe,QACf7B,EAAQI,QAAQvlB,IAGdukB,GAAmBvkB,IACrBmlB,EAAQI,QAAQvlB,GACHgoB,EAAA7C,EAAQK,KAAK,cAEdc,EAAA,EACZJ,EAAKmB,eAAY,EACVjpB,IAET+mB,EAAQI,QAAQvlB,GACT+nB,EACR,CAUQ,SAAAC,EAAahC,EAAOiC,GACrB,MAAAC,EAAShC,EAAKiC,YAAYnC,GAyChC,GAxCIiC,GAAWC,EAAOpP,KAAK,MAC3BkN,EAAMD,SAAWK,EACbA,IAAYA,EAAWpB,KAAOgB,GACrBI,EAAAJ,EACHG,EAAAiC,WAAWpC,EAAM5nB,OAC3B+nB,EAAUkC,MAAMH,GAmCZhC,EAAKN,OAAO8B,KAAK1B,EAAM5nB,MAAMyZ,MAAO,CAClCzrB,IAAAA,EAAQ+5B,EAAUW,OAAOv6B,OAC7B,KAAOH,KACL,GAEA+5B,EAAUW,OAAO16B,GAAO,GAAGgS,MAAMyQ,OAASwX,KAEzCF,EAAUW,OAAO16B,GAAO,GAAGkf,KAE5B6a,EAAUW,OAAO16B,GAAO,GAAGkf,IAAIuD,OAASwX,GAGtC,OAME,MAAAQ,EAAmBX,EAAKY,OAAOv6B,OACrC,IAEI+7B,EAEA7N,EAJAsM,EAAkBF,EAOtB,KAAOE,KACL,GAAwC,SAApCb,EAAKY,OAAOC,GAAiB,IAA0D,cAAzCb,EAAKY,OAAOC,GAAiB,GAAGpoB,KAAsB,CACtG,GAAI2pB,EAAM,CACR7N,EAAQyL,EAAKY,OAAOC,GAAiB,GAAGzb,IACxC,KACD,CACMgd,GAAA,CACR,CAMIl8B,IAJP46B,EAAeV,GAGfl6B,EAAQy6B,EACDz6B,EAAQ85B,EAAKY,OAAOv6B,QACzB25B,EAAKY,OAAO16B,GAAO,GAAGkf,IAAM,IACvBmP,GAELruB,IAIK85B,GAAAA,EAAKY,OAAQC,EAAkB,EAAG,EAAGb,EAAKY,OAAOx2B,MAAMu2B,IAG9DX,EAAKY,OAAOv6B,OAASH,CACtB,CACF,CAQD,SAAS46B,EAAerpB,GACtB,IAAIvR,EAAQqvB,EAAMlvB,OAGlB,KAAOH,KAAUuR,GAAM,CACf,MAAA4qB,EAAQ9M,EAAMrvB,GACpB85B,EAAKM,eAAiB+B,EAAM,GAC5BA,EAAM,GAAG/C,KAAKhH,KAAK0H,EAAMf,EAC1B,CACD1J,EAAMlvB,OAASoR,CAChB,CACD,SAAS6qB,IACGrC,EAAAkC,MAAM,CAAC,OACJjC,OAAA,EACDD,OAAA,EACZD,EAAKM,eAAeI,gBAAa,CAClC,CACH,GAjUMW,GAAqB,CACzB9B,SAwUF,SAA2BN,EAAS57B,EAAIk/B,GAG/B,OAAAvD,GAAaC,EAASA,EAAQQ,QAAQl7B,KAAKm7B,OAAOtC,WAAWlB,SAAU74B,EAAIk/B,GAAM,aAAch+B,KAAKm7B,OAAOtC,WAAWoF,QAAQC,KAAKz7B,SAAS,qBAAkB,EAAY,EACnL,GCtVO,SAAS07B,GAAkB5oB,GAChC,OAAa,OAATA,GAAiBwkB,GAA0BxkB,IAAS2kB,GAAkB3kB,GACjE,EAEL0kB,GAAmB1kB,GACd,OADL,CAGN,CCVO,SAAS6oB,GAAWvF,EAAYwD,EAAQgC,GAE7C,MAAMC,EAAS,GACf,IAAI38B,GAAQ,EAEL,OAAEA,EAAQk3B,EAAW/2B,QAAQ,CAC5B,MAAAy8B,EAAU1F,EAAWl3B,GAAOy8B,WAE9BG,IAAYD,EAAO77B,SAAS87B,KACrBlC,EAAAkC,EAAQlC,EAAQgC,GACzBC,EAAOjQ,KAAKkQ,GAEf,CAEM,OAAAlC,CACT,CCbO,MAAMmC,GAAY,CACvBr/B,KAAM,YACNi/B,WAUF,SAA6B/B,EAAQgC,GACnC,IAEI9sB,EAEAktB,EAEAnnB,EAEAonB,EAEAC,EAEAC,EAEAC,EAEAza,EAhBAziB,GAAQ,EAsBL,OAAEA,EAAQ06B,EAAOv6B,QAEtB,GAAyB,UAArBu6B,EAAO16B,GAAO,IAA4C,sBAA1B06B,EAAO16B,GAAO,GAAGuS,MAAgCmoB,EAAO16B,GAAO,GAAGm9B,OAIpG,IAHOn9B,EAAAA,EAGA4P,KAEL,GAAwB,SAApB8qB,EAAO9qB,GAAM,IAA0C,sBAAzB8qB,EAAO9qB,GAAM,GAAG2C,MAAgCmoB,EAAO9qB,GAAM,GAAGwtB,OAElGV,EAAQW,eAAe3C,EAAO9qB,GAAM,IAAI0mB,WAAW,KAAOoG,EAAQW,eAAe3C,EAAO16B,GAAO,IAAIs2B,WAAW,GAAI,CAK3G,IAAAoE,EAAO9qB,GAAM,GAAGutB,QAAUzC,EAAO16B,GAAO,GAAGo9B,SAAW1C,EAAO16B,GAAO,GAAGkf,IAAIuD,OAASiY,EAAO16B,GAAO,GAAGgS,MAAMyQ,QAAU,MAAQiY,EAAO9qB,GAAM,GAAGsP,IAAIuD,OAASiY,EAAO9qB,GAAM,GAAGoC,MAAMyQ,OAASiY,EAAO16B,GAAO,GAAGkf,IAAIuD,OAASiY,EAAO16B,GAAO,GAAGgS,MAAMyQ,QAAU,GAC3P,SAIFwa,EAAMvC,EAAO9qB,GAAM,GAAGsP,IAAIuD,OAASiY,EAAO9qB,GAAM,GAAGoC,MAAMyQ,OAAS,GAAKiY,EAAO16B,GAAO,GAAGkf,IAAIuD,OAASiY,EAAO16B,GAAO,GAAGgS,MAAMyQ,OAAS,EAAI,EAAI,EAC7I,MAAMzQ,EAAQ,IACT0oB,EAAO9qB,GAAM,GAAGsP,KAEfA,EAAM,IACPwb,EAAO16B,GAAO,GAAGgS,OAEZsrB,GAAAtrB,GAAQirB,GAClBK,GAAUpe,EAAK+d,GACGF,EAAA,CAChBxqB,KAAM0qB,EAAM,EAAI,iBAAmB,mBACnCjrB,QACAkN,IAAK,IACAwb,EAAO9qB,GAAM,GAAGsP,MAGL8d,EAAA,CAChBzqB,KAAM0qB,EAAM,EAAI,iBAAmB,mBACnCjrB,MAAO,IACF0oB,EAAO16B,GAAO,GAAGgS,OAEtBkN,OAEFvJ,EAAO,CACLpD,KAAM0qB,EAAM,EAAI,aAAe,eAC/BjrB,MAAO,IACF0oB,EAAO9qB,GAAM,GAAGsP,KAErBA,IAAK,IACAwb,EAAO16B,GAAO,GAAGgS,QAGhB8qB,EAAA,CACNvqB,KAAM0qB,EAAM,EAAI,SAAW,WAC3BjrB,MAAO,IACF+qB,EAAgB/qB,OAErBkN,IAAK,IACA8d,EAAgB9d,MAGvBwb,EAAO9qB,GAAM,GAAGsP,IAAM,IACjB6d,EAAgB/qB,OAErB0oB,EAAO16B,GAAO,GAAGgS,MAAQ,IACpBgrB,EAAgB9d,KAErBge,EAAa,GAGTxC,EAAO9qB,GAAM,GAAGsP,IAAIuD,OAASiY,EAAO9qB,GAAM,GAAGoC,MAAMyQ,SACxCya,EAAAxQ,GAAKwQ,EAAY,CAAC,CAAC,QAASxC,EAAO9qB,GAAM,GAAI8sB,GAAU,CAAC,OAAQhC,EAAO9qB,GAAM,GAAI8sB,MAInFQ,EAAAxQ,GAAKwQ,EAAY,CAAC,CAAC,QAASJ,EAAOJ,GAAU,CAAC,QAASK,EAAiBL,GAAU,CAAC,OAAQK,EAAiBL,GAAU,CAAC,QAAS/mB,EAAM+mB,KAKnJQ,EAAaxQ,GAAKwQ,EAAYT,GAAWC,EAAQlD,OAAOtC,WAAWqG,WAAWhB,KAAM7B,EAAOx2B,MAAM0L,EAAO,EAAG5P,GAAQ08B,IAGtGQ,EAAAxQ,GAAKwQ,EAAY,CAAC,CAAC,OAAQvnB,EAAM+mB,GAAU,CAAC,QAASM,EAAiBN,GAAU,CAAC,OAAQM,EAAiBN,GAAU,CAAC,OAAQI,EAAOJ,KAG7IhC,EAAO16B,GAAO,GAAGkf,IAAIuD,OAASiY,EAAO16B,GAAO,GAAGgS,MAAMyQ,QAC9CA,EAAA,EACIya,EAAAxQ,GAAKwQ,EAAY,CAAC,CAAC,QAASxC,EAAO16B,GAAO,GAAI08B,GAAU,CAAC,OAAQhC,EAAO16B,GAAO,GAAI08B,MAEvFja,EAAA,EAEX8T,GAAOmE,EAAQ9qB,EAAO,EAAG5P,EAAQ4P,EAAO,EAAGstB,GAC3Cl9B,EAAQ4P,EAAOstB,EAAW/8B,OAASsiB,EAAS,EAC5C,KACD,CAMPziB,GAAQ,EACD,OAAEA,EAAQ06B,EAAOv6B,QACQ,sBAA1Bu6B,EAAO16B,GAAO,GAAGuS,OACnBmoB,EAAO16B,GAAO,GAAGuS,KAAO,QAGrB,OAAAmoB,CACT,EA5IErB,SAmJF,SAA2BN,EAAS57B,GAClC,MAAMqgC,EAAmBn/B,KAAKm7B,OAAOtC,WAAWsG,iBAAiBjB,KAC3D5C,EAAWt7B,KAAKs7B,SAChBvC,EAASoF,GAAkB7C,GAG7B,IAAA8D,EACG,OAYP,SAAe7pB,GAGb,OAFSA,EAAAA,EACTmlB,EAAQG,MAAM,qBACPwE,EAAO9pB,EACf,EAYD,SAAS8pB,EAAO9pB,GACd,GAAIA,IAAS6pB,EAEJ,OADP1E,EAAQI,QAAQvlB,GACT8pB,EAEH,MAAA9D,EAAQb,EAAQK,KAAK,qBAGrBuE,EAAQnB,GAAkB5oB,GAI1BhE,GAAQ+tB,GAAmB,IAAVA,GAAevG,GAAUoG,EAAiB18B,SAAS8S,GACpEgqB,GAASxG,GAAqB,IAAXA,GAAgBuG,GAASH,EAAiB18B,SAAS64B,GAG5E,OAFMC,EAAAwD,MAAQ5H,QAAmB,KAAXiI,EAAgB7tB,EAAOA,IAASwnB,IAAWwG,IAC3DhE,EAAAuD,OAAS3H,QAAmB,KAAXiI,EAAgBG,EAAQA,IAAUD,IAAU/tB,IAC5DzS,EAAGyW,EACX,CACH,GAeA,SAAS0pB,GAAUjP,EAAO5L,GACxB4L,EAAMnD,QAAUzI,EAChB4L,EAAM5L,QAAUA,EAChB4L,EAAMwP,cAAgBpb,CACxB,CCrOO,MAAMqb,GAAW,CACtBtgC,KAAM,WACN67B,SAQF,SAA0BN,EAAS57B,EAAIk/B,GACrC,IAAI9qB,EAAO,EACJ,OAcP,SAAeqC,GAMN,OALPmlB,EAAQG,MAAM,YACdH,EAAQG,MAAM,kBACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,kBACbL,EAAQG,MAAM,oBACPtpB,CACR,EAcD,SAASA,EAAKgE,GACR,OAAA+jB,GAAW/jB,IACbmlB,EAAQI,QAAQvlB,GACTmqB,GAEI,KAATnqB,EACKyoB,EAAIzoB,GAENoqB,EAAWpqB,EACnB,CAcD,SAASmqB,EAAmBnqB,GAEtBA,OAAS,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAeikB,GAAkBjkB,IAE1DrC,EAAA,EACA0sB,EAAyBrqB,IAE3BoqB,EAAWpqB,EACnB,CAcD,SAASqqB,EAAyBrqB,GAChC,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GACTrC,EAAA,EACA2sB,IAIK,KAATtqB,GAAwB,KAATA,GAAwB,KAATA,GAAeikB,GAAkBjkB,KAAUrC,IAAS,IACrFwnB,EAAQI,QAAQvlB,GACTqqB,IAEF1sB,EAAA,EACAysB,EAAWpqB,GACnB,CAYD,SAASsqB,EAAUtqB,GACjB,OAAa,KAATA,GACFmlB,EAAQK,KAAK,oBACbL,EAAQG,MAAM,kBACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,kBACbL,EAAQK,KAAK,YACNj8B,GAII,OAATyW,GAA0B,KAATA,GAAwB,KAATA,GAAemkB,GAAankB,GACvDyoB,EAAIzoB,IAEbmlB,EAAQI,QAAQvlB,GACTsqB,EACR,CAYD,SAASF,EAAWpqB,GAClB,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GACTuqB,GAELrG,GAAWlkB,IACbmlB,EAAQI,QAAQvlB,GACToqB,GAEF3B,EAAIzoB,EACZ,CAYD,SAASuqB,EAAiBvqB,GACxB,OAAOikB,GAAkBjkB,GAAQwqB,EAAWxqB,GAAQyoB,EAAIzoB,EACzD,CAYD,SAASwqB,EAAWxqB,GAClB,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GACTrC,EAAA,EACA4sB,GAEI,KAATvqB,GAEMmlB,EAAAK,KAAK,oBAAoB7mB,KAAO,gBACxCwmB,EAAQG,MAAM,kBACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,kBACbL,EAAQK,KAAK,YACNj8B,GAEFkhC,EAAWzqB,EACnB,CAcD,SAASyqB,EAAWzqB,GAElB,IAAc,KAATA,GAAeikB,GAAkBjkB,KAAUrC,IAAS,GAAI,CACrD,MAAAqnB,EAAgB,KAAThlB,EAAcyqB,EAAaD,EAEjC,OADPrF,EAAQI,QAAQvlB,GACTglB,CACR,CACD,OAAOyD,EAAIzoB,EACZ,CACH,GC5NO,MAAM0qB,GAAY,CACvBC,SAAS,EACTlF,SAQF,SAA2BN,EAAS57B,EAAIk/B,GAC/B,OAgBP,SAAezoB,GACN,OAAAykB,GAAczkB,GAAQklB,GAAaC,EAAS4E,EAAO,aAA7B7E,CAA2CllB,GAAQ+pB,EAAM/pB,EACvF,EAgBD,SAAS+pB,EAAM/pB,GACNA,OAAS,OAATA,GAAiBukB,GAAmBvkB,GAAQzW,EAAGyW,GAAQyoB,EAAIzoB,EACnE,CACH,GC/CO,MAAM4qB,GAAa,CACxBnE,aAAc,CACZhB,SAgFJ,SAAwCN,EAAS57B,EAAIk/B,GACnD,MAAMvC,EAAOz7B,KACN,OAeP,SAAmBuV,GACb,GAAAykB,GAAczkB,GAGhB,OAAOklB,GAAaC,EAAS0F,EAAY,aAAc3E,EAAKN,OAAOtC,WAAWoF,QAAQC,KAAKz7B,SAAS,qBAAkB,EAAY,EAA3Hg4B,CAA8HllB,GAEvI,OAAO6qB,EAAW7qB,EACnB,EAeD,SAAS6qB,EAAW7qB,GAClB,OAAOmlB,EAAQQ,QAAQiF,GAAYrhC,EAAIk/B,EAAhCtD,CAAqCnlB,EAC7C,CACH,GAxHEwlB,KA2HF,SAAcL,GACZA,EAAQK,KAAK,aACf,EA5HE57B,KAAM,aACN67B,SAQF,SAAiCN,EAAS57B,EAAIk/B,GAC5C,MAAMvC,EAAOz7B,KACN,OAYP,SAAeuV,GACb,GAAa,KAATA,EAAa,CACf,MAAMwd,EAAQ0I,EAAKM,eAWZ,OAVFhJ,EAAMxhB,OACTmpB,EAAQG,MAAM,aAAc,CAC1BwF,YAAY,IAEdtN,EAAMxhB,MAAO,GAEfmpB,EAAQG,MAAM,oBACdH,EAAQG,MAAM,oBACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,oBACNuE,CACR,CACD,OAAOtB,EAAIzoB,EACZ,EAYD,SAAS+pB,EAAM/pB,GACT,OAAAykB,GAAczkB,IAChBmlB,EAAQG,MAAM,8BACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,8BACbL,EAAQK,KAAK,oBACNj8B,IAET47B,EAAQK,KAAK,oBACNj8B,EAAGyW,GACX,CACH,GCrEO,MAAM+qB,GAAkB,CAC7BnhC,KAAM,kBACN67B,SAQF,SAAiCN,EAAS57B,EAAIk/B,GACrC,OAYP,SAAezoB,GAKN,OAJPmlB,EAAQG,MAAM,mBACdH,EAAQG,MAAM,gBACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,gBACNsE,CACR,EAYD,SAASA,EAAO9pB,GAEV,OAAAskB,GAAiBtkB,IACnBmlB,EAAQG,MAAM,wBACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,wBACbL,EAAQK,KAAK,mBACNj8B,GAEFk/B,EAAIzoB,EACZ,CACH,GClDO,MAAMuiB,GAAqB,CAChC34B,KAAM,qBACN67B,SAQF,SAAoCN,EAAS57B,EAAIk/B,GAC/C,MAAMvC,EAAOz7B,KACb,IAEIoL,EAEA7L,EAJA2T,EAAO,EAKJ,OAgBP,SAAeqC,GAKN,OAJPmlB,EAAQG,MAAM,sBACdH,EAAQG,MAAM,4BACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,4BACNxpB,CACR,EAiBD,SAASA,EAAKgE,GACZ,OAAa,KAATA,GACFmlB,EAAQG,MAAM,mCACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,mCACNwF,IAET7F,EAAQG,MAAM,2BACRzvB,EAAA,GACC7L,EAAAi6B,GACA/5B,EAAM8V,GACd,CAcD,SAASgrB,EAAQhrB,GACXA,OAAS,KAATA,GAAwB,MAATA,GACjBmlB,EAAQG,MAAM,uCACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,uCACbL,EAAQG,MAAM,2BACRzvB,EAAA,EACC7L,EAAAq6B,GACAn6B,IAETi7B,EAAQG,MAAM,2BACRzvB,EAAA,EACC7L,EAAAo6B,GACAl6B,EAAM8V,GACd,CAmBD,SAAS9V,EAAM8V,GACTA,GAAS,KAATA,GAAerC,EAAM,CACjB,MAAAqoB,EAAQb,EAAQK,KAAK,2BACvB,OAAAx7B,IAASi6B,IAAsB3B,GAA8B4D,EAAKuD,eAAezD,KAMrFb,EAAQG,MAAM,4BACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,4BACbL,EAAQK,KAAK,sBACNj8B,GATEk/B,EAAIzoB,EAUd,CACD,OAAIhW,EAAKgW,IAASrC,IAAS9H,GACzBsvB,EAAQI,QAAQvlB,GACT9V,GAEFu+B,EAAIzoB,EACZ,CACH,GCvIA,MAAMirB,GAAsB,CAC1BN,SAAS,EACTlF,SAiaF,SAAqCN,EAAS57B,EAAIk/B,GAChD,MAAMvC,EAAOz7B,KACN,OAOP,SAAeuV,GACb,GAAa,OAATA,EACF,OAAOyoB,EAAIzoB,GAKN,OAHPmlB,EAAQG,MAAM,cACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,cACNM,CACR,EAOD,SAASA,EAAU9lB,GACjB,OAAOkmB,EAAKN,OAAO8B,KAAKxB,EAAKyB,MAAM9P,MAAQ4Q,EAAIzoB,GAAQzW,EAAGyW,EAC3D,CACH,GAxbakrB,GAAa,CACxB/D,UAAU,EACVv9B,KAAM,aACN67B,SAQF,SAA4BN,EAAS57B,EAAIk/B,GACvC,MAAMvC,EAAOz7B,KAEP0gC,EAAa,CACjBR,SAAS,EACTlF,SAiSO,SAAmBN,EAAS57B,EAAIk/B,GACvC,IAAI9qB,EAAO,EACJ,OAAAytB,EAOP,SAASA,EAAYprB,GAIZ5B,OAHP+mB,EAAQG,MAAM,cACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,cACNpnB,CACR,CAcD,SAASA,EAAM4B,GAKN,OADPmlB,EAAQG,MAAM,mBACPb,GAAczkB,GAAQklB,GAAaC,EAASkG,EAAqB,aAAcnF,EAAKN,OAAOtC,WAAWoF,QAAQC,KAAKz7B,SAAS,qBAAkB,EAAY,EAApIg4B,CAAuIllB,GAAQqrB,EAAoBrrB,EACjM,CAcD,SAASqrB,EAAoBrrB,GAC3B,OAAIA,IAAS6pB,GACX1E,EAAQG,MAAM,2BACPgG,EAActrB,IAEhByoB,EAAIzoB,EACZ,CAcD,SAASsrB,EAActrB,GACrB,OAAIA,IAAS6pB,GACXlsB,IACAwnB,EAAQI,QAAQvlB,GACTsrB,GAEL3tB,GAAQ4tB,GACVpG,EAAQK,KAAK,2BACNf,GAAczkB,GAAQklB,GAAaC,EAASqG,EAAoB,aAA1CtG,CAAwDllB,GAAQwrB,EAAmBxrB,IAE3GyoB,EAAIzoB,EACZ,CAcD,SAASwrB,EAAmBxrB,GAC1B,OAAa,OAATA,GAAiBukB,GAAmBvkB,IACtCmlB,EAAQK,KAAK,mBACNj8B,EAAGyW,IAELyoB,EAAIzoB,EACZ,CACF,GAnYD,IAGI6pB,EAHA4B,EAAgB,EAChBF,EAAW,EAGR,OAcP,SAAevrB,GAEb,OAeF,SAA4BA,GAC1B,MAAM0rB,EAAOxF,EAAKY,OAAOZ,EAAKY,OAAOv6B,OAAS,GAM9C,OALAk/B,EAAgBC,GAAyB,eAAjBA,EAAK,GAAG/sB,KAAwB+sB,EAAK,GAAGjC,eAAeiC,EAAK,IAAI,GAAMn/B,OAAS,EAC9FyT,EAAAA,EACTmlB,EAAQG,MAAM,cACdH,EAAQG,MAAM,mBACdH,EAAQG,MAAM,2BACPqG,EAAa3rB,EACrB,CAvBQ4rB,CAAmB5rB,EAC3B,EAoCD,SAAS2rB,EAAa3rB,GACpB,OAAIA,IAAS6pB,GACX0B,IACApG,EAAQI,QAAQvlB,GACT2rB,GAELJ,EAAW,EACN9C,EAAIzoB,IAEbmlB,EAAQK,KAAK,2BACNf,GAAczkB,GAAQklB,GAAaC,EAAS0G,EAAY,aAAlC3G,CAAgDllB,GAAQ6rB,EAAW7rB,GACjG,CAcD,SAAS6rB,EAAW7rB,GAClB,OAAa,OAATA,GAAiBukB,GAAmBvkB,IACtCmlB,EAAQK,KAAK,mBACNU,EAAKmB,UAAY99B,EAAGyW,GAAQmlB,EAAQ34B,MAAMy+B,GAAqBa,EAAgB/B,EAAnD5E,CAA0DnlB,KAE/FmlB,EAAQG,MAAM,uBACdH,EAAQG,MAAM,cAAe,CAC3BW,YAAa,WAERl5B,EAAKiT,GACb,CAcD,SAASjT,EAAKiT,GACZ,OAAa,OAATA,GAAiBukB,GAAmBvkB,IACtCmlB,EAAQK,KAAK,eACbL,EAAQK,KAAK,uBACNqG,EAAW7rB,IAEhBykB,GAAczkB,IAChBmlB,EAAQK,KAAK,eACbL,EAAQK,KAAK,uBACNN,GAAaC,EAAS4G,EAAY,aAAlC7G,CAAgDllB,IAE5C,KAATA,GAAeA,IAAS6pB,EACnBpB,EAAIzoB,IAEbmlB,EAAQI,QAAQvlB,GACTjT,EACR,CAcD,SAASg/B,EAAW/rB,GAClB,OAAa,OAATA,GAAiBukB,GAAmBvkB,GAC/B6rB,EAAW7rB,IAEpBmlB,EAAQG,MAAM,uBACdH,EAAQG,MAAM,cAAe,CAC3BW,YAAa,WAER+F,EAAKhsB,GACb,CAcD,SAASgsB,EAAKhsB,GACZ,OAAa,OAATA,GAAiBukB,GAAmBvkB,IACtCmlB,EAAQK,KAAK,eACbL,EAAQK,KAAK,uBACNqG,EAAW7rB,IAEP,KAATA,GAAeA,IAAS6pB,EACnBpB,EAAIzoB,IAEbmlB,EAAQI,QAAQvlB,GACTgsB,EACR,CAeD,SAASF,EAAe9rB,GACtB,OAAOmlB,EAAQQ,QAAQwF,EAAYpB,EAAOkC,EAAnC9G,CAAkDnlB,EAC1D,CAcD,SAASisB,EAAcjsB,GAId,OAHPmlB,EAAQG,MAAM,cACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,cACNE,CACR,CAcD,SAASA,EAAa1lB,GACpB,OAAOyrB,EAAgB,GAAKhH,GAAczkB,GAAQklB,GAAaC,EAAS+G,EAAoB,aAAcT,EAAgB,EAAxEvG,CAA2EllB,GAAQksB,EAAmBlsB,EACzJ,CAcD,SAASksB,EAAmBlsB,GAC1B,OAAa,OAATA,GAAiBukB,GAAmBvkB,GAC/BmlB,EAAQ34B,MAAMy+B,GAAqBa,EAAgB/B,EAAnD5E,CAA0DnlB,IAEnEmlB,EAAQG,MAAM,iBACP6G,EAAansB,GACrB,CAcD,SAASmsB,EAAansB,GACpB,OAAa,OAATA,GAAiBukB,GAAmBvkB,IACtCmlB,EAAQK,KAAK,iBACN0G,EAAmBlsB,KAE5BmlB,EAAQI,QAAQvlB,GACTmsB,EACR,CAcD,SAASpC,EAAM/pB,GAEb,OADAmlB,EAAQK,KAAK,cACNj8B,EAAGyW,EACX,CA4GH,GC7ZO,MAAMosB,GAAe,CAC1BxiC,KAAM,eACN67B,SAcF,SAA8BN,EAAS57B,EAAIk/B,GACzC,MAAMvC,EAAOz7B,KACN,OAgBP,SAAeuV,GAMb,OAHAmlB,EAAQG,MAAM,gBAGPJ,GAAaC,EAASkH,EAAa,aAAc,EAAjDnH,CAAwDllB,EAChE,EAYD,SAASqsB,EAAYrsB,GACnB,MAAM0rB,EAAOxF,EAAKY,OAAOZ,EAAKY,OAAOv6B,OAAS,GACvC,OAAAm/B,GAAyB,eAAjBA,EAAK,GAAG/sB,MAAyB+sB,EAAK,GAAGjC,eAAeiC,EAAK,IAAI,GAAMn/B,QAAU,EAAI+/B,EAAQtsB,GAAQyoB,EAAIzoB,EACzH,CAYD,SAASssB,EAAQtsB,GACf,OAAa,OAATA,EACK+pB,EAAM/pB,GAEXukB,GAAmBvkB,GACdmlB,EAAQQ,QAAQ4G,GAAcD,EAASvC,EAAvC5E,CAA8CnlB,IAEvDmlB,EAAQG,MAAM,iBACPwE,EAAO9pB,GACf,CAYD,SAAS8pB,EAAO9pB,GACd,OAAa,OAATA,GAAiBukB,GAAmBvkB,IACtCmlB,EAAQK,KAAK,iBACN8G,EAAQtsB,KAEjBmlB,EAAQI,QAAQvlB,GACT8pB,EACR,CAGD,SAASC,EAAM/pB,GAKb,OAJAmlB,EAAQK,KAAK,gBAINj8B,EAAGyW,EACX,CACH,GApGMusB,GAAe,CACnB5B,SAAS,EACTlF,SAyGF,SAA8BN,EAAS57B,EAAIk/B,GACzC,MAAMvC,EAAOz7B,KACN8hC,OAAAA,EAaP,SAASA,EAAavsB,GAGpB,OAAIkmB,EAAKN,OAAO8B,KAAKxB,EAAKyB,MAAM9P,MACvB4Q,EAAIzoB,GAETukB,GAAmBvkB,IACrBmlB,EAAQG,MAAM,cACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,cACN+G,GASFrH,GAAaC,EAASkH,EAAa,aAAc,EAAjDnH,CAAwDllB,EAChE,CAYD,SAASqsB,EAAYrsB,GACnB,MAAM0rB,EAAOxF,EAAKY,OAAOZ,EAAKY,OAAOv6B,OAAS,GACvC,OAAAm/B,GAAyB,eAAjBA,EAAK,GAAG/sB,MAAyB+sB,EAAK,GAAGjC,eAAeiC,EAAK,IAAI,GAAMn/B,QAAU,EAAIhD,EAAGyW,GAAQukB,GAAmBvkB,GAAQusB,EAAavsB,GAAQyoB,EAAIzoB,EACpK,CACH,GClKO,MAAMwsB,GAAW,CACtB5iC,KAAM,WACNm8B,SA2DF,SAAkB/lB,GAETA,OAAS,KAATA,GAA+D,oBAAhDvV,KAAKq8B,OAAOr8B,KAAKq8B,OAAOv6B,OAAS,GAAG,GAAGoS,IAC/D,EA7DEqqB,QAMF,SAAyBlC,GACnB,IAGA16B,EAEAk5B,EALAmH,EAAgB3F,EAAOv6B,OAAS,EAChCmgC,EAAiB,EAOhB,KAAmC,eAAnC5F,EAAO4F,GAAgB,GAAG/tB,MAA4D,UAAnCmoB,EAAO4F,GAAgB,GAAG/tB,MAAwD,eAAlCmoB,EAAO2F,GAAe,GAAG9tB,MAA2D,UAAlCmoB,EAAO2F,GAAe,GAAG9tB,MAI1K,IAHPvS,EAAQsgC,IAGCtgC,EAAQqgC,GACf,GAA8B,iBAA1B3F,EAAO16B,GAAO,GAAGuS,KAAyB,CAE5CmoB,EAAO4F,GAAgB,GAAG/tB,KAAO,kBACjCmoB,EAAO2F,GAAe,GAAG9tB,KAAO,kBACd+tB,GAAA,EACDD,GAAA,EACjB,KACD,CAKLrgC,EAAQsgC,EAAiB,EACzBD,IACO,OAAErgC,GAASqgC,QACF,IAAVnH,EACEl5B,IAAUqgC,GAA2C,eAA1B3F,EAAO16B,GAAO,GAAGuS,OACtCvS,EAAAA,GAEDA,IAAUqgC,GAA2C,eAA1B3F,EAAO16B,GAAO,GAAGuS,OACrDmoB,EAAOxB,GAAO,GAAG3mB,KAAO,eACpBvS,IAAUk5B,EAAQ,IACbwB,EAAAxB,GAAO,GAAGha,IAAMwb,EAAO16B,EAAQ,GAAG,GAAGkf,IAC5Cwb,EAAOnE,OAAO2C,EAAQ,EAAGl5B,EAAQk5B,EAAQ,GACzCmH,GAAiBrgC,EAAQk5B,EAAQ,EACjCl5B,EAAQk5B,EAAQ,GAEVA,OAAA,GAGL,OAAAwB,CACT,EAlDErB,SAmEF,SAA0BN,EAAS57B,EAAIk/B,GAErC,IAEI9qB,EAEAqoB,EAJAuF,EAAW,EAKR,OAcP,SAAevrB,GAGb,OAFAmlB,EAAQG,MAAM,YACdH,EAAQG,MAAM,oBACPqG,EAAa3rB,EACrB,EAYD,SAAS2rB,EAAa3rB,GACpB,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GAChBurB,IACOI,IAETxG,EAAQK,KAAK,oBACNmH,EAAQ3sB,GAChB,CAYD,SAAS2sB,EAAQ3sB,GAEf,OAAa,OAATA,EACKyoB,EAAIzoB,GAMA,KAATA,GACFmlB,EAAQG,MAAM,SACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,SACNmH,GAII,KAAT3sB,GACMgmB,EAAAb,EAAQG,MAAM,oBACf3nB,EAAA,EACA2tB,EAActrB,IAEnBukB,GAAmBvkB,IACrBmlB,EAAQG,MAAM,cACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,cACNmH,IAITxH,EAAQG,MAAM,gBACP1yB,EAAKoN,GACb,CAYD,SAASpN,EAAKoN,GACRA,OAAS,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAeukB,GAAmBvkB,IACpEmlB,EAAQK,KAAK,gBACNmH,EAAQ3sB,KAEjBmlB,EAAQI,QAAQvlB,GACTpN,EACR,CAYD,SAAS04B,EAActrB,GAErB,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GAChBrC,IACO2tB,GAIL3tB,IAAS4tB,GACXpG,EAAQK,KAAK,oBACbL,EAAQK,KAAK,YACNj8B,EAAGyW,KAIZgmB,EAAMrnB,KAAO,eACN/L,EAAKoN,GACb,CACH,GCnMO,MAAM4sB,GAOX,WAAAviC,CAAYwiC,GAEVpiC,KAAK24B,KAAOyJ,EAAU,IAAIA,GAAW,GAErCpiC,KAAK44B,MAAQ,EACd,CAWD,GAAAlD,CAAI/zB,GACEA,GAAAA,EAAQ,GAAKA,GAAS3B,KAAK24B,KAAK72B,OAAS9B,KAAK44B,MAAM92B,OAChD,MAAA,IAAIugC,WAAW,wBAA0B1gC,EAAQ,kCAAoC3B,KAAK24B,KAAK72B,OAAS9B,KAAK44B,MAAM92B,QAAU,KAEjIH,OAAAA,EAAQ3B,KAAK24B,KAAK72B,OAAe9B,KAAK24B,KAAKh3B,GACxC3B,KAAK44B,MAAM54B,KAAK44B,MAAM92B,OAASH,EAAQ3B,KAAK24B,KAAK72B,OAAS,EAClE,CAMD,UAAIA,GACF,OAAO9B,KAAK24B,KAAK72B,OAAS9B,KAAK44B,MAAM92B,MACtC,CASD,KAAAwgC,GAES,OADPtiC,KAAKuiC,UAAU,GACRviC,KAAK44B,MAAMpE,KACnB,CAaD,KAAA3uB,CAAM8N,EAAOkN,GAEX,MAAM2hB,EAAO3hB,QAAoCmV,OAAO4E,kBAAoB/Z,EACxE,OAAA2hB,EAAOxiC,KAAK24B,KAAK72B,OACZ9B,KAAK24B,KAAK9yB,MAAM8N,EAAO6uB,GAE5B7uB,EAAQ3T,KAAK24B,KAAK72B,OACb9B,KAAK44B,MAAM/yB,MAAM7F,KAAK44B,MAAM92B,OAAS0gC,EAAOxiC,KAAK24B,KAAK72B,OAAQ9B,KAAK44B,MAAM92B,OAAS6R,EAAQ3T,KAAK24B,KAAK72B,QAAQ2gC,UAE9GziC,KAAK24B,KAAK9yB,MAAM8N,GAAO2b,OAAOtvB,KAAK44B,MAAM/yB,MAAM7F,KAAK44B,MAAM92B,OAAS0gC,EAAOxiC,KAAK24B,KAAK72B,QAAQ2gC,UACpG,CAsBD,MAAAvK,CAAOvkB,EAAO+uB,EAAatK,GAEzB,MAAM3C,EAAQiN,GAAe,EAC7B1iC,KAAKuiC,UAAUI,KAAKC,MAAMjvB,IACpB,MAAAkvB,EAAU7iC,KAAK44B,MAAMV,OAAOl4B,KAAK44B,MAAM92B,OAAS2zB,EAAOO,OAAO4E,mBAEpE,OADIxC,GAAmB0K,GAAA9iC,KAAK24B,KAAMP,GAC3ByK,EAAQJ,SAChB,CAUD,GAAAjO,GAES,OADFx0B,KAAAuiC,UAAUvM,OAAO4E,mBACf56B,KAAK24B,KAAKnE,KAClB,CAWD,IAAAnG,CAAKyN,GACE97B,KAAAuiC,UAAUvM,OAAO4E,mBACjB56B,KAAA24B,KAAKtK,KAAKyN,EAChB,CAWD,QAAAiH,CAAS3K,GACFp4B,KAAAuiC,UAAUvM,OAAO4E,mBACVkI,GAAA9iC,KAAK24B,KAAMP,EACxB,CAWD,OAAAG,CAAQuD,GACN97B,KAAKuiC,UAAU,GACVviC,KAAA44B,MAAMvK,KAAKyN,EACjB,CAWD,WAAAkH,CAAY5K,GACVp4B,KAAKuiC,UAAU,GACfO,GAAY9iC,KAAK44B,MAAOR,EAAMqK,UAC/B,CAcD,SAAAF,CAAUU,GACR,KAAIA,IAAMjjC,KAAK24B,KAAK72B,QAAUmhC,EAAIjjC,KAAK24B,KAAK72B,QAAgC,IAAtB9B,KAAK44B,MAAM92B,QAAgBmhC,EAAI,GAA0B,IAArBjjC,KAAK24B,KAAK72B,QAChG,GAAAmhC,EAAIjjC,KAAK24B,KAAK72B,OAAQ,CAExB,MAAM+gC,EAAU7iC,KAAK24B,KAAKT,OAAO+K,EAAGjN,OAAO4E,mBAC3CkI,GAAY9iC,KAAK44B,MAAOiK,EAAQJ,UACtC,KAAW,CAEL,MAAMI,EAAU7iC,KAAK44B,MAAMV,OAAOl4B,KAAK24B,KAAK72B,OAAS9B,KAAK44B,MAAM92B,OAASmhC,EAAGjN,OAAO4E,mBACnFkI,GAAY9iC,KAAK24B,KAAMkK,EAAQJ,UAChC,CACF,EAeH,SAASK,GAAY/3B,EAAM6tB,GAEzB,IAAIN,EAAa,EACb,GAAAM,EAAM92B,OAAS,IACjBiJ,EAAKsjB,QAAQuK,QAEN,KAAAN,EAAaM,EAAM92B,QACxBiJ,EAAKsjB,QAAQuK,EAAM/yB,MAAMyyB,EAAYA,EAAa,MACpCA,GAAA,GAGpB,CCvOO,SAAS4K,GAAYC,GAE1B,MAAMC,EAAQ,CAAA,EACd,IAEIvtB,EAEAwtB,EAEAC,EAEAC,EAEAlL,EAEAmL,EAEAC,EAdA9hC,GAAQ,EAeN,MAAA06B,EAAS,IAAI8F,GAAagB,GACzB,OAAExhC,EAAQ06B,EAAOv6B,QAAQ,CAC9B,KAAOH,KAASyhC,GACdzhC,EAAQyhC,EAAMzhC,GAMhB,GAJQkU,EAAAwmB,EAAO3G,IAAI/zB,GAIfA,GAA2B,cAAlBkU,EAAM,GAAG3B,MAA0D,mBAAlCmoB,EAAO3G,IAAI/zB,EAAQ,GAAG,GAAGuS,OACzDsvB,EAAA3tB,EAAM,GAAGwnB,WAAWhB,OACnBiH,EAAA,EACTA,EAAaE,EAAU1hC,QAA4C,oBAAlC0hC,EAAUF,GAAY,GAAGpvB,OAC9CovB,GAAA,GAEZA,EAAaE,EAAU1hC,QAA4C,YAAlC0hC,EAAUF,GAAY,GAAGpvB,MACrD,OAAEovB,EAAaE,EAAU1hC,QACQ,YAAlC0hC,EAAUF,GAAY,GAAGpvB,MAGS,cAAlCsvB,EAAUF,GAAY,GAAGpvB,OAC3BsvB,EAAUF,GAAY,GAAGI,6BAA8B,EACvDJ,KAOJ,GAAa,UAAbztB,EAAM,GACJA,EAAM,GAAG2lB,cACXp7B,OAAOC,OAAO+iC,EAAOO,GAAWtH,EAAQ16B,IACxCA,EAAQyhC,EAAMzhC,GACP8hC,GAAA,QAIF,GAAA5tB,EAAM,GAAGwqB,WAAY,CAG5B,IAFa1+B,EAAAA,EACD0hC,OAAA,EACLC,KAED,GADSC,EAAAlH,EAAO3G,IAAI4N,GACG,eAAvBC,EAAW,GAAGrvB,MAAgD,oBAAvBqvB,EAAW,GAAGrvB,KACjC,UAAlBqvB,EAAW,KACTF,IACFhH,EAAO3G,IAAI2N,GAAW,GAAGnvB,KAAO,mBAEvBqvB,EAAA,GAAGrvB,KAAO,aACTmvB,EAAAC,QAEf,GAAiC,eAAvBC,EAAW,GAAGrvB,MAAgD,mBAAvBqvB,EAAW,GAAGrvB,KAG9D,MAGAmvB,IAEIxtB,EAAA,GAAGgL,IAAM,IACVwb,EAAO3G,IAAI2N,GAAW,GAAG1vB,OAIjB0kB,EAAAgE,EAAOx2B,MAAMw9B,EAAW1hC,GACrC02B,EAAWE,QAAQ1iB,GACnBwmB,EAAOnE,OAAOmL,EAAW1hC,EAAQ0hC,EAAY,EAAGhL,GAEnD,CACF,CAID,OADAH,GAAOiL,EAAa,EAAGnN,OAAO4E,kBAAmByB,EAAOx2B,MAAM,KACtD49B,CACV,CAYA,SAASE,GAAWtH,EAAQuH,GAC1B,MAAMrI,EAAQc,EAAO3G,IAAIkO,GAAY,GAC/BvF,EAAUhC,EAAO3G,IAAIkO,GAAY,GACvC,IAAIC,EAAgBD,EAAa,EAEjC,MAAME,EAAiB,GACvB,IAAIC,EAAYxI,EAAM8B,WACjB0G,IACHA,EAAY1F,EAAQlD,OAAOI,EAAMC,aAAaD,EAAM5nB,OAChD4nB,EAAMyI,2BACRD,EAAUC,0BAA2B,IAGzC,MAAMC,EAAcF,EAAU1H,OAExB+G,EAAQ,GAERc,EAAO,CAAA,EAET,IAAAzG,EAEAnC,EACA35B,GAAQ,EAERwiC,EAAU5I,EACV6I,EAAS,EACTzwB,EAAQ,EACN,MAAA0wB,EAAS,CAAC1wB,GAIhB,KAAOwwB,GAAS,CAEd,KAAO9H,EAAO3G,MAAMmO,GAAe,KAAOM,IAG1CL,EAAezV,KAAKwV,GACfM,EAAQ9G,aACFI,EAAAY,EAAQX,YAAYyG,GACxBA,EAAQ5J,MACXkD,EAAOpP,KAAK,MAEViN,GACQyI,EAAApG,WAAWwG,EAAQxwB,OAE3BwwB,EAAQT,8BACVK,EAAUO,oCAAqC,GAEjDP,EAAUnG,MAAMH,GACZ0G,EAAQT,8BACVK,EAAUO,wCAAqC,IAKnDhJ,EAAW6I,EACXA,EAAUA,EAAQ5J,IACnB,CAKM,IADG4J,EAAA5I,IACD55B,EAAQsiC,EAAYniC,QAGD,SAA1BmiC,EAAYtiC,GAAO,IAA+C,UAA9BsiC,EAAYtiC,EAAQ,GAAG,IAAkBsiC,EAAYtiC,GAAO,GAAGuS,OAAS+vB,EAAYtiC,EAAQ,GAAG,GAAGuS,MAAQ+vB,EAAYtiC,GAAO,GAAGgS,MAAMyZ,OAAS6W,EAAYtiC,GAAO,GAAGkf,IAAIuM,OAC3MzZ,EAAQhS,EAAQ,EAChB0iC,EAAOhW,KAAK1a,GAEZwwB,EAAQ9G,gBAAa,EACrB8G,EAAQ7I,cAAW,EACnB6I,EAAUA,EAAQ5J,MAqBtB,IAhBAwJ,EAAU1H,OAAS,GAKf8H,GAEFA,EAAQ9G,gBAAa,EACrB8G,EAAQ7I,cAAW,GAEnB+I,EAAO7P,MAKT7yB,EAAQ0iC,EAAOviC,OACRH,KAAS,CACR,MAAAkE,EAAQo+B,EAAYp+B,MAAMw+B,EAAO1iC,GAAQ0iC,EAAO1iC,EAAQ,IACxDgS,EAAQmwB,EAAetP,MAC7B4O,EAAM/U,KAAK,CAAC1a,EAAOA,EAAQ9N,EAAM/D,OAAS,IACnCu6B,EAAAnE,OAAOvkB,EAAO,EAAG9N,EACzB,CAGM,IAFPu9B,EAAMX,UACN9gC,GAAQ,IACCA,EAAQyhC,EAAMthC,QAChBoiC,EAAAE,EAAShB,EAAMzhC,GAAO,IAAMyiC,EAAShB,EAAMzhC,GAAO,GAC7CyiC,GAAAhB,EAAMzhC,GAAO,GAAKyhC,EAAMzhC,GAAO,GAAK,EAEzC,OAAAuiC,CACT,CCjNO,MAAMr8B,GAAU,CACrB02B,QAgBF,SAAwBlC,GAEf,OADP6G,GAAY7G,GACLA,CACT,EAlBErB,SAyBF,SAAyBN,EAAS57B,GAE5Bw8B,IAAAA,EACG,OAYP,SAAoB/lB,GAKlB,OAJAmlB,EAAQG,MAAM,WACdS,EAAWZ,EAAQG,MAAM,eAAgB,CACvCW,YAAa,YAER+I,EAAYhvB,EACpB,EAYD,SAASgvB,EAAYhvB,GACnB,OAAa,OAATA,EACKivB,EAAWjvB,GAKhBukB,GAAmBvkB,GACdmlB,EAAQ34B,MAAM0iC,GAAuBC,EAAiBF,EAAtD9J,CAAkEnlB,IAI3EmlB,EAAQI,QAAQvlB,GACTgvB,EACR,CAOD,SAASC,EAAWjvB,GAGlB,OAFAmlB,EAAQK,KAAK,gBACbL,EAAQK,KAAK,WACNj8B,EAAGyW,EACX,CAOD,SAASmvB,EAAgBnvB,GAQhB,OAPPmlB,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,gBACbO,EAASf,KAAOG,EAAQG,MAAM,eAAgB,CAC5CW,YAAa,UACbF,SAAAA,IAEFA,EAAWA,EAASf,KACbgK,CACR,CACH,GAhGME,GAAwB,CAC5BvE,SAAS,EACTlF,SAqGF,SAA8BN,EAAS57B,EAAIk/B,GACzC,MAAMvC,EAAOz7B,KACN,OAOP,SAAwBuV,GAKf,OAJPmlB,EAAQK,KAAK,gBACbL,EAAQG,MAAM,cACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,cACNN,GAAaC,EAASiK,EAAU,aACxC,EAOD,SAASA,EAASpvB,GAChB,GAAa,OAATA,GAAiBukB,GAAmBvkB,GACtC,OAAOyoB,EAAIzoB,GAKb,MAAM0rB,EAAOxF,EAAKY,OAAOZ,EAAKY,OAAOv6B,OAAS,GAC1C,OAAC25B,EAAKN,OAAOtC,WAAWoF,QAAQC,KAAKz7B,SAAS,iBAAmBw+B,GAAyB,eAAjBA,EAAK,GAAG/sB,MAAyB+sB,EAAK,GAAGjC,eAAeiC,EAAK,IAAI,GAAMn/B,QAAU,EACrJhD,EAAGyW,GAELmlB,EAAQkC,UAAUnB,EAAKN,OAAOtC,WAAWuE,KAAMY,EAAKl/B,EAApD47B,CAAwDnlB,EAChE,CACH,GCxHO,SAASqvB,GAAmBlK,EAAS57B,EAAIk/B,EAAK9pB,EAAM2wB,EAAaC,EAAmBC,EAASC,EAAY55B,GACxG,MAAAuvB,EAAQvvB,GAAO4qB,OAAO4E,kBAC5B,IAAIqK,EAAU,EACP,OAcP,SAAe1vB,GACb,GAAa,KAATA,EAMK,OALPmlB,EAAQG,MAAM3mB,GACdwmB,EAAQG,MAAMgK,GACdnK,EAAQG,MAAMiK,GACdpK,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK+J,GACNI,EAIL3vB,GAAS,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAemkB,GAAankB,GAC9D,OAAOyoB,EAAIzoB,GAQb,OANAmlB,EAAQG,MAAM3mB,GACdwmB,EAAQG,MAAMkK,GACdrK,EAAQG,MAAMmK,GACdtK,EAAQG,MAAM,cAAe,CAC3BW,YAAa,WAER2J,EAAI5vB,EACZ,EAYD,SAAS2vB,EAAe3vB,GACtB,OAAa,KAATA,GACFmlB,EAAQG,MAAMiK,GACdpK,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK+J,GACbpK,EAAQK,KAAK8J,GACbnK,EAAQK,KAAK7mB,GACNpV,IAET47B,EAAQG,MAAMmK,GACdtK,EAAQG,MAAM,cAAe,CAC3BW,YAAa,WAER4J,EAAS7vB,GACjB,CAYD,SAAS6vB,EAAS7vB,GAChB,OAAa,KAATA,GACFmlB,EAAQK,KAAK,eACbL,EAAQK,KAAKiK,GACNE,EAAe3vB,IAEX,OAATA,GAA0B,KAATA,GAAeukB,GAAmBvkB,GAC9CyoB,EAAIzoB,IAEbmlB,EAAQI,QAAQvlB,GACA,KAATA,EAAc8vB,EAAiBD,EACvC,CAYD,SAASC,EAAe9vB,GACtB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCmlB,EAAQI,QAAQvlB,GACT6vB,GAEFA,EAAS7vB,EACjB,CAYD,SAAS4vB,EAAI5vB,GACP,OAAC0vB,GAAqB,OAAT1vB,GAA0B,KAATA,IAAewkB,GAA0BxkB,GAOvE0vB,EAAUtK,GAAkB,KAATplB,GACrBmlB,EAAQI,QAAQvlB,GAChB0vB,IACOE,GAEI,KAAT5vB,GACFmlB,EAAQI,QAAQvlB,GAChB0vB,IACOE,GAMI,OAAT5vB,GAA0B,KAATA,GAAwB,KAATA,GAAemkB,GAAankB,GACvDyoB,EAAIzoB,IAEbmlB,EAAQI,QAAQvlB,GACA,KAATA,EAAc+vB,EAAYH,IAxB/BzK,EAAQK,KAAK,eACbL,EAAQK,KAAKiK,GACbtK,EAAQK,KAAKgK,GACbrK,EAAQK,KAAK7mB,GACNpV,EAAGyW,GAqBb,CAYD,SAAS+vB,EAAU/vB,GACjB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCmlB,EAAQI,QAAQvlB,GACT4vB,GAEFA,EAAI5vB,EACZ,CACH,CCpKO,SAASgwB,GAAa7K,EAAS57B,EAAIk/B,EAAK9pB,EAAMsxB,EAAYR,GAC/D,MAAMvJ,EAAOz7B,KACb,IAEI69B,EAFA3qB,EAAO,EAGJ,OAYP,SAAeqC,GAMN,OALPmlB,EAAQG,MAAM3mB,GACdwmB,EAAQG,MAAM2K,GACd9K,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAKyK,GACb9K,EAAQG,MAAMmK,GACPnD,CACR,EAYD,SAASA,EAAQtsB,GACX,OAAArC,EAAO,KAAgB,OAATqC,GAA0B,KAATA,GAAwB,KAATA,IAAgBsoB,GAMzD,KAATtoB,IAAgBrC,GAAQ,2BAA4BuoB,EAAKN,OAAOtC,WACvDmF,EAAIzoB,GAEA,KAATA,GACFmlB,EAAQK,KAAKiK,GACbtK,EAAQG,MAAM2K,GACd9K,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAKyK,GACb9K,EAAQK,KAAK7mB,GACNpV,GAILg7B,GAAmBvkB,IACrBmlB,EAAQG,MAAM,cACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,cACN8G,IAETnH,EAAQG,MAAM,cAAe,CAC3BW,YAAa,WAERiK,EAAYlwB,GACpB,CAYD,SAASkwB,EAAYlwB,GACfA,OAAS,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAeukB,GAAmBvkB,IAASrC,IAAS,KACtFwnB,EAAQK,KAAK,eACN8G,EAAQtsB,KAEjBmlB,EAAQI,QAAQvlB,GACXsoB,IAAaA,GAAC7D,GAAczkB,IACjB,KAATA,EAAcmwB,EAAcD,EACpC,CAYD,SAASC,EAAYnwB,GACnB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCmlB,EAAQI,QAAQvlB,GAChBrC,IACOuyB,GAEFA,EAAYlwB,EACpB,CACH,CCzGO,SAASowB,GAAajL,EAAS57B,EAAIk/B,EAAK9pB,EAAMsxB,EAAYR,GAE3D,IAAA5F,EACG,OAYP,SAAe7pB,GACb,GAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,EAMzB,OALPmlB,EAAQG,MAAM3mB,GACdwmB,EAAQG,MAAM2K,GACd9K,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAKyK,GACJjwB,EAAS,KAATA,EAAc,GAAKA,EACrB8J,EAET,OAAO2e,EAAIzoB,EACZ,EAcD,SAAS8J,EAAM9J,GACb,OAAIA,IAAS6pB,GACX1E,EAAQG,MAAM2K,GACd9K,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAKyK,GACb9K,EAAQK,KAAK7mB,GACNpV,IAET47B,EAAQG,MAAMmK,GACPnD,EAAQtsB,GAChB,CAYD,SAASssB,EAAQtsB,GACf,OAAIA,IAAS6pB,GACX1E,EAAQK,KAAKiK,GACN3lB,EAAM+f,IAEF,OAAT7pB,EACKyoB,EAAIzoB,GAITukB,GAAmBvkB,IAErBmlB,EAAQG,MAAM,cACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,cACNN,GAAaC,EAASmH,EAAS,gBAExCnH,EAAQG,MAAM,cAAe,CAC3BW,YAAa,WAER6D,EAAO9pB,GACf,CAOD,SAAS8pB,EAAO9pB,GACd,OAAIA,IAAS6pB,GAAmB,OAAT7pB,GAAiBukB,GAAmBvkB,IACzDmlB,EAAQK,KAAK,eACN8G,EAAQtsB,KAEjBmlB,EAAQI,QAAQvlB,GACA,KAATA,EAAcqwB,EAASvG,EAC/B,CAYD,SAASuG,EAAOrwB,GACVA,OAAAA,IAAS6pB,GAAmB,KAAT7pB,GACrBmlB,EAAQI,QAAQvlB,GACT8pB,GAEFA,EAAO9pB,EACf,CACH,CCrIO,SAASswB,GAAkBnL,EAAS57B,GAErC,IAAA++B,EACG,OAGP,SAASlqB,EAAM4B,GACT,GAAAukB,GAAmBvkB,GAKd,OAJPmlB,EAAQG,MAAM,cACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,cACN8C,GAAA,EACAlqB,EAEL,GAAAqmB,GAAczkB,GAChB,OAAOklB,GAAaC,EAAS/mB,EAAOkqB,EAAO,aAAe,aAAnDpD,CAAiEllB,GAE1E,OAAOzW,EAAGyW,EACX,CACH,CC1BO,MAAMpV,GAAa,CACxBhB,KAAM,aACN67B,SAcF,SAA4BN,EAAS57B,EAAIk/B,GACvC,MAAMvC,EAAOz7B,KAET,IAAA8lC,EACG,OAYP,SAAevwB,GAKb,OADAmlB,EAAQG,MAAM,cAchB,SAAgBtlB,GAGd,OAAOgwB,GAAaxR,KAAK0H,EAAMf,EAASqL,EAExC/H,EAAK,kBAAmB,wBAAyB,wBAF1CuH,CAEmEhwB,EAC3E,CAnBQwjB,CAAOxjB,EACf,EA8BD,SAASwwB,EAAWxwB,GAElB,OADAuwB,EAAazM,GAAoBoC,EAAKuD,eAAevD,EAAKY,OAAOZ,EAAKY,OAAOv6B,OAAS,GAAG,IAAI+D,MAAM,OACtF,KAAT0P,GACFmlB,EAAQG,MAAM,oBACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,oBACNiL,GAEFhI,EAAIzoB,EACZ,CAYD,SAASywB,EAAYzwB,GAEZ,OAAAwkB,GAA0BxkB,GAAQswB,GAAkBnL,EAASuL,EAA3BJ,CAA8CtwB,GAAQ0wB,EAAkB1wB,EAClH,CAYD,SAAS0wB,EAAkB1wB,GAClB,OAAAqvB,GAAmBlK,EAASwL,EAEnClI,EAAK,wBAAyB,+BAAgC,qCAAsC,2BAA4B,8BAFzH4G,CAEwJrvB,EAChK,CAYD,SAAS2wB,EAAiB3wB,GACxB,OAAOmlB,EAAQQ,QAAQiL,GAAa7G,EAAOA,EAApC5E,CAA2CnlB,EACnD,CAcD,SAAS+pB,EAAM/pB,GACN,OAAAykB,GAAczkB,GAAQklB,GAAaC,EAAS0L,EAAiB,aAAvC3L,CAAqDllB,GAAQ6wB,EAAgB7wB,EAC3G,CAcD,SAAS6wB,EAAgB7wB,GACvB,OAAa,OAATA,GAAiBukB,GAAmBvkB,IACtCmlB,EAAQK,KAAK,cAKbU,EAAKN,OAAOp6B,QAAQstB,KAAKyX,GAKlBhnC,EAAGyW,IAELyoB,EAAIzoB,EACZ,CACH,GAlKM4wB,GAAc,CAClBjG,SAAS,EACTlF,SAuKF,SAA6BN,EAAS57B,EAAIk/B,GACjCmI,OAcP,SAAqB5wB,GACZ,OAAAwkB,GAA0BxkB,GAAQswB,GAAkBnL,EAAS2L,EAA3BR,CAAyCtwB,GAAQyoB,EAAIzoB,EAC/F,EAaD,SAAS8wB,EAAa9wB,GACb,OAAAowB,GAAajL,EAAS4L,EAAYtI,EAAK,kBAAmB,wBAAyB,wBAAnF2H,CAA4GpwB,EACpH,CAYD,SAAS+wB,EAAW/wB,GACX,OAAAykB,GAAczkB,GAAQklB,GAAaC,EAAS6L,EAA8B,aAApD9L,CAAkEllB,GAAQgxB,EAA6BhxB,EACrI,CAYD,SAASgxB,EAA6BhxB,GAC7BA,OAAS,OAATA,GAAiBukB,GAAmBvkB,GAAQzW,EAAGyW,GAAQyoB,EAAIzoB,EACnE,CACH,GClPO,MAAMixB,GAAkB,CAC7BrnC,KAAM,kBACN67B,SAQF,SAAiCN,EAAS57B,EAAIk/B,GACrC,OAaP,SAAezoB,GAGN,OAFPmlB,EAAQG,MAAM,mBACdH,EAAQI,QAAQvlB,GACT+pB,CACR,EAaD,SAASA,EAAM/pB,GACT,OAAAukB,GAAmBvkB,IACrBmlB,EAAQK,KAAK,mBACNj8B,EAAGyW,IAELyoB,EAAIzoB,EACZ,CACH,GC5CO,MAAMkxB,GAAa,CACxBtnC,KAAM,aACNo/B,QAKF,SAA2BlC,EAAQgC,GAC7B,IAGAx2B,EAEAyP,EALAktB,EAAanI,EAAOv6B,OAAS,EAC7Bm5B,EAAe,EAOkB,eAAjCoB,EAAOpB,GAAc,GAAG/mB,OACV+mB,GAAA,GAIduJ,EAAa,EAAIvJ,GAA+C,eAA/BoB,EAAOmI,GAAY,GAAGtwB,OAC3CswB,GAAA,GAEmB,uBAA/BnI,EAAOmI,GAAY,GAAGtwB,OAAkC+mB,IAAiBuJ,EAAa,GAAKA,EAAa,EAAIvJ,GAAmD,eAAnCoB,EAAOmI,EAAa,GAAG,GAAGtwB,QAC1IswB,GAAAvJ,EAAe,IAAMuJ,EAAa,EAAI,GAElDA,EAAavJ,IACfpzB,EAAU,CACRqM,KAAM,iBACNP,MAAO0oB,EAAOpB,GAAc,GAAGtnB,MAC/BkN,IAAKwb,EAAOmI,GAAY,GAAG3jB,KAE7BvJ,EAAO,CACLpD,KAAM,YACNP,MAAO0oB,EAAOpB,GAAc,GAAGtnB,MAC/BkN,IAAKwb,EAAOmI,GAAY,GAAG3jB,IAC3B2a,YAAa,QAERtD,GAAAmE,EAAQpB,EAAcuJ,EAAavJ,EAAe,EAAG,CAAC,CAAC,QAASpzB,EAASw2B,GAAU,CAAC,QAAS/mB,EAAM+mB,GAAU,CAAC,OAAQ/mB,EAAM+mB,GAAU,CAAC,OAAQx2B,EAASw2B,MAE1J,OAAAhC,CACT,EAvCErB,SA8CF,SAA4BN,EAAS57B,EAAIk/B,GACvC,IAAI9qB,EAAO,EACJ,OAYP,SAAeqC,GAGb,OADAmlB,EAAQG,MAAM,cAchB,SAAgBtlB,GAEd,OADAmlB,EAAQG,MAAM,sBACPqG,EAAa3rB,EACrB,CAhBQwjB,CAAOxjB,EACf,EA2BD,SAAS2rB,EAAa3rB,GAChBA,OAAS,KAATA,GAAerC,IAAS,GAC1BwnB,EAAQI,QAAQvlB,GACT2rB,GAII,OAAT3rB,GAAiBwkB,GAA0BxkB,IAC7CmlB,EAAQK,KAAK,sBACN8G,EAAQtsB,IAEVyoB,EAAIzoB,EACZ,CAYD,SAASssB,EAAQtsB,GACf,OAAa,KAATA,GACFmlB,EAAQG,MAAM,sBACP6L,EAAgBnxB,IAEZ,OAATA,GAAiBukB,GAAmBvkB,IACtCmlB,EAAQK,KAAK,cAINj8B,EAAGyW,IAERykB,GAAczkB,GACTklB,GAAaC,EAASmH,EAAS,aAA/BpH,CAA6CllB,IAKtDmlB,EAAQG,MAAM,kBACP1yB,EAAKoN,GACb,CAcD,SAASmxB,EAAgBnxB,GACvB,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GACTmxB,IAEThM,EAAQK,KAAK,sBACN8G,EAAQtsB,GAChB,CAYD,SAASpN,EAAKoN,GACZ,OAAa,OAATA,GAA0B,KAATA,GAAewkB,GAA0BxkB,IAC5DmlB,EAAQK,KAAK,kBACN8G,EAAQtsB,KAEjBmlB,EAAQI,QAAQvlB,GACTpN,EACR,CACH,GCnLO,MAAMw+B,GAAiB,CAC5B,UACA,UACA,QACA,OACA,WACA,aACA,OACA,UACA,SACA,MACA,WACA,KACA,UACA,SACA,MACA,MACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,QACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,KACA,OACA,SACA,SACA,KACA,OACA,OACA,OACA,WACA,MACA,WACA,KACA,WACA,SACA,IACA,QACA,SACA,UACA,UACA,QACA,QACA,KACA,QACA,KACA,QACA,QACA,KACA,QACA,MAeWC,GAAe,CAAC,MAAO,SAAU,QAAS,YC5E1CC,GAAW,CACtBnK,UAAU,EACVv9B,KAAM,WACN2nC,UAeF,SAA2BzK,GACzB,IAAI16B,EAAQ06B,EAAOv6B,OACnB,KAAOH,MACoB,UAArB06B,EAAO16B,GAAO,IAA4C,aAA1B06B,EAAO16B,GAAO,GAAGuS,QAInDvS,EAAQ,GAAmC,eAA9B06B,EAAO16B,EAAQ,GAAG,GAAGuS,OAE7BvS,EAAAA,GAAO,GAAGgS,MAAQ0oB,EAAO16B,EAAQ,GAAG,GAAGgS,MAEvChS,EAAAA,EAAQ,GAAG,GAAGgS,MAAQ0oB,EAAO16B,EAAQ,GAAG,GAAGgS,MAE3C0oB,EAAAnE,OAAOv2B,EAAQ,EAAG,IAEpB,OAAA06B,CACT,EA9BErB,SAqCF,SAA0BN,EAAS57B,EAAIk/B,GACrC,MAAMvC,EAAOz7B,KAET,IAAAo/B,EAEA2H,EAEAC,EAEArlC,EAEAslC,EACG,OAYP,SAAe1xB,GAEb,OAaF,SAAgBA,GAIP,OAHPmlB,EAAQG,MAAM,YACdH,EAAQG,MAAM,gBACdH,EAAQI,QAAQvlB,GACThE,CACR,CAlBQwnB,CAAOxjB,EACf,EAiCD,SAAShE,EAAKgE,GACZ,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GACT2xB,GAEI,KAAT3xB,GACFmlB,EAAQI,QAAQvlB,GACHwxB,GAAA,EACNI,GAEI,KAAT5xB,GACFmlB,EAAQI,QAAQvlB,GACP6pB,EAAA,EAMF3D,EAAKmB,UAAY99B,EAAKsoC,GAI3B9N,GAAW/jB,IAEbmlB,EAAQI,QAAQvlB,GACPyxB,EAAAvQ,OAAO2D,aAAa7kB,GACtBqe,GAEFoK,EAAIzoB,EACZ,CAgBD,SAAS2xB,EAAgB3xB,GACvB,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GACP6pB,EAAA,EACFiI,GAEI,KAAT9xB,GACFmlB,EAAQI,QAAQvlB,GACP6pB,EAAA,EACTz9B,EAAQ,EACD2lC,GAILhO,GAAW/jB,IACbmlB,EAAQI,QAAQvlB,GACP6pB,EAAA,EAGF3D,EAAKmB,UAAY99B,EAAKsoC,GAExBpJ,EAAIzoB,EACZ,CAYD,SAAS8xB,EAAkB9xB,GACzB,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GAGTkmB,EAAKmB,UAAY99B,EAAKsoC,GAExBpJ,EAAIzoB,EACZ,CAYD,SAAS+xB,EAAgB/xB,GACvB,MAAM9V,EAAQ,SACd,OAAI8V,IAAS9V,EAAMw4B,WAAWt2B,MAC5B+4B,EAAQI,QAAQvlB,GACF9V,IAAVkC,EAGK85B,EAAKmB,UAAY99B,EAAKk9B,EAExBsL,GAEFtJ,EAAIzoB,EACZ,CAYD,SAAS4xB,EAAc5xB,GACjB,OAAA+jB,GAAW/jB,IAEbmlB,EAAQI,QAAQvlB,GACPyxB,EAAAvQ,OAAO2D,aAAa7kB,GACtBqe,GAEFoK,EAAIzoB,EACZ,CAcD,SAASqe,EAAQre,GACXA,GAAS,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAewkB,GAA0BxkB,GAAO,CAClF,MAAMgyB,EAAiB,KAAThyB,EACRpW,EAAO6nC,EAAOzmC,cACpB,OAAKgnC,GAAUR,IAAcH,GAAankC,SAAStD,GAM/CwnC,GAAelkC,SAASukC,EAAOzmC,gBACxB6+B,EAAA,EACLmI,GACF7M,EAAQI,QAAQvlB,GACTiyB,GAKF/L,EAAKmB,UAAY99B,EAAGyW,GAAQymB,EAAazmB,KAEzC6pB,EAAA,EAEF3D,EAAKmB,YAAcnB,EAAKN,OAAO8B,KAAKxB,EAAKyB,MAAM9P,MAAQ4Q,EAAIzoB,GAAQwxB,EAAaU,EAAwBlyB,GAAQmyB,EAA4BnyB,KAlBxI6pB,EAAA,EAGF3D,EAAKmB,UAAY99B,EAAGyW,GAAQymB,EAAazmB,GAgBnD,CAGD,OAAa,KAATA,GAAeikB,GAAkBjkB,IACnCmlB,EAAQI,QAAQvlB,GACNyxB,GAAAvQ,OAAO2D,aAAa7kB,GACvBqe,GAEFoK,EAAIzoB,EACZ,CAYD,SAASiyB,EAAiBjyB,GACxB,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GAGTkmB,EAAKmB,UAAY99B,EAAKk9B,GAExBgC,EAAIzoB,EACZ,CAYD,SAASkyB,EAAwBlyB,GAC3B,OAAAykB,GAAczkB,IAChBmlB,EAAQI,QAAQvlB,GACTkyB,GAEFE,EAAYpyB,EACpB,CAyBD,SAASmyB,EAA4BnyB,GACnC,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GACToyB,GAII,KAATpyB,GAAwB,KAATA,GAAe+jB,GAAW/jB,IAC3CmlB,EAAQI,QAAQvlB,GACTqyB,GAEL5N,GAAczkB,IAChBmlB,EAAQI,QAAQvlB,GACTmyB,GAEFC,EAAYpyB,EACpB,CAgBD,SAASqyB,EAAsBryB,GAEzBA,OAAS,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAeikB,GAAkBjkB,IAChFmlB,EAAQI,QAAQvlB,GACTqyB,GAEFC,EAA2BtyB,EACnC,CAeD,SAASsyB,EAA2BtyB,GAClC,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GACTuyB,GAEL9N,GAAczkB,IAChBmlB,EAAQI,QAAQvlB,GACTsyB,GAEFH,EAA4BnyB,EACpC,CAeD,SAASuyB,EAA6BvyB,GAChCA,OAAS,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,EACzDyoB,EAAIzoB,GAEA,KAATA,GAAwB,KAATA,GACjBmlB,EAAQI,QAAQvlB,GACNA,EAAAA,EACHwyB,GAEL/N,GAAczkB,IAChBmlB,EAAQI,QAAQvlB,GACTuyB,GAEFE,EAA+BzyB,EACvC,CAcD,SAASwyB,EAA6BxyB,GACpC,OAAIA,IAAS0xB,GACXvM,EAAQI,QAAQvlB,GACN0xB,EAAA,KACHgB,GAEI,OAAT1yB,GAAiBukB,GAAmBvkB,GAC/ByoB,EAAIzoB,IAEbmlB,EAAQI,QAAQvlB,GACTwyB,EACR,CAYD,SAASC,EAA+BzyB,GACtC,OAAa,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAewkB,GAA0BxkB,GAC/IsyB,EAA2BtyB,IAEpCmlB,EAAQI,QAAQvlB,GACTyyB,EACR,CAaD,SAASC,EAAkC1yB,GACzC,OAAa,KAATA,GAAwB,KAATA,GAAeykB,GAAczkB,GACvCmyB,EAA4BnyB,GAE9ByoB,EAAIzoB,EACZ,CAYD,SAASoyB,EAAYpyB,GACnB,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GACT2yB,GAEFlK,EAAIzoB,EACZ,CAYD,SAAS2yB,EAAc3yB,GACrB,OAAa,OAATA,GAAiBukB,GAAmBvkB,GAG/BymB,EAAazmB,GAElBykB,GAAczkB,IAChBmlB,EAAQI,QAAQvlB,GACT2yB,GAEFlK,EAAIzoB,EACZ,CAYD,SAASymB,EAAazmB,GAChBA,OAAS,KAATA,GAA0B,IAAX6pB,GACjB1E,EAAQI,QAAQvlB,GACT4yB,GAEI,KAAT5yB,GAA0B,IAAX6pB,GACjB1E,EAAQI,QAAQvlB,GACT6yB,GAEI,KAAT7yB,GAA0B,IAAX6pB,GACjB1E,EAAQI,QAAQvlB,GACT8yB,GAEI,KAAT9yB,GAA0B,IAAX6pB,GACjB1E,EAAQI,QAAQvlB,GACT6xB,GAEI,KAAT7xB,GAA0B,IAAX6pB,GACjB1E,EAAQI,QAAQvlB,GACT+yB,IAELxO,GAAmBvkB,IAAqB,IAAX6pB,GAA2B,IAAXA,EAIpC,OAAT7pB,GAAiBukB,GAAmBvkB,IACtCmlB,EAAQK,KAAK,gBACNwN,EAAkBhzB,KAE3BmlB,EAAQI,QAAQvlB,GACTymB,IARLtB,EAAQK,KAAK,gBACNL,EAAQ34B,MAAMymC,GAAiBC,EAAmBF,EAAlD7N,CAAqEnlB,GAQ/E,CAaD,SAASgzB,EAAkBhzB,GACzB,OAAOmlB,EAAQ34B,MAAM2mC,GAA0BC,EAA0BF,EAAlE/N,CAAqFnlB,EAC7F,CAaD,SAASozB,EAAyBpzB,GAIzB,OAHPmlB,EAAQG,MAAM,cACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,cACN6N,CACR,CAaD,SAASA,EAAmBrzB,GAC1B,OAAa,OAATA,GAAiBukB,GAAmBvkB,GAC/BgzB,EAAkBhzB,IAE3BmlB,EAAQG,MAAM,gBACPmB,EAAazmB,GACrB,CAYD,SAAS4yB,EAA0B5yB,GACjC,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GACT6xB,GAEFpL,EAAazmB,EACrB,CAYD,SAAS6yB,EAAuB7yB,GAC9B,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GACPyxB,EAAA,GACF6B,GAEF7M,EAAazmB,EACrB,CAYD,SAASszB,EAAsBtzB,GAC7B,GAAa,KAATA,EAAa,CACTpW,MAAAA,EAAO6nC,EAAOzmC,cAChB,OAAAqmC,GAAankC,SAAStD,IACxBu7B,EAAQI,QAAQvlB,GACT8yB,GAEFrM,EAAazmB,EACrB,CACD,OAAI+jB,GAAW/jB,IAASyxB,EAAOllC,OAAS,GAEtC44B,EAAQI,QAAQvlB,GACNyxB,GAAAvQ,OAAO2D,aAAa7kB,GACvBszB,GAEF7M,EAAazmB,EACrB,CAYD,SAAS+yB,EAAwB/yB,GAC/B,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GACT6xB,GAEFpL,EAAazmB,EACrB,CAoBD,SAAS6xB,EAA8B7xB,GACrC,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GACT8yB,GAII,KAAT9yB,GAA0B,IAAX6pB,GACjB1E,EAAQI,QAAQvlB,GACT6xB,GAEFpL,EAAazmB,EACrB,CAYD,SAAS8yB,EAAkB9yB,GACzB,OAAa,OAATA,GAAiBukB,GAAmBvkB,IACtCmlB,EAAQK,KAAK,gBACN0N,EAAkBlzB,KAE3BmlB,EAAQI,QAAQvlB,GACT8yB,EACR,CAYD,SAASI,EAAkBlzB,GAMzB,OALAmlB,EAAQK,KAAK,YAKNj8B,EAAGyW,EACX,CACH,GA1wBMizB,GAAkB,CACtBtI,SAAS,EACTlF,SA6zBF,SAAiCN,EAAS57B,EAAIk/B,GACrC,OAaP,SAAezoB,GAIb,OAHAmlB,EAAQG,MAAM,cACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,cACNL,EAAQQ,QAAQ+E,GAAWnhC,EAAIk/B,EACvC,CACH,GA/0BM0K,GAA2B,CAC/BxI,SAAS,EACTlF,SA2wBF,SAA0CN,EAAS57B,EAAIk/B,GACrD,MAAMvC,EAAOz7B,KACN,OAaP,SAAeuV,GACT,GAAAukB,GAAmBvkB,GAId,OAHPmlB,EAAQG,MAAM,cACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,cACNuE,EAET,OAAOtB,EAAIzoB,EACZ,EAaD,SAAS+pB,EAAM/pB,GACb,OAAOkmB,EAAKN,OAAO8B,KAAKxB,EAAKyB,MAAM9P,MAAQ4Q,EAAIzoB,GAAQzW,EAAGyW,EAC3D,CACH,GCn0BO,MAAMuzB,GAAW,CACtB3pC,KAAM,WACN67B,SAQF,SAA0BN,EAAS57B,EAAIk/B,GACrC,MAAMvC,EAAOz7B,KAET,IAAAo/B,EAEAz9B,EAEAonC,EACG,OAYP,SAAexzB,GAIN,OAHPmlB,EAAQG,MAAM,YACdH,EAAQG,MAAM,gBACdH,EAAQI,QAAQvlB,GACThE,CACR,EAgBD,SAASA,EAAKgE,GACZ,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GACT2xB,GAEI,KAAT3xB,GACFmlB,EAAQI,QAAQvlB,GACT4xB,GAEI,KAAT5xB,GACFmlB,EAAQI,QAAQvlB,GACTyzB,GAIL1P,GAAW/jB,IACbmlB,EAAQI,QAAQvlB,GACT0zB,GAEFjL,EAAIzoB,EACZ,CAgBD,SAAS2xB,EAAgB3xB,GACvB,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GACT8xB,GAEI,KAAT9xB,GACFmlB,EAAQI,QAAQvlB,GAChB5T,EAAQ,EACD2lC,GAELhO,GAAW/jB,IACbmlB,EAAQI,QAAQvlB,GACTmX,GAEFsR,EAAIzoB,EACZ,CAYD,SAAS8xB,EAAkB9xB,GACzB,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GACT2zB,GAEFlL,EAAIzoB,EACZ,CAYD,SAAS6Y,EAAQ7Y,GACf,OAAa,OAATA,EACKyoB,EAAIzoB,GAEA,KAATA,GACFmlB,EAAQI,QAAQvlB,GACT4zB,GAELrP,GAAmBvkB,IACPwzB,EAAA3a,EACPgb,EAAiB7zB,KAE1BmlB,EAAQI,QAAQvlB,GACT6Y,EACR,CAYD,SAAS+a,EAAa5zB,GACpB,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GACT2zB,GAEF9a,EAAQ7Y,EAChB,CAYD,SAAS2zB,EAAW3zB,GACXA,OAAS,KAATA,EAAcsL,EAAItL,GAAiB,KAATA,EAAc4zB,EAAa5zB,GAAQ6Y,EAAQ7Y,EAC7E,CAYD,SAAS+xB,EAAgB/xB,GACvB,MAAM9V,EAAQ,SACd,OAAI8V,IAAS9V,EAAMw4B,WAAWt2B,MAC5B+4B,EAAQI,QAAQvlB,GACC9V,IAAVkC,EAAyB0nC,EAAQ/B,GAEnCtJ,EAAIzoB,EACZ,CAYD,SAAS8zB,EAAM9zB,GACb,OAAa,OAATA,EACKyoB,EAAIzoB,GAEA,KAATA,GACFmlB,EAAQI,QAAQvlB,GACT+zB,GAELxP,GAAmBvkB,IACPwzB,EAAAM,EACPD,EAAiB7zB,KAE1BmlB,EAAQI,QAAQvlB,GACT8zB,EACR,CAYD,SAASC,EAAW/zB,GAClB,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GACTg0B,GAEFF,EAAM9zB,EACd,CAYD,SAASg0B,EAASh0B,GAChB,OAAa,KAATA,EACKsL,EAAItL,GAEA,KAATA,GACFmlB,EAAQI,QAAQvlB,GACTg0B,GAEFF,EAAM9zB,EACd,CAYD,SAASmX,EAAYnX,GACfA,OAAS,OAATA,GAA0B,KAATA,EACZsL,EAAItL,GAETukB,GAAmBvkB,IACPwzB,EAAArc,EACP0c,EAAiB7zB,KAE1BmlB,EAAQI,QAAQvlB,GACTmX,EACR,CAYD,SAASsc,EAAYzzB,GACnB,OAAa,OAATA,EACKyoB,EAAIzoB,GAEA,KAATA,GACFmlB,EAAQI,QAAQvlB,GACTi0B,GAEL1P,GAAmBvkB,IACPwzB,EAAAC,EACPI,EAAiB7zB,KAE1BmlB,EAAQI,QAAQvlB,GACTyzB,EACR,CAYD,SAASQ,EAAiBj0B,GACxB,OAAgB,KAATA,EAAcsL,EAAItL,GAAQyzB,EAAYzzB,EAC9C,CAYD,SAAS4xB,EAAc5xB,GAEjB,OAAA+jB,GAAW/jB,IACbmlB,EAAQI,QAAQvlB,GACTk0B,GAEFzL,EAAIzoB,EACZ,CAYD,SAASk0B,EAASl0B,GAEhB,OAAa,KAATA,GAAeikB,GAAkBjkB,IACnCmlB,EAAQI,QAAQvlB,GACTk0B,GAEFC,EAAgBn0B,EACxB,CAYD,SAASm0B,EAAgBn0B,GACnB,OAAAukB,GAAmBvkB,IACPwzB,EAAAW,EACPN,EAAiB7zB,IAEtBykB,GAAczkB,IAChBmlB,EAAQI,QAAQvlB,GACTm0B,GAEF7oB,EAAItL,EACZ,CAYD,SAAS0zB,EAAQ1zB,GAEf,OAAa,KAATA,GAAeikB,GAAkBjkB,IACnCmlB,EAAQI,QAAQvlB,GACT0zB,GAEI,KAAT1zB,GAAwB,KAATA,GAAewkB,GAA0BxkB,GACnDo0B,EAAep0B,GAEjByoB,EAAIzoB,EACZ,CAYD,SAASo0B,EAAep0B,GACtB,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GACTsL,GAII,KAATtL,GAAwB,KAATA,GAAe+jB,GAAW/jB,IAC3CmlB,EAAQI,QAAQvlB,GACTq0B,GAEL9P,GAAmBvkB,IACPwzB,EAAAY,EACPP,EAAiB7zB,IAEtBykB,GAAczkB,IAChBmlB,EAAQI,QAAQvlB,GACTo0B,GAEF9oB,EAAItL,EACZ,CAYD,SAASq0B,EAAqBr0B,GAExBA,OAAS,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAeikB,GAAkBjkB,IAChFmlB,EAAQI,QAAQvlB,GACTq0B,GAEFC,EAA0Bt0B,EAClC,CAaD,SAASs0B,EAA0Bt0B,GACjC,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GACTu0B,GAELhQ,GAAmBvkB,IACPwzB,EAAAc,EACPT,EAAiB7zB,IAEtBykB,GAAczkB,IAChBmlB,EAAQI,QAAQvlB,GACTs0B,GAEFF,EAAep0B,EACvB,CAaD,SAASu0B,EAA4Bv0B,GAC/BA,OAAS,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,EACzDyoB,EAAIzoB,GAEA,KAATA,GAAwB,KAATA,GACjBmlB,EAAQI,QAAQvlB,GACPA,EAAAA,EACFw0B,GAELjQ,GAAmBvkB,IACPwzB,EAAAe,EACPV,EAAiB7zB,IAEtBykB,GAAczkB,IAChBmlB,EAAQI,QAAQvlB,GACTu0B,IAETpP,EAAQI,QAAQvlB,GACTy0B,EACR,CAYD,SAASD,EAA4Bx0B,GACnC,OAAIA,IAAS6pB,GACX1E,EAAQI,QAAQvlB,GACP6pB,OAAA,EACF6K,GAEI,OAAT10B,EACKyoB,EAAIzoB,GAETukB,GAAmBvkB,IACPwzB,EAAAgB,EACPX,EAAiB7zB,KAE1BmlB,EAAQI,QAAQvlB,GACTw0B,EACR,CAYD,SAASC,EAA8Bz0B,GACjCA,OAAS,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,EACxEyoB,EAAIzoB,GAEA,KAATA,GAAwB,KAATA,GAAewkB,GAA0BxkB,GACnDo0B,EAAep0B,IAExBmlB,EAAQI,QAAQvlB,GACTy0B,EACR,CAaD,SAASC,EAAiC10B,GACxC,OAAa,KAATA,GAAwB,KAATA,GAAewkB,GAA0BxkB,GACnDo0B,EAAep0B,GAEjByoB,EAAIzoB,EACZ,CAYD,SAASsL,EAAItL,GACX,OAAa,KAATA,GACFmlB,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,gBACbL,EAAQK,KAAK,YACNj8B,GAEFk/B,EAAIzoB,EACZ,CAgBD,SAAS6zB,EAAiB7zB,GAKjB,OAJPmlB,EAAQK,KAAK,gBACbL,EAAQG,MAAM,cACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,cACNmP,CACR,CAgBD,SAASA,EAAgB30B,GAGhB,OAAAykB,GAAczkB,GAAQklB,GAAaC,EAASyP,EAAuB,aAAc1O,EAAKN,OAAOtC,WAAWoF,QAAQC,KAAKz7B,SAAS,qBAAkB,EAAY,EAAtIg4B,CAAyIllB,GAAQ40B,EAAsB50B,EACrM,CAgBD,SAAS40B,EAAsB50B,GAE7B,OADAmlB,EAAQG,MAAM,gBACPkO,EAAYxzB,EACpB,CACH,GChpBO,MAAM60B,GAAW,CACtBjrC,KAAM,WACNi/B,WAmBF,SAA4B/B,GAC1B,IAAI16B,GAAQ,EAEZ,MAAM0oC,EAAY,GACX,OAAE1oC,EAAQ06B,EAAOv6B,QAAQ,CAC9B,MAAMy5B,EAAQc,EAAO16B,GAAO,GAExB,GADM0oC,EAAAhc,KAAKgO,EAAO16B,IACH,eAAf45B,EAAMrnB,MAAwC,cAAfqnB,EAAMrnB,MAAuC,aAAfqnB,EAAMrnB,KAAqB,CAE1F,MAAMkQ,EAAwB,eAAfmX,EAAMrnB,KAAwB,EAAI,EACjDqnB,EAAMrnB,KAAO,OACbvS,GAASyiB,CACV,CACF,CAGGiY,EAAOv6B,SAAWuoC,EAAUvoC,QAC9Bo2B,GAAOmE,EAAQ,EAAGA,EAAOv6B,OAAQuoC,GAE5B,OAAAhO,CACT,EAtCEyK,UAyCF,SAA2BzK,EAAQgC,GACjC,IAGI9C,EAEAhqB,EAEAguB,EAEAj0B,EATA3J,EAAQ06B,EAAOv6B,OACfsiB,EAAS,EAWb,KAAOziB,KAEL,GADQ45B,EAAAc,EAAO16B,GAAO,GAClB4P,EAAM,CAER,GAAmB,SAAfgqB,EAAMrnB,MAAkC,cAAfqnB,EAAMrnB,MAAwBqnB,EAAM+O,UAC/D,MAKuB,UAArBjO,EAAO16B,GAAO,IAAiC,cAAf45B,EAAMrnB,OACxCqnB,EAAM+O,WAAY,EAErB,SAAU/K,GACT,GAAyB,UAArBlD,EAAO16B,GAAO,KAAkC,eAAf45B,EAAMrnB,MAAwC,cAAfqnB,EAAMrnB,QAA0BqnB,EAAMgP,YACjG5oC,EAAAA,EACY,cAAf45B,EAAMrnB,MAAsB,CACrBkQ,EAAA,EACT,KACD,MAEqB,aAAfmX,EAAMrnB,OACPvS,EAAAA,GAGZ,MAAM88B,EAAQ,CACZvqB,KAA+B,cAAzBmoB,EAAO9qB,GAAM,GAAG2C,KAAuB,OAAS,QACtDP,MAAO,IACF0oB,EAAO9qB,GAAM,GAAGoC,OAErBkN,IAAK,IACAwb,EAAOA,EAAOv6B,OAAS,GAAG,GAAG+e,MAG9BjW,EAAQ,CACZsJ,KAAM,QACNP,MAAO,IACF0oB,EAAO9qB,GAAM,GAAGoC,OAErBkN,IAAK,IACAwb,EAAOkD,GAAO,GAAG1e,MAGlBvJ,EAAO,CACXpD,KAAM,YACNP,MAAO,IACF0oB,EAAO9qB,EAAO6S,EAAS,GAAG,GAAGvD,KAElCA,IAAK,IACAwb,EAAOkD,EAAQ,GAAG,GAAG5rB,QAyBrB,OAtBCrI,EAAA,CAAC,CAAC,QAASmzB,EAAOJ,GAAU,CAAC,QAASzzB,EAAOyzB,IAG7C/yB,EAAA+iB,GAAK/iB,EAAO+wB,EAAOx2B,MAAM0L,EAAO,EAAGA,EAAO6S,EAAS,IAGnD9Y,EAAA+iB,GAAK/iB,EAAO,CAAC,CAAC,QAASgM,EAAM+mB,KAKrC/yB,EAAQ+iB,GAAK/iB,EAAO8yB,GAAWC,EAAQlD,OAAOtC,WAAWqG,WAAWhB,KAAM7B,EAAOx2B,MAAM0L,EAAO6S,EAAS,EAAGmb,EAAQ,GAAIlB,IAG9G/yB,EAAA+iB,GAAK/iB,EAAO,CAAC,CAAC,OAAQgM,EAAM+mB,GAAUhC,EAAOkD,EAAQ,GAAIlD,EAAOkD,EAAQ,GAAI,CAAC,OAAQ30B,EAAOyzB,KAGpG/yB,EAAQ+iB,GAAK/iB,EAAO+wB,EAAOx2B,MAAM05B,EAAQ,IAGjCj0B,EAAA+iB,GAAK/iB,EAAO,CAAC,CAAC,OAAQmzB,EAAOJ,KACrCnG,GAAOmE,EAAQ9qB,EAAM8qB,EAAOv6B,OAAQwJ,GAC7B+wB,CACT,EAhIErB,SAuIF,SAA0BN,EAAS57B,EAAIk/B,GACrC,MAAMvC,EAAOz7B,KACT2B,IAEA6oC,EAEAzpC,EAJAY,EAAQ85B,EAAKY,OAAOv6B,OAOxB,KAAOH,KACA85B,IAA+B,eAA/BA,EAAKY,OAAO16B,GAAO,GAAGuS,MAAwD,cAA/BunB,EAAKY,OAAO16B,GAAO,GAAGuS,QAA0BunB,EAAKY,OAAO16B,GAAO,GAAG4oC,UAAW,CACnIC,EAAa/O,EAAKY,OAAO16B,GAAO,GAChC,KACD,CAEI,OAiBP,SAAe4T,GAEb,IAAKi1B,EACH,OAAOxM,EAAIzoB,GAYb,GAAIi1B,EAAWF,UACb,OAAOG,EAAYl1B,GAWd,OATPxU,EAAU06B,EAAKN,OAAOp6B,QAAQ0B,SAAS42B,GAAoBoC,EAAKuD,eAAe,CAC7ErrB,MAAO62B,EAAW3pB,IAClBA,IAAK4a,EAAKyB,UAEZxC,EAAQG,MAAM,YACdH,EAAQG,MAAM,eACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,eACbL,EAAQK,KAAK,YACNuE,CACR,EAkBD,SAASA,EAAM/pB,GAKb,OAAa,KAATA,EACKmlB,EAAQQ,QAAQwP,GAAmBC,EAAY5pC,EAAU4pC,EAAaF,EAAtE/P,CAAmFnlB,GAI/E,KAATA,EACKmlB,EAAQQ,QAAQ0P,GAAwBD,EAAY5pC,EAAU8pC,EAAmBJ,EAAjF/P,CAA8FnlB,GAIhGxU,EAAU4pC,EAAWp1B,GAAQk1B,EAAYl1B,EACjD,CAgBD,SAASs1B,EAAiBt1B,GACxB,OAAOmlB,EAAQQ,QAAQ4P,GAA6BH,EAAYF,EAAzD/P,CAAsEnlB,EAC9E,CAkBD,SAASo1B,EAAWp1B,GAElB,OAAOzW,EAAGyW,EACX,CAkBD,SAASk1B,EAAYl1B,GAEnB,OADAi1B,EAAWD,WAAY,EAChBvM,EAAIzoB,EACZ,CACH,GA9RMm1B,GAAoB,CACxB1P,SAoSF,SAA0BN,EAAS57B,EAAIk/B,GAC9B,OAYP,SAAuBzoB,GAKd,OAJPmlB,EAAQG,MAAM,YACdH,EAAQG,MAAM,kBACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,kBACNgQ,CACR,EAYD,SAASA,EAAex1B,GACf,OAAAwkB,GAA0BxkB,GAAQswB,GAAkBnL,EAASsQ,EAA3BnF,CAAyCtwB,GAAQy1B,EAAaz1B,EACxG,CAYD,SAASy1B,EAAaz1B,GACpB,OAAa,KAATA,EACK01B,EAAY11B,GAEdqvB,GAAmBlK,EAASwQ,EAA0BC,EAA4B,sBAAuB,6BAA8B,mCAAoC,yBAA0B,4BAA6B,GAAlOvG,CAAsOrvB,EAC9O,CAYD,SAAS21B,EAAyB31B,GACzB,OAAAwkB,GAA0BxkB,GAAQswB,GAAkBnL,EAAS0Q,EAA3BvF,CAA4CtwB,GAAQ01B,EAAY11B,EAC1G,CAYD,SAAS41B,EAA2B51B,GAClC,OAAOyoB,EAAIzoB,EACZ,CAYD,SAAS61B,EAAgB71B,GACvB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,EACzBowB,GAAajL,EAAS2Q,EAAoBrN,EAAK,gBAAiB,sBAAuB,sBAAvF2H,CAA8GpwB,GAEhH01B,EAAY11B,EACpB,CAYD,SAAS81B,EAAmB91B,GACnB,OAAAwkB,GAA0BxkB,GAAQswB,GAAkBnL,EAASuQ,EAA3BpF,CAAwCtwB,GAAQ01B,EAAY11B,EACtG,CAYD,SAAS01B,EAAY11B,GACnB,OAAa,KAATA,GACFmlB,EAAQG,MAAM,kBACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,kBACbL,EAAQK,KAAK,YACNj8B,GAEFk/B,EAAIzoB,EACZ,CACH,GApaMq1B,GAAyB,CAC7B5P,SA0aF,SAA+BN,EAAS57B,EAAIk/B,GAC1C,MAAMvC,EAAOz7B,KACN,OAYP,SAAuBuV,GACd,OAAAgwB,GAAaxR,KAAK0H,EAAMf,EAAS4Q,EAAoBC,EAAsB,YAAa,kBAAmB,kBAA3GhG,CAA8HhwB,EACtI,EAYD,SAAS+1B,EAAmB/1B,GACnBkmB,OAAAA,EAAKN,OAAOp6B,QAAQ0B,SAAS42B,GAAoBoC,EAAKuD,eAAevD,EAAKY,OAAOZ,EAAKY,OAAOv6B,OAAS,GAAG,IAAI+D,MAAM,GAAK,KAAM/G,EAAGyW,GAAQyoB,EAAIzoB,EACrJ,CAYD,SAASg2B,EAAqBh2B,GAC5B,OAAOyoB,EAAIzoB,EACZ,CACH,GApdMu1B,GAA8B,CAClC9P,SA0dF,SAAoCN,EAAS57B,EAAIk/B,GACxC,OAcP,SAAiCzoB,GAOxB,OAJPmlB,EAAQG,MAAM,aACdH,EAAQG,MAAM,mBACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,mBACNyQ,CACR,EAcD,SAASA,EAAuBj2B,GAC9B,OAAa,KAATA,GACFmlB,EAAQG,MAAM,mBACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,mBACbL,EAAQK,KAAK,aACNj8B,GAEFk/B,EAAIzoB,EACZ,CACH,GCniBO,MAAMk2B,GAAkB,CAC7BtsC,KAAM,kBACNi/B,WAAYgM,GAAShM,WACrBpD,SAQF,SAAiCN,EAAS57B,EAAIk/B,GAC5C,MAAMvC,EAAOz7B,KACN,OAYP,SAAeuV,GAKN,OAJPmlB,EAAQG,MAAM,cACdH,EAAQG,MAAM,oBACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,oBACNxpB,CACR,EAYD,SAASA,EAAKgE,GACZ,OAAa,KAATA,GACFmlB,EAAQG,MAAM,eACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,eACbL,EAAQK,KAAK,cACNuE,GAEFtB,EAAIzoB,EACZ,CA6BD,SAAS+pB,EAAM/pB,GAMNA,OAAS,KAATA,GAAe,2BAA4BkmB,EAAKN,OAAOtC,WAAamF,EAAIzoB,GAAQzW,EAAGyW,EAC3F,CACH,GCzFO,MAAMm2B,GAAiB,CAC5BvsC,KAAM,iBACNi/B,WAAYgM,GAAShM,WACrBpD,SAQF,SAAgCN,EAAS57B,EAAIk/B,GAC3C,MAAMvC,EAAOz7B,KACN,OAYP,SAAeuV,GAMN,OALPmlB,EAAQG,MAAM,aACdH,EAAQG,MAAM,eACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,eACbL,EAAQK,KAAK,aACNuE,CACR,EAGD,SAASA,EAAM/pB,GAKNA,OAAS,KAATA,GAAe,2BAA4BkmB,EAAKN,OAAOtC,WAAamF,EAAIzoB,GAAQzW,EAAGyW,EAC3F,CACH,GC1CO,MAAMo2B,GAAa,CACxBxsC,KAAM,aACN67B,SAQF,SAA4BN,EAAS57B,GAC5B,OAGP,SAAeyW,GAIN,OAHPmlB,EAAQG,MAAM,cACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,cACNN,GAAaC,EAAS57B,EAAI,aAClC,CACH,GCnBO,MAAM8sC,GAAgB,CAC3BzsC,KAAM,gBACN67B,SAQF,SAA+BN,EAAS57B,EAAIk/B,GAC1C,IAEIoB,EAFAlsB,EAAO,EAGJ,OAYP,SAAeqC,GAGb,OAFAmlB,EAAQG,MAAM,iBAehB,SAAgBtlB,GAEd,OADSA,EAAAA,EACFssB,EAAQtsB,EAChB,CAhBQwjB,CAAOxjB,EACf,EA2BD,SAASssB,EAAQtsB,GACf,OAAIA,IAAS6pB,GACX1E,EAAQG,MAAM,yBACPgR,EAASt2B,IAEdrC,GAAQ,IAAe,OAATqC,GAAiBukB,GAAmBvkB,KACpDmlB,EAAQK,KAAK,iBACNj8B,EAAGyW,IAELyoB,EAAIzoB,EACZ,CAYD,SAASs2B,EAASt2B,GAChB,OAAIA,IAAS6pB,GACX1E,EAAQI,QAAQvlB,GAChBrC,IACO24B,IAETnR,EAAQK,KAAK,yBACNf,GAAczkB,GAAQklB,GAAaC,EAASmH,EAAS,aAA/BpH,CAA6CllB,GAAQssB,EAAQtsB,GAC3F,CACH,GCpFO,MAAMxK,GAAO,CAClBixB,aAAc,CACZhB,SAiHJ,SAAkCN,EAAS57B,EAAIk/B,GAC7C,MAAMvC,EAAOz7B,KAEb,OADAy7B,EAAKM,eAAeI,gBAAa,EAC1BzB,EAAQ34B,MAAMk+B,GAGrB,SAAiB1qB,GAKR,OAJPkmB,EAAKM,eAAe+P,kBAAoBrQ,EAAKM,eAAe+P,mBAAqBrQ,EAAKM,eAAegQ,iBAI9FtR,GAAaC,EAAS57B,EAAI,iBAAkB28B,EAAKM,eAAe7oB,KAAO,EAAvEunB,CAA0EllB,EAClF,EAGD,SAAkBA,GAChB,GAAIkmB,EAAKM,eAAe+P,oBAAsB9R,GAAczkB,GAG1D,OAFAkmB,EAAKM,eAAe+P,uBAAoB,EACxCrQ,EAAKM,eAAegQ,sBAAmB,EAChCC,EAAiBz2B,GAI1B,OAFAkmB,EAAKM,eAAe+P,uBAAoB,EACxCrQ,EAAKM,eAAegQ,sBAAmB,EAChCrR,EAAQQ,QAAQ+Q,GAAiBntC,EAAIktC,EAArCtR,CAAuDnlB,EAC/D,GAGD,SAASy2B,EAAiBz2B,GAOjB,OALPkmB,EAAKM,eAAeI,YAAa,EAEjCV,EAAKmB,eAAY,EAGVnC,GAAaC,EAASA,EAAQQ,QAAQnwB,GAAMjM,EAAIk/B,GAAM,aAAcvC,EAAKN,OAAOtC,WAAWoF,QAAQC,KAAKz7B,SAAS,qBAAkB,EAAY,EAA/Ig4B,CAAkJllB,EAC1J,CACH,GAnJEwlB,KA0KF,SAAyBL,GACfA,EAAAK,KAAK/6B,KAAK+7B,eAAe7nB,KACnC,EA3KE/U,KAAM,OACN67B,SAuBF,SAA2BN,EAAS57B,EAAIk/B,GACtC,MAAMvC,EAAOz7B,KACPihC,EAAOxF,EAAKY,OAAOZ,EAAKY,OAAOv6B,OAAS,GAC9C,IAAIoqC,EAAcjL,GAAyB,eAAjBA,EAAK,GAAG/sB,KAAwB+sB,EAAK,GAAGjC,eAAeiC,EAAK,IAAI,GAAMn/B,OAAS,EACrGoR,EAAO,EACJ,OAGP,SAAeqC,GACP,MAAA5K,EAAO8wB,EAAKM,eAAe7nB,OAAkB,KAATqB,GAAwB,KAATA,GAAwB,KAATA,EAAc,gBAAkB,eACxG,GAAa,kBAAT5K,GAA4B8wB,EAAKM,eAAeqD,QAAU7pB,IAASkmB,EAAKM,eAAeqD,OAASzF,GAAWpkB,GAAO,CAOpH,GANKkmB,EAAKM,eAAe7nB,OACvBunB,EAAKM,eAAe7nB,KAAOvJ,EAC3B+vB,EAAQG,MAAMlwB,EAAM,CAClB01B,YAAY,KAGH,kBAAT11B,EAEF,OADA+vB,EAAQG,MAAM,kBACE,KAATtlB,GAAwB,KAATA,EAAcmlB,EAAQ34B,MAAM6pC,GAAe5N,EAAKmO,EAAlCzR,CAA4CnlB,GAAQ42B,EAAS52B,GAEnG,IAAKkmB,EAAKmB,WAAsB,KAATrnB,EAGrB,OAFAmlB,EAAQG,MAAM,kBACdH,EAAQG,MAAM,iBACPwE,EAAO9pB,EAEjB,CACD,OAAOyoB,EAAIzoB,EACZ,EAGD,SAAS8pB,EAAO9pB,GACd,OAAIokB,GAAWpkB,MAAWrC,EAAO,IAC/BwnB,EAAQI,QAAQvlB,GACT8pB,KAEH5D,EAAKmB,WAAa1pB,EAAO,KAAOuoB,EAAKM,eAAeqD,OAAS7pB,IAASkmB,EAAKM,eAAeqD,OAAkB,KAAT7pB,GAAwB,KAATA,IACtHmlB,EAAQK,KAAK,iBACNoR,EAAS52B,IAEXyoB,EAAIzoB,EACZ,CAKD,SAAS42B,EAAS52B,GAKhB,OAJAmlB,EAAQG,MAAM,kBACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,kBACbU,EAAKM,eAAeqD,OAAS3D,EAAKM,eAAeqD,QAAU7pB,EACpDmlB,EAAQ34B,MAAMk+B,GAErBxE,EAAKmB,UAAYoB,EAAMoO,EAAS1R,EAAQQ,QAAQmR,GAAmCC,EAAaC,GACjG,CAGD,SAASH,EAAQ72B,GAGf,OAFAkmB,EAAKM,eAAegQ,kBAAmB,EACvCG,IACOI,EAAY/2B,EACpB,CAGD,SAASg3B,EAAYh3B,GACf,OAAAykB,GAAczkB,IAChBmlB,EAAQG,MAAM,4BACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,4BACNuR,GAEFtO,EAAIzoB,EACZ,CAGD,SAAS+2B,EAAY/2B,GAEnB,OADAkmB,EAAKM,eAAe7oB,KAAOg5B,EAAczQ,EAAKuD,eAAetE,EAAQK,KAAK,mBAAmB,GAAMj5B,OAC5FhD,EAAGyW,EACX,CACH,GAlGM82B,GAAoC,CACxCnM,SAAS,EACTlF,SA2KF,SAA0CN,EAAS57B,EAAIk/B,GACrD,MAAMvC,EAAOz7B,KAIb,OAAOy6B,GAAaC,EAGpB,SAAqBnlB,GACnB,MAAM0rB,EAAOxF,EAAKY,OAAOZ,EAAKY,OAAOv6B,OAAS,GAC9C,OAAQk4B,GAAczkB,IAAS0rB,GAAyB,6BAAjBA,EAAK,GAAG/sB,KAAsCpV,EAAGyW,GAAQyoB,EAAIzoB,EACrG,EANyC,2BAA4BkmB,EAAKN,OAAOtC,WAAWoF,QAAQC,KAAKz7B,SAAS,qBAAkB,EAAY,EAOnJ,GAnLMwpC,GAAkB,CACtB/L,SAAS,EACTlF,SA4IF,SAAwBN,EAAS57B,EAAIk/B,GACnC,MAAMvC,EAAOz7B,KACb,OAAOy6B,GAAaC,EAGpB,SAAqBnlB,GACnB,MAAM0rB,EAAOxF,EAAKY,OAAOZ,EAAKY,OAAOv6B,OAAS,GACvC,OAAAm/B,GAAyB,mBAAjBA,EAAK,GAAG/sB,MAA6B+sB,EAAK,GAAGjC,eAAeiC,EAAK,IAAI,GAAMn/B,SAAW25B,EAAKM,eAAe7oB,KAAOpU,EAAGyW,GAAQyoB,EAAIzoB,EAChJ,EANyC,iBAAkBkmB,EAAKM,eAAe7oB,KAAO,EAOzF,GC1KO,MAAMs5B,GAAkB,CAC7BrtC,KAAM,kBACN2nC,UAKF,SAAkCzK,EAAQgC,GAExC,IAEIx2B,EAEAyP,EAEAnX,EANAwB,EAAQ06B,EAAOv6B,OAUnB,KAAOH,KACL,GAAyB,UAArB06B,EAAO16B,GAAO,GAAgB,CAChC,GAA8B,YAA1B06B,EAAO16B,GAAO,GAAGuS,KAAoB,CACvCrM,EAAUlG,EACV,KACD,CAC6B,cAA1B06B,EAAO16B,GAAO,GAAGuS,OACnBoD,EAAO3V,EAEV,KAG+B,YAA1B06B,EAAO16B,GAAO,GAAGuS,MAEZmoB,EAAAnE,OAAOv2B,EAAO,GAElBxB,GAAwC,eAA1Bk8B,EAAO16B,GAAO,GAAGuS,OAClC/T,EAAawB,GAInB,MAAM8qC,EAAU,CACdv4B,KAAM,gBACNP,MAAO,IACF0oB,EAAOx0B,GAAS,GAAG8L,OAExBkN,IAAK,IACAwb,EAAOA,EAAOv6B,OAAS,GAAG,GAAG+e,MAKpCwb,EAAO/kB,GAAM,GAAGpD,KAAO,oBAInB/T,GACFk8B,EAAOnE,OAAO5gB,EAAM,EAAG,CAAC,QAASm1B,EAASpO,IAC1ChC,EAAOnE,OAAO/3B,EAAa,EAAG,EAAG,CAAC,OAAQk8B,EAAOx0B,GAAS,GAAIw2B,IAC9DhC,EAAOx0B,GAAS,GAAGgZ,IAAM,IACpBwb,EAAOl8B,GAAY,GAAG0gB,MAGpBhZ,EAAAA,GAAS,GAAK4kC,EAKhB,OADPpQ,EAAOhO,KAAK,CAAC,OAAQoe,EAASpO,IACvBhC,CACT,EAjEErB,SAwEF,SAAiCN,EAAS57B,EAAIk/B,GAC5C,MAAMvC,EAAOz7B,KAET,IAAAo/B,EACG,OAaP,SAAe7pB,GACT5T,IAEA+qC,EAFA/qC,EAAQ85B,EAAKY,OAAOv6B,OAIxB,KAAOH,KAGD85B,GAA+B,eAA/BA,EAAKY,OAAO16B,GAAO,GAAGuS,MAAwD,eAA/BunB,EAAKY,OAAO16B,GAAO,GAAGuS,MAAwD,YAA/BunB,EAAKY,OAAO16B,GAAO,GAAGuS,KAAoB,CAC1Iw4B,EAA2C,cAA/BjR,EAAKY,OAAO16B,GAAO,GAAGuS,KAClC,KACD,CAKC,IAACunB,EAAKN,OAAO8B,KAAKxB,EAAKyB,MAAM9P,QAAUqO,EAAKmB,WAAa8P,GAG3D,OAFAhS,EAAQG,MAAM,qBACLtlB,EAAAA,EAiBb,SAAgBA,GAEd,OADAmlB,EAAQG,MAAM,6BACPwE,EAAO9pB,EACf,CAnBUwjB,CAAOxjB,GAEhB,OAAOyoB,EAAIzoB,EACZ,EA6BD,SAAS8pB,EAAO9pB,GACd,OAAIA,IAAS6pB,GACX1E,EAAQI,QAAQvlB,GACT8pB,IAET3E,EAAQK,KAAK,6BACNf,GAAczkB,GAAQklB,GAAaC,EAAS4E,EAAO,aAA7B7E,CAA2CllB,GAAQ+pB,EAAM/pB,GACvF,CAaD,SAAS+pB,EAAM/pB,GACb,OAAa,OAATA,GAAiBukB,GAAmBvkB,IACtCmlB,EAAQK,KAAK,qBACNj8B,EAAGyW,IAELyoB,EAAIzoB,EACZ,CACH,GC3KO,MAAM6nB,GAAO,CAClBpC,SASF,SAAwBN,GACtB,MAAMe,EAAOz7B,KACPoiC,EAAU1H,EAAQQ,QAExB+E,GAMA,SAAuB1qB,GACrB,GAAa,OAATA,EAEF,YADAmlB,EAAQI,QAAQvlB,GAOX,OAJPmlB,EAAQG,MAAM,mBACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,mBACbU,EAAKgB,sBAAmB,EACjB2F,CACR,EAdD1H,EAAQQ,QAAQl7B,KAAKm7B,OAAOtC,WAAW8T,YAAaC,EAAgBnS,GAAaC,EAASA,EAAQQ,QAAQl7B,KAAKm7B,OAAOtC,WAAWuE,KAAMwP,EAAgBlS,EAAQQ,QAAQrzB,GAAS+kC,IAAkB,gBAC3L,OAAAxK,EAgBP,SAASwK,EAAer3B,GACtB,GAAa,OAATA,EAQG,OAJPmlB,EAAQG,MAAM,cACdH,EAAQI,QAAQvlB,GAChBmlB,EAAQK,KAAK,cACbU,EAAKgB,sBAAmB,EACjB2F,EAPL1H,EAAQI,QAAQvlB,EAQnB,CACH,GC9CO,MAAMs3B,GAAW,CACtBzO,WAAY0O,MAEDplB,GAASqlB,GAAkB,UAC3Bz1B,GAAOy1B,GAAkB,QAQtC,SAASA,GAAkBC,GAClB,MAAA,CACL5O,WAAY0O,GAAyB,SAAVE,EAAmBC,QAAyB,GACvEjS,SAQF,SAAwBN,GACtB,MAAMe,EAAOz7B,KACP64B,EAAa74B,KAAKm7B,OAAOtC,WAAWmU,GACpC11B,EAAOojB,EAAQQ,QAAQrC,EAAYllB,EAAOu5B,GACzC,OAAAv5B,EAGP,SAASA,EAAM4B,GACb,OAAOssB,EAAQtsB,GAAQ+B,EAAK/B,GAAQ23B,EAAQ33B,EAC7C,CAGD,SAAS23B,EAAQ33B,GACf,GAAa,OAATA,EAMG,OAFPmlB,EAAQG,MAAM,QACdH,EAAQI,QAAQvlB,GACTpN,EALLuyB,EAAQI,QAAQvlB,EAMnB,CAGD,SAASpN,EAAKoN,GACR,OAAAssB,EAAQtsB,IACVmlB,EAAQK,KAAK,QACNzjB,EAAK/B,KAIdmlB,EAAQI,QAAQvlB,GACTpN,EACR,CAQD,SAAS05B,EAAQtsB,GACf,GAAa,OAATA,EACK,OAAA,EAEHxK,MAAAA,EAAO8tB,EAAWtjB,GACxB,IAAI5T,GAAQ,EACZ,GAAIoJ,EAGK,OAAEpJ,EAAQoJ,EAAKjJ,QAAQ,CACtB,MAAAg6B,EAAO/wB,EAAKpJ,GACd,IAACm6B,EAAKR,UAAYQ,EAAKR,SAASvH,KAAK0H,EAAMA,EAAKH,UAC3C,OAAA,CAEV,CAEI,OAAA,CACR,CACF,EACH,CAQA,SAASwR,GAAeK,GACf,OAGE,SAAe9Q,EAAQgC,GAC9B,IAEIxD,EAFAl5B,GAAQ,EAML,OAAEA,GAAS06B,EAAOv6B,aACT,IAAV+4B,EACEwB,EAAO16B,IAAoC,SAA1B06B,EAAO16B,GAAO,GAAGuS,OAC5BvS,EAAAA,EACRA,KAEQ06B,EAAO16B,IAAoC,SAA1B06B,EAAO16B,GAAO,GAAGuS,OAExCvS,IAAUk5B,EAAQ,IACbwB,EAAAxB,GAAO,GAAGha,IAAMwb,EAAO16B,EAAQ,GAAG,GAAGkf,IAC5Cwb,EAAOnE,OAAO2C,EAAQ,EAAGl5B,EAAQk5B,EAAQ,GACzCl5B,EAAQk5B,EAAQ,GAEVA,OAAA,GAGZ,OAAOsS,EAAgBA,EAAc9Q,EAAQgC,GAAWhC,CACzD,CACH,CAaA,SAAS4Q,GAAuB5Q,EAAQgC,GACtC,IAAIuF,EAAa,EAEV,OAAEA,GAAcvH,EAAOv6B,QAC5B,IAAK8hC,IAAevH,EAAOv6B,QAAyC,eAA/Bu6B,EAAOuH,GAAY,GAAG1vB,OAA6D,SAAnCmoB,EAAOuH,EAAa,GAAG,GAAG1vB,KAAiB,CAC9H,MAAM/L,EAAOk0B,EAAOuH,EAAa,GAAG,GAC9BwJ,EAAS/O,EAAQX,YAAYv1B,GACnC,IAIIklC,EAJA1rC,EAAQyrC,EAAOtrC,OACfwrC,GAAc,EACdp6B,EAAO,EAGX,KAAOvR,KAAS,CACR,MAAA4rC,EAAQH,EAAOzrC,GACjB,GAAiB,iBAAV4rC,EAAoB,CAE7B,IADAD,EAAcC,EAAMzrC,OACyB,KAAtCyrC,EAAMtV,WAAWqV,EAAc,IACpCp6B,IACAo6B,IAEE,GAAAA,EAAa,MACHA,GAAA,CACf,MAAA,IAEsB,IAAdC,EACAF,GAAA,EACPn6B,aACmB,IAAVq6B,EAEJ,CAEL5rC,IACA,KACD,CACF,CAMD,GAHI08B,EAAQ2F,0BAA4BJ,IAAevH,EAAOv6B,SACrDoR,EAAA,GAELA,EAAM,CACR,MAAMqoB,EAAQ,CACZrnB,KAAM0vB,IAAevH,EAAOv6B,QAAUurC,GAAQn6B,EAAO,EAAI,aAAe,oBACxES,MAAO,CACL6rB,aAAc79B,EAAQ2rC,EAAcnlC,EAAKwL,MAAM6rB,aAAe8N,EAC9DE,OAAQrlC,EAAKwL,MAAM65B,OAAS7rC,EAC5ByrB,KAAMjlB,EAAK0Y,IAAIuM,KACfP,OAAQ1kB,EAAK0Y,IAAIgM,OAAS3Z,EAC1BkR,OAAQjc,EAAK0Y,IAAIuD,OAASlR,GAE5B2N,IAAK,IACA1Y,EAAK0Y,MAGZ1Y,EAAK0Y,IAAM,IACN0a,EAAM5nB,OAEPxL,EAAKwL,MAAMyQ,SAAWjc,EAAK0Y,IAAIuD,OAC1BhkB,OAAAC,OAAO8H,EAAMozB,IAEpBc,EAAOnE,OAAO0L,EAAY,EAAG,CAAC,QAASrI,EAAO8C,GAAU,CAAC,OAAQ9C,EAAO8C,IAC1DuF,GAAA,EAEjB,CACDA,GACD,CAEI,OAAAvH,CACT,CC3MO,MAAM1E,GAAW,CACtB,GAAM5sB,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMo1B,IAIK/E,GAAiB,CAC5B,GAAMj7B,IAIKwsC,GAAc,CACzB,KAAMhL,GACN,KAAMA,GACN,GAAMA,IAIKvE,GAAO,CAClB,GAAMqJ,GACN,GAAMmF,GACN,GAAM,CAACY,GAAiBZ,IACxB,GAAM/E,GACN,GAAM2F,GACN,GAAMZ,GACN,GAAMnL,GACN,IAAOA,IAII/Y,GAAS,CACpB,GAAMoQ,GACN,GAAMwI,IAIKhpB,GAAO,CAClB,KAAMq0B,GACN,KAAMA,GACN,KAAMA,GACN,GAAMF,GACN,GAAM3T,GACN,GAAM0G,GACN,GAAM,CAACiB,GAAUqJ,IACjB,GAAM4C,GACN,GAAM,CAAClF,GAAiBlG,IACxB,GAAM8J,GACN,GAAM5L,GACN,GAAMuD,IAIK7C,GAAa,CACxBhB,KAAM,CAACM,GAAWiP,6EAIY,CAC9BvP,KAAM,CAAC,GAAI,+BAIU,CACrBA,KAAM,8GCvBD,SAASwP,GAAgBvS,EAAQwS,EAAYnsB,GAElD,IAAIwO,EAAQ,CACVwP,cAAc,EACdgO,OAAQ,EACRpgB,KAAM5L,GAAQA,EAAK4L,MAAQ,EAC3BP,OAAQrL,GAAQA,EAAKqL,QAAU,EAC/BzI,OAAQ5C,GAAQA,EAAK4C,QAAU,GAGjC,MAAMwpB,EAAc,CAAA,EAEdC,EAAuB,GAE7B,IAAIT,EAAS,GAETpc,EAAQ,GASZ,MAAM0J,EAAU,CACdQ,QAAS4S,EAoNF,SAAsBC,EAAWzrC,GAC9B0rC,EAAAD,EAAWzrC,EAAKkf,KAC3B,GArNCzf,MAAO+rC,EAAiBG,GACxBnT,QAsJF,SAAiBvlB,GACXukB,GAAmBvkB,IACrBya,EAAM5C,OACN4C,EAAMnD,OAAS,EACfmD,EAAM5L,SAAmB,IAAT7O,EAAc,EAAI,QAEZ,IAAbA,IACTya,EAAMnD,SACNmD,EAAM5L,UAIJ4L,EAAMwP,aAAe,EACvBxP,EAAMwd,UAENxd,EAAMwP,eAGFxP,EAAMwP,eAIV4N,EAAOpd,EAAMwd,QAAQ1rC,SACnBkuB,EAAMwP,cAAe,EACrBxP,EAAMwd,WAKVnP,EAAQ/C,SAAW/lB,CAIpB,EAtLCslB,MAyLO,SAAM3mB,EAAMg6B,GAGb,MAAA3S,EAAQ2S,GAAU,GAKjB,OAJP3S,EAAMrnB,KAAOA,EACbqnB,EAAM5nB,MAAQupB,IACdmB,EAAQhC,OAAOhO,KAAK,CAAC,QAASkN,EAAO8C,IACrCrN,EAAM3C,KAAKkN,GACJA,CACR,EAjMCR,KAoMF,SAAc7mB,GACN,MAAAqnB,EAAQvK,EAAMwD,MAGb,OAFP+G,EAAM1a,IAAMqc,IACZmB,EAAQhC,OAAOhO,KAAK,CAAC,OAAQkN,EAAO8C,IAC7B9C,CACR,EAxMCqB,UAAWkR,EAAiBG,EAAmB,CAC7CrR,WAAW,KASTyB,EAAU,CACd9oB,KAAM,KACNwmB,eAAgB,CAAE,EAClB4B,WA8EF,SAAoBl+B,GACNmuC,EAAAnuC,EAAM2tB,MAAQ3tB,EAAMotB,UAEjC,EAhFCwP,OAAQ,GACRa,MACA/B,SACAG,SAAU,KACV0D,eA4CO,SAAezD,EAAO4S,GAC7B,OAuZJ,SAAyBf,EAAQe,GAC/B,IAAIxsC,GAAQ,EAEZ,MAAM6kB,EAAS,GAEX,IAAA4nB,EACG,OAAEzsC,EAAQyrC,EAAOtrC,QAAQ,CACxB,MAAAyrC,EAAQH,EAAOzrC,GAEjB,IAAAlC,EACA,GAAiB,iBAAV8tC,EACD9tC,EAAA8tC,OACH,OAAQA,GACb,KACE,EACU9tC,EAAA,KACR,MAEJ,KACE,EACUA,EAAA,KACR,MAEJ,KACE,EACUA,EAAA,OACR,MAEJ,KACE,EACEA,EAAQ0uC,EAAa,IAAM,KAC3B,MAEJ,KACE,EACE,IAAKA,GAAcC,EAAO,SAClB3uC,EAAA,IACR,MAEJ,QAGYA,EAAAg3B,OAAO2D,aAAamT,GAGlCa,GAAkB,IAAVb,EACR/mB,EAAO6H,KAAK5uB,EACb,CACM,OAAA+mB,EAAO2P,KAAK,GACrB,CAxcWkY,CAAgB3Q,EAAYnC,GAAQ4S,EAC5C,EA7CCzQ,cACAE,MAsBF,SAAe/3B,GAKb,GAJSunC,EAAA/e,GAAK+e,EAAQvnC,OAIY,OAA9BunC,EAAOA,EAAOtrC,OAAS,GACzB,MAAO,GAMT,OAJAksC,EAAUL,EAAY,GAGtBtP,EAAQhC,OAAS+B,GAAWyP,EAAsBxP,EAAQhC,OAAQgC,GAC3DA,EAAQhC,MAChB,GA3BD,IAAItJ,EAAQ4a,EAAW3S,SAASjH,KAAKsK,EAAS3D,GAWvC,OAHHiT,EAAWvP,YACbyP,EAAqBxf,KAAKsf,GAErBtP,EA4BP,SAASX,EAAYnC,GACZ,OA2WX,SAAqB6R,EAAQ7R,GACrB,MAAA+S,EAAa/S,EAAM5nB,MAAM65B,OACzBe,EAAmBhT,EAAM5nB,MAAM6rB,aAC/BgP,EAAWjT,EAAM1a,IAAI2sB,OACrBiB,EAAiBlT,EAAM1a,IAAI2e,aAE7B,IAAAkP,EACJ,GAAIJ,IAAeE,EAEjBE,EAAO,CAACtB,EAAOkB,GAAYzoC,MAAM0oC,EAAkBE,QAC9C,CAEL,GADOC,EAAAtB,EAAOvnC,MAAMyoC,EAAYE,GAC5BD,GAAuB,EAAA,CACnB,MAAAI,EAAOD,EAAK,GACE,iBAATC,EACTD,EAAK,GAAKC,EAAK9oC,MAAM0oC,GAGrBG,EAAKpM,OAER,CACGmM,EAAiB,GAEnBC,EAAKrgB,KAAK+e,EAAOoB,GAAU3oC,MAAM,EAAG4oC,GAEvC,CACM,OAAAC,CACT,CAtYWE,CAAYxB,EAAQ7R,EAC5B,CAGD,SAAS2B,IAED,MAAAsC,aACJA,EAAAgO,OACAA,EAAApgB,KACAA,EAAAP,OACAA,EAAAzI,OACAA,GACE4L,EACG,MAAA,CACLwP,eACAgO,SACApgB,OACAP,SACAzI,SAEH,CAuBD,SAASyqB,IAEH,IAAAC,EACG9e,KAAAA,EAAMwd,OAASJ,EAAOtrC,QAAQ,CAC7B,MAAAyrC,EAAQH,EAAOpd,EAAMwd,QAGvB,GAAiB,iBAAVD,EAKT,IAJAuB,EAAa9e,EAAMwd,OACfxd,EAAMwP,aAAe,IACvBxP,EAAMwP,aAAe,GAEhBxP,EAAMwd,SAAWsB,GAAc9e,EAAMwP,aAAe+N,EAAMzrC,QAC/DitC,EAAGxB,EAAMtV,WAAWjI,EAAMwP,oBAG5BuP,EAAGxB,EAEN,CACF,CAUD,SAASwB,EAAGx5B,GAGVwd,EAAQA,EAAMxd,EACf,CAwEQ,SAAA04B,EAAkBroC,EAAGtD,GAC5BA,EAAK0sC,SACN,CAUQ,SAAAlB,EAAiBmB,EAAUf,GAC3B,OAeE,SAAKrV,EAAYkQ,EAAamG,GAEjC,IAAAC,EAEAC,EAEA3S,EAEAn6B,EACG,OAAA+vB,MAAMC,QAAQuG,GACrBwW,EAAuBxW,GAAc,aAAcA,EAEnDwW,EAAuB,CAA0BxW,IAUjD,SAA+ByW,GACtB,OAAA37B,EAGP,SAASA,EAAM4B,GACb,MAAMojB,EAAgB,OAATpjB,GAAiB+5B,EAAI/5B,GAC5BmiB,EAAe,OAATniB,GAAiB+5B,EAAIpR,KAK1B,OAAAmR,EAJM,IAGThd,MAAMC,QAAQqG,GAAQA,EAAOA,EAAO,CAACA,GAAQ,MAAStG,MAAMC,QAAQoF,GAAOA,EAAMA,EAAM,CAACA,GAAO,IAC5F2X,CAA6B95B,EACrC,CACF,CAvBgEg6B,CAAsB1W,GAiCvF,SAASwW,EAAuBtkC,GAG1BA,OAFeA,EAAAA,EACFqkC,EAAA,EACG,IAAhBrkC,EAAKjJ,OACAotC,EAEFM,EAAgBzkC,EAAKqkC,GAC7B,CAUD,SAASI,EAAgBzB,GAChB,OAGP,SAAex4B,GAKbjT,EAgER,WACE,MAAMmtC,EAAavS,IACbwS,EAAgBrR,EAAQ/C,SACxBqU,EAAwBtR,EAAQ5B,iBAChCmT,EAAmBvR,EAAQhC,OAAOv6B,OAClC+tC,EAAaxd,MAAM7Q,KAAKwP,GACvB,MAAA,CACLxP,KAAMouB,EACNZ,WASF,SAASA,IACPhf,EAAQyf,EACRpR,EAAQ/C,SAAWoU,EACnBrR,EAAQ5B,iBAAmBkT,EAC3BtR,EAAQhC,OAAOv6B,OAAS8tC,EAChB5e,EAAA6e,KAET,CACF,CAzFcC,GACYrT,EAAAsR,EACdA,EAAU7N,UACb7B,EAAQ5B,iBAAmBsR,GAKzB,GAAAA,EAAU5uC,MAAQk/B,EAAQlD,OAAOtC,WAAWoF,QAAQC,KAAKz7B,SAASsrC,EAAU5uC,MAC9E,OAAO6+B,IAET,OAAO+P,EAAU/S,SAASjH,KAI1Bma,EAAS9tC,OAAOC,OAAOD,OAAO8B,OAAOm8B,GAAU6P,GAAU7P,EAAS3D,EAAS57B,EAAIk/B,EAJxE+P,CAI6Ex4B,EACrF,CACF,CAGD,SAASzW,EAAGyW,GAGH,OADP05B,EAASxS,EAAkBn6B,GACpBymC,CACR,CAGD,SAAS/K,EAAIzoB,GAGP,OADJjT,EAAK0sC,YACCI,EAAiBD,EAAiBrtC,OAC/B0tC,EAAgBL,EAAiBC,IAEnCF,CACR,CACF,CACF,CAUQ,SAAAlB,EAAUD,EAAWvsB,GACxBusB,EAAU3P,aAAeyP,EAAqBprC,SAASsrC,IACzDF,EAAqBxf,KAAK0f,GAExBA,EAAUxP,SACZrG,GAAOmG,EAAQhC,OAAQ7a,EAAM6c,EAAQhC,OAAOv6B,OAAS0f,EAAMusB,EAAUxP,QAAQF,EAAQhC,OAAOx2B,MAAM2b,GAAO6c,IAEvG0P,EAAUjH,YACZzI,EAAQhC,OAAS0R,EAAUjH,UAAUzI,EAAQhC,OAAQgC,GAExD,CA0CD,SAAS0R,IACH/f,EAAM5C,QAAQwgB,GAAe5d,EAAMnD,OAAS,IAC9CmD,EAAMnD,OAAS+gB,EAAY5d,EAAM5C,MACjC4C,EAAM5L,QAAUwpB,EAAY5d,EAAM5C,MAAQ,EAE7C,CACH,CCteO,SAAS4iB,GAAM5wC,GACd,MAKA+7B,EAAS,CACbtC,W3CVG,SAA2BoX,GAEhC,MAAMvY,EAAM,CAAE,EACd,IAAI/1B,GAAQ,EAEL,OAAEA,EAAQsuC,EAAWnuC,QACV41B,GAAAA,EAAKuY,EAAWtuC,IAG3B+1B,OAAAA,CACT,C2CLQmB,CACY,CAACqX,OAFF9wC,GAAW,IAEuB6wC,YAAc,KAK/DpoC,QAAS3F,EAAO2F,IAChB9G,QAAS,GACT42B,SAAUz1B,EAAOy1B,IACjByF,KAAMl7B,EAAOk7B,IACbH,KAAM,CAAE,EACRvV,OAAQxlB,EAAOwlB,IACfpQ,KAAMpV,EAAOoV,KAER,OAAA6jB,EAQP,SAASj5B,EAAOkgC,GACP,OAEP,SAAiB5gB,GACR,OAAAksB,GAAgBvS,EAAQiH,EAAS5gB,EACzC,CACF,CACH,CCtCA,MAAM2uB,GAAS,cCff,MAAMC,GAA6B,oEA4BnC,SAASC,GAAOvlB,EAAIwlB,EAAIC,GACtB,GAAID,EAEK,OAAAA,EAKT,GAAa,KADAC,EAAGtY,WAAW,GACV,CACT0W,MAAAA,EAAO4B,EAAGtY,WAAW,GACrBuY,EAAe,MAAT7B,GAAyB,KAATA,EACrB,OAAA1V,GAAgCsX,EAAG1qC,MAAM2qC,EAAM,EAAI,GAAIA,EAAM,GAAK,GAC1E,CACM,OAAA3Y,GAA8B0Y,IAAOzlB,CAC9C,CCIA,MAAMuG,GAAM,CAAE,EAACC,eAyBR,SAASmf,GAAahxC,EAAOixC,EAAUtxC,GAK5C,MAJwB,iBAAbsxC,IACCtxC,EAAAsxC,EACCA,OAAA,GAUf,SAAkBtxC,GAEhB,MAAMuxC,EAAS,CACbC,WAAY,GACZC,eAAgB,CAAC,WAAY,WAAY,UAAW,YAAa,UACjEhW,MAAO,CACL4E,SAAUqR,EAAO36B,IACjB46B,iBAAkBC,EAClBC,cAAeD,EACfE,WAAYJ,EAAOrE,GACnBtM,WAAY2Q,EAAO3Q,GACnBG,gBAAiB0Q,EACjBlZ,mBAAoBkZ,EACpBvQ,WAAYqQ,EAAOK,GACnBC,oBAAqBpK,EACrBqK,oBAAqBrK,EACrBrF,aAAcmP,EAAOK,EAAUnK,GAC/BjF,SAAU+O,EAAO/O,EAAUiF,GAC3BsK,aAAcN,EACd7oC,KAAM6oC,EACNO,cAAeP,EACf7wC,WAAY2wC,EAAO3wC,GACnBqxC,4BAA6BxK,EAC7ByK,sBAAuBzK,EACvB0K,sBAAuB1K,EACvB2K,SAAUb,EAAOa,GACjBnL,gBAAiBsK,EAAOc,GACxBC,kBAAmBf,EAAOc,GAC1B/K,SAAUiK,EAAO9qC,EAAMghC,GACvB8K,aAAcd,EACdlI,SAAUgI,EAAO9qC,EAAMghC,GACvB+K,aAAcf,EACdgB,MAAOlB,EAAOkB,IACdpnC,MAAOo8B,EACP7wB,KAAM26B,EAAO36B,IACb87B,SAAUnB,EAAOmB,IACjBC,cAAeC,EACfC,YAAatB,EAAO/lC,GAAMsnC,GAC1BC,cAAexB,EAAO/lC,IACtB2hC,UAAWoE,EAAOpE,IAClB6F,UAAWC,EACXC,gBAAiBzL,EACjB0L,0BAA2B1L,EAC3B2L,oBAAqB3L,EACrB4L,cAAe9B,EAAOrE,GACtBoG,OAAQ/B,EAAO+B,IACfjH,cAAekF,EAAOlF,KAExB7Q,KAAM,CACJmW,WAAY4B,IACZC,mBAAoBC,EACpBvT,SAAUqT,IACV7B,cAAegC,EACflC,iBAAkBmC,EAClB/S,WAAY2S,IACZK,qBAAsBC,EACtBC,oCAAqCC,EACrCC,gCAAiCD,EACjCE,wBAAyBC,EACzB3b,mBAAoB4b,EACpBjT,WAAYqS,EAAOa,GACnBC,gBAAiBC,EACjBzC,oBAAqB0C,EACrBzC,oBAAqB0C,EACrBxC,cAAe6B,EACfzR,aAAcmR,EAAOkB,GACrBjS,SAAU+Q,EAAOmB,GACjB3C,aAAc8B,EACdjrC,KAAMirC,EACNjzC,WAAY2yC,IACZtB,4BAA6B0C,EAC7BzC,sBAAuB0C,EACvBzC,sBAAuB0C,EACvBzC,SAAUmB,IACVtM,gBAAiBsM,EAAOuB,GACxBxC,kBAAmBiB,EAAOuB,GAC1BxN,SAAUiM,EAAOwB,GACjBxC,aAAcsB,EACdtK,SAAUgK,EAAOyB,GACjBxC,aAAcqB,EACdpB,MAAOc,EAAO0B,GACd5pC,MAAO6pC,EACPC,UAAWC,EACXhJ,WAAYiJ,EACZz+B,KAAM28B,EAAO+B,GACb5C,SAAUa,IACVV,YAAaU,IACbR,cAAeQ,IACfpG,UAAWoG,IACXL,gBAAiBqC,EACjBpC,0BAA2BqC,EAC3BpC,oBAAqBqC,EACrB1uB,SAAU2uB,EACVrC,cAAeE,EAAOoC,GACtBC,0BAA2BC,EAC3BC,kBAAmBC,EACnBzC,OAAQC,IACRlH,cAAekH,MAGnByC,GAAU5E,GAASvxC,GAAW,CAAA,GAAIo2C,iBAAmB,IAGrD,MAAMrtC,EAAO,CAAA,EACN,OAAAstC,EAUP,SAASA,EAAQpZ,GAEf,IAAIvK,EAAO,CACT5d,KAAM,OACNqe,SAAU,IAGZ,MAAM8L,EAAU,CACdrN,MAAO,CAACc,GACR4jB,WAAY,GACZ/E,SACA9V,QACAE,KAAAA,EACAiM,SACA2O,SACAxtC,QAGIytC,EAAY,GAClB,IAAIj0C,GAAQ,EACL,OAAEA,EAAQ06B,EAAOv6B,QAGtB,GAA8B,gBAA1Bu6B,EAAO16B,GAAO,GAAGuS,MAAoD,kBAA1BmoB,EAAO16B,GAAO,GAAGuS,KAC9D,GAAyB,UAArBmoB,EAAO16B,GAAO,GAChBi0C,EAAUvnB,KAAK1sB,OACV,CAELA,EAAQk0C,EAAYxZ,EADPuZ,EAAUphB,MACW7yB,EACnC,CAIE,IADPA,GAAQ,IACCA,EAAQ06B,EAAOv6B,QAAQ,CAC9B,MAAMkgB,EAAU2uB,EAAOtU,EAAO16B,GAAO,IACjC0vB,GAAI0C,KAAK/R,EAASqa,EAAO16B,GAAO,GAAGuS,OAC7B8N,EAAAqa,EAAO16B,GAAO,GAAGuS,MAAM6f,KAAK3zB,OAAOC,OAAO,CAChD2+B,eAAgB3C,EAAO16B,GAAO,GAAGq9B,gBAChCX,GAAUhC,EAAO16B,GAAO,GAE9B,CAGG,GAAA08B,EAAQqX,WAAW5zC,OAAS,EAAG,CACjC,MAAMm/B,EAAO5C,EAAQqX,WAAWrX,EAAQqX,WAAW5zC,OAAS,IAC5Cm/B,EAAK,IAAM6U,IACnB/hB,KAAKsK,OAAS,EAAW4C,EAAK,GACvC,CAkBD,IAfAnP,EAAK3E,SAAW,CACdxZ,MAAOqc,GAAMqM,EAAOv6B,OAAS,EAAIu6B,EAAO,GAAG,GAAG1oB,MAAQ,CACpDyZ,KAAM,EACNP,OAAQ,EACRzI,OAAQ,IAEVvD,IAAKmP,GAAMqM,EAAOv6B,OAAS,EAAIu6B,EAAOA,EAAOv6B,OAAS,GAAG,GAAG+e,IAAM,CAChEuM,KAAM,EACNP,OAAQ,EACRzI,OAAQ,KAKZziB,GAAQ,IACCA,EAAQgvC,EAAOC,WAAW9uC,QACjCgwB,EAAO6e,EAAOC,WAAWjvC,GAAOmwB,IAASA,EAEpC,OAAAA,CACR,CAQQ,SAAA+jB,EAAYxZ,EAAQ1oB,EAAO7R,GAClC,IAIImwC,EAEA5O,EAEA0S,EAEA5J,EAVAxqC,EAAQgS,EAAQ,EAChBqiC,GAAmB,EACnBC,GAAa,EASV,OAAEt0C,GAASG,GAAQ,CAClB,MAAA+T,EAAQwmB,EAAO16B,GACb,OAAAkU,EAAM,GAAG3B,MACf,IAAK,gBACL,IAAK,cACL,IAAK,aAEgB,UAAb2B,EAAM,GACRmgC,IAEAA,IAES7J,OAAA,EACX,MAEJ,IAAK,kBAEgB,UAAbt2B,EAAM,MACJo8B,GAAa9F,GAAa6J,GAAqBD,IAC3Bp0C,EAAAA,GAEbwqC,OAAA,GAEb,MAEJ,IAAK,aACL,IAAK,gBACL,IAAK,iBACL,IAAK,iBACL,IAAK,2BAID,MAEJ,QAEeA,OAAA,EAGb,IAAC6J,GAAiC,UAAbngC,EAAM,IAAoC,mBAAlBA,EAAM,GAAG3B,OAAkD,IAArB8hC,GAAwC,SAAbngC,EAAM,KAAoC,kBAAlBA,EAAM,GAAG3B,MAA8C,gBAAlB2B,EAAM,GAAG3B,MAAyB,CAC/M,GAAI+9B,EAAU,CACZ,IAAIiE,EAAYv0C,EAEhB,IADY0hC,OAAA,EACL6S,KAAa,CACZ,MAAAC,EAAY9Z,EAAO6Z,GACrB,GAAsB,eAAtBC,EAAU,GAAGjiC,MAA+C,oBAAtBiiC,EAAU,GAAGjiC,KAA4B,CAC7E,GAAiB,SAAjBiiC,EAAU,GAAe,SACzB9S,IACFhH,EAAOgH,GAAW,GAAGnvB,KAAO,kBACf+hC,GAAA,GAELE,EAAA,GAAGjiC,KAAO,aACRmvB,EAAA6S,CACb,MAAA,GAAgC,eAAtBC,EAAU,GAAGjiC,MAA+C,qBAAtBiiC,EAAU,GAAGjiC,MAAqD,+BAAtBiiC,EAAU,GAAGjiC,MAA+D,qBAAtBiiC,EAAU,GAAGjiC,MAAqD,mBAAtBiiC,EAAU,GAAGjiC,KAG1M,KAEH,CACG6hC,KAAyB1S,GAAa0S,EAAsB1S,KAC9D4O,EAASmE,SAAU,GAIrBnE,EAASpxB,IAAMzgB,OAAOC,OAAO,CAAE,EAAEgjC,EAAYhH,EAAOgH,GAAW,GAAG1vB,MAAQkC,EAAM,GAAGgL,KAC5Ewb,EAAAnE,OAAOmL,GAAa1hC,EAAO,EAAG,CAAC,OAAQswC,EAAUp8B,EAAM,KAC9DlU,IACAG,GACD,CAGD,GAAsB,mBAAlB+T,EAAM,GAAG3B,KAA2B,CAEtC,MAAM4nB,EAAO,CACX5nB,KAAM,WACNkiC,SAAS,EACTziC,MAAOvT,OAAOC,OAAO,CAAA,EAAIwV,EAAM,GAAGlC,OAElCkN,SAAK,GAEPoxB,EAAWnW,EACJO,EAAAnE,OAAOv2B,EAAO,EAAG,CAAC,QAASm6B,EAAMjmB,EAAM,KAC9ClU,IACAG,IACsBi0C,OAAA,EACX5J,GAAA,CACZ,CACF,CACF,CAEM,OADP9P,EAAO1oB,GAAO,GAAGyiC,QAAUH,EACpBn0C,CACR,CAYQ,SAAAgvC,EAAO5uC,EAAQm0C,GACf,OAAA9kC,EAOP,SAASA,EAAKgqB,GACZV,EAAM9G,KAAK/zB,KAAMkC,EAAOq5B,GAAQA,GAC5B8a,GAASA,EAAAtiB,KAAK/zB,KAAMu7B,EACzB,CACF,CAKD,SAASyL,IACPhnC,KAAKgxB,MAAM3C,KAAK,CACdna,KAAM,WACNqe,SAAU,IAEb,CAKQ,SAAAsI,EAAMxN,EAAMkO,EAAO+a,GACXt2C,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GAEtBywB,SACflE,KAAKhB,GACTrtB,KAAAgxB,MAAM3C,KAAKhB,GAChBrtB,KAAK01C,WAAWrnB,KAAK,CAACkN,EAAO+a,QAAgB,IAC7CjpB,EAAKF,SAAW,CACdxZ,MAAOqc,GAAMuL,EAAM5nB,OAEnBkN,SAAK,EAER,CAUD,SAASiyB,EAAOuD,GACP,OAAA9W,EAOP,SAASA,EAAMhE,GACT8a,GAASA,EAAAtiB,KAAK/zB,KAAMu7B,GACxBR,EAAKhH,KAAK/zB,KAAMu7B,EACjB,CACF,CAKQR,SAAAA,EAAKQ,EAAOgb,GACblpB,MAAAA,EAAOrtB,KAAKgxB,MAAMwD,MAClBjjB,EAAOvR,KAAK01C,WAAWlhB,MAC7B,IAAKjjB,EACH,MAAM,IAAIqc,MAAM,iBAAmB2N,EAAMrnB,KAAO,MAAQgc,GAAkB,CACxEvc,MAAO4nB,EAAM5nB,MACbkN,IAAK0a,EAAM1a,MACR,uBACItP,EAAK,GAAG2C,OAASqnB,EAAMrnB,KAChC,GAAIqiC,EACFA,EAAYxiB,KAAK/zB,KAAMu7B,EAAOhqB,EAAK,QAC9B,EACWA,EAAK,IAAMukC,IACnB/hB,KAAK/zB,KAAMu7B,EAAOhqB,EAAK,GAChC,CAEH8b,EAAKF,SAAStM,IAAMmP,GAAMuL,EAAM1a,IACjC,CAKD,SAAS80B,IACP,OjDvcG,SAAkBl2C,EAAOL,GAC9B,MAAM82B,EAAW92B,GAAWF,GAQrB,OAAAw0B,GAAIj0B,EAN2B,kBAA7By2B,EAASsB,iBACZtB,EAASsB,gBAGmB,kBAAzBtB,EAASuB,aAA4BvB,EAASuB,YAGzD,CiD6bW+e,CAASx2C,KAAKgxB,MAAMwD,MAC5B,CAUD,SAAS6d,IACPryC,KAAKmI,KAAKsuC,6BAA8B,CACzC,CAMD,SAAStE,EAAqB5W,GACxB,GAAAv7B,KAAKmI,KAAKsuC,4BAA6B,CACxBz2C,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GACvC6R,MAAQqiB,OAAOmD,SAASn5B,KAAKg/B,eAAezD,GAAQ,IAC7Dv7B,KAAKmI,KAAKsuC,iCAA8B,CACzC,CACF,CAMD,SAAS3C,IACD3rC,MAAAA,EAAOnI,KAAK21C,SACL31C,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GACvC+I,KAAO1C,CACb,CAMD,SAAS4rC,IACD5rC,MAAAA,EAAOnI,KAAK21C,SACL31C,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GACvCy/B,KAAOp5B,CACb,CAMD,SAAS0rC,IAEH7zC,KAAKmI,KAAKuuC,iBACd12C,KAAKgnC,SACLhnC,KAAKmI,KAAKuuC,gBAAiB,EAC5B,CAMD,SAAS/C,IACDxrC,MAAAA,EAAOnI,KAAK21C,SACL31C,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GACvCrC,MAAQ0I,EAAKzI,QAAQ,2BAA4B,IACtDM,KAAKmI,KAAKuuC,oBAAiB,CAC5B,CAMD,SAAS1C,IACD7rC,MAAAA,EAAOnI,KAAK21C,SACL31C,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GACvCrC,MAAQ0I,EAAKzI,QAAQ,eAAgB,GAC3C,CAMD,SAASy0C,EAA4B5Y,GAC7B,MAAA3wB,EAAQ5K,KAAK21C,SACbtoB,EAAOrtB,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GAC5CurB,EAAKziB,MAAQA,EACbyiB,EAAKyY,WAAazM,GAAoBr5B,KAAKg/B,eAAezD,IAAQh7B,aACnE,CAMD,SAAS6zC,IACDjsC,MAAAA,EAAOnI,KAAK21C,SACL31C,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GACvCkS,MAAQ7L,CACd,CAMD,SAAS+rC,IACD/rC,MAAAA,EAAOnI,KAAK21C,SACL31C,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GACvCsvB,IAAMjpB,CACZ,CAMD,SAAS6qC,EAAyBzX,GAChC,MAAMlO,EAAOrtB,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GACxC,IAACurB,EAAKspB,MAAO,CACf,MAAMA,EAAQ32C,KAAKg/B,eAAezD,GAAOz5B,OACzCurB,EAAKspB,MAAQA,CACd,CACF,CAMD,SAASrB,IACPt1C,KAAKmI,KAAKyuC,8BAA+B,CAC1C,CAMD,SAASxB,EAAgC7Z,GAC1Bv7B,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GACvC60C,MAAsD,KAA9C32C,KAAKg/B,eAAezD,GAAOsb,YAAY,GAAY,EAAI,CACrE,CAMD,SAAS3B,IACPl1C,KAAKmI,KAAKyuC,kCAA+B,CAC1C,CAOD,SAAS5F,EAAYzV,GACnB,MAEMub,EAFO92C,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GAEtBywB,SACtB,IAAI0O,EAAO6V,EAASA,EAASh1C,OAAS,GACjCm/B,GAAsB,SAAdA,EAAK/sB,OAEhB+sB,EAAO3pB,KACP2pB,EAAK9T,SAAW,CACdxZ,MAAOqc,GAAMuL,EAAM5nB,OAEnBkN,SAAK,GAEPi2B,EAASzoB,KAAK4S,IAEXjhC,KAAAgxB,MAAM3C,KAAK4S,EACjB,CAOD,SAASmS,EAAW7X,GACZ,MAAA0F,EAAOjhC,KAAKgxB,MAAMwD,MACnByM,EAAAxhC,OAASO,KAAKg/B,eAAezD,GAClC0F,EAAK9T,SAAStM,IAAMmP,GAAMuL,EAAM1a,IACjC,CAOD,SAAS+zB,EAAiBrZ,GACxB,MAAM8C,EAAUr+B,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GAE3C,GAAA9B,KAAKmI,KAAK4uC,YAAa,CAIzB,OAHa1Y,EAAQ9L,SAAS8L,EAAQ9L,SAASzwB,OAAS,GACnDqrB,SAAStM,IAAMmP,GAAMuL,EAAM1a,UAChC7gB,KAAKmI,KAAK4uC,iBAAc,EAEzB,EACI/2C,KAAKmI,KAAKyuC,8BAAgCjG,EAAOE,eAAepuC,SAAS47B,EAAQnqB,QACxE88B,EAAAjd,KAAK/zB,KAAMu7B,GACZ6X,EAAArf,KAAK/zB,KAAMu7B,GAEzB,CAOD,SAAS8Y,IACPr0C,KAAKmI,KAAK4uC,aAAc,CACzB,CAOD,SAASzC,IACDnsC,MAAAA,EAAOnI,KAAK21C,SACL31C,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GACvCrC,MAAQ0I,CACd,CAOD,SAASosC,IACDpsC,MAAAA,EAAOnI,KAAK21C,SACL31C,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GACvCrC,MAAQ0I,CACd,CAOD,SAAS8rC,IACD9rC,MAAAA,EAAOnI,KAAK21C,SACL31C,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GACvCrC,MAAQ0I,CACd,CAOD,SAAS0sC,IACP,MAAMxnB,EAAOrtB,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GAKxC,GAAA9B,KAAKmI,KAAK6uC,YAAa,CAEnB,MAAAC,EAAgBj3C,KAAKmI,KAAK8uC,eAAiB,WACjD5pB,EAAKnZ,MAAQ,YAEbmZ,EAAK4pB,cAAgBA,SAEd5pB,EAAK+D,WACL/D,EAAKrZ,KAClB,aAEaqZ,EAAKyY,kBAELzY,EAAKziB,MAEd5K,KAAKmI,KAAK8uC,mBAAgB,CAC3B,CAOD,SAASzC,IACP,MAAMnnB,EAAOrtB,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GAKxC,GAAA9B,KAAKmI,KAAK6uC,YAAa,CAEnB,MAAAC,EAAgBj3C,KAAKmI,KAAK8uC,eAAiB,WACjD5pB,EAAKnZ,MAAQ,YAEbmZ,EAAK4pB,cAAgBA,SAEd5pB,EAAK+D,WACL/D,EAAKrZ,KAClB,aAEaqZ,EAAKyY,kBAELzY,EAAKziB,MAEd5K,KAAKmI,KAAK8uC,mBAAgB,CAC3B,CAOD,SAAStC,EAAgBpZ,GACjB7T,MAAAA,EAAS1nB,KAAKg/B,eAAezD,GAC7B2b,EAAWl3C,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GAGvCo1C,EAAAtsC,MDzwBN,SAAsBnL,GACpB,OAAAA,EAAMC,QAAQ0wC,GAA4BC,GACnD,CCuwBqB8G,CAAazvB,GAE9BwvB,EAASpR,WAAazM,GAAoB3R,GAAQnnB,aACnD,CAOD,SAASk0C,IACP,MAAM2C,EAAWp3C,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GAC1CrC,EAAQO,KAAK21C,SACbtoB,EAAOrtB,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GAGxCurB,GADJrtB,KAAKmI,KAAK6uC,aAAc,EACN,SAAd3pB,EAAKnZ,KAAiB,CAExB,MAAMqe,EAAW6kB,EAAS7kB,SAC1BlF,EAAKkF,SAAWA,CACtB,MACMlF,EAAKvmB,IAAMrH,CAEd,CAOD,SAASs1C,IACD5sC,MAAAA,EAAOnI,KAAK21C,SACL31C,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GACvCsvB,IAAMjpB,CACZ,CAOD,SAAS6sC,IACD7sC,MAAAA,EAAOnI,KAAK21C,SACL31C,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GACvCkS,MAAQ7L,CACd,CAOD,SAAS8sC,IACPj1C,KAAKmI,KAAK6uC,iBAAc,CACzB,CAOD,SAASxE,IACPxyC,KAAKmI,KAAK8uC,cAAgB,WAC3B,CAOD,SAASnC,EAAsBvZ,GACvB,MAAA3wB,EAAQ5K,KAAK21C,SACbtoB,EAAOrtB,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GAG5CurB,EAAKziB,MAAQA,EAEbyiB,EAAKyY,WAAazM,GAAoBr5B,KAAKg/B,eAAezD,IAAQh7B,cAClEP,KAAKmI,KAAK8uC,cAAgB,MAC3B,CAOD,SAAS3D,EAA+B/X,GACjCv7B,KAAAmI,KAAKkvC,uBAAyB9b,EAAMrnB,IAC1C,CAMD,SAASu/B,EAA8BlY,GAC/BpzB,MAAAA,EAAOnI,KAAKg/B,eAAezD,GAC3BrnB,EAAOlU,KAAKmI,KAAKkvC,uBAEnB,IAAA53C,EACJ,GAAIyU,EACFzU,EAAQw5B,GAAgC9wB,EAAe,oCAAT+L,EAA6C,GAAK,IAChGlU,KAAKmI,KAAKkvC,4BAAyB,MAC9B,CAEG53C,EADOo4B,GAA8B1vB,EAE9C,CACYnI,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GACvCrC,OAASA,CACf,CAMD,SAASi0C,EAAyBnY,GACnBv7B,KAAKgxB,MAAMwD,MACnBrH,SAAStM,IAAMmP,GAAMuL,EAAM1a,IACjC,CAMD,SAASqyB,EAAuB3X,GACnB6X,EAAArf,KAAK/zB,KAAMu7B,GACTv7B,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GACvCsvB,IAAMpxB,KAAKg/B,eAAezD,EAChC,CAMD,SAAS0X,EAAoB1X,GAChB6X,EAAArf,KAAK/zB,KAAMu7B,GACTv7B,KAAKgxB,MAAMhxB,KAAKgxB,MAAMlvB,OAAS,GACvCsvB,IAAM,UAAYpxB,KAAKg/B,eAAezD,EAC5C,CAOD,SAAS4E,IACA,MAAA,CACLjsB,KAAM,aACNqe,SAAU,GAEb,CAGD,SAAS4e,IACA,MAAA,CACLj9B,KAAM,OACNrJ,KAAM,KACN02B,KAAM,KACN9hC,MAAO,GAEV,CAGD,SAASsiC,IACA,MAAA,CACL7tB,KAAM,aACNzU,MAAO,GAEV,CAGD,SAASU,IACA,MAAA,CACL+T,KAAM,aACN4xB,WAAY,GACZl7B,MAAO,KACPoJ,MAAO,KACPod,IAAK,GAER,CAGD,SAASugB,IACA,MAAA,CACLz9B,KAAM,WACNqe,SAAU,GAEb,CAGD,SAASka,IACA,MAAA,CACLv4B,KAAM,UAENyiC,MAAO,EACPpkB,SAAU,GAEb,CAGD,SAASqf,IACA,MAAA,CACL19B,KAAM,QAET,CAGD,SAASlO,IACA,MAAA,CACLkO,KAAM,OACNzU,MAAO,GAEV,CAGD,SAASuyC,KACA,MAAA,CACL99B,KAAM,QACNF,MAAO,KACPod,IAAK,GACLtqB,IAAK,KAER,CAGD,SAASqP,KACA,MAAA,CACLjC,KAAM,OACNF,MAAO,KACPod,IAAK,GACLmB,SAAU,GAEb,CAMD,SAASxnB,GAAKwwB,GACL,MAAA,CACLrnB,KAAM,OACNojC,QAAwB,gBAAf/b,EAAMrnB,KACfP,MAAO,KACP4jC,OAAQhc,EAAM6a,QACd7jB,SAAU,GAEb,CAMD,SAAS0f,GAAS1W,GACT,MAAA,CACLrnB,KAAM,WACNqjC,OAAQhc,EAAM6a,QACd5uC,QAAS,KACT+qB,SAAU,GAEb,CAGD,SAASma,KACA,MAAA,CACLx4B,KAAM,YACNqe,SAAU,GAEb,CAGD,SAASsgB,KACA,MAAA,CACL3+B,KAAM,SACNqe,SAAU,GAEb,CAGD,SAASjb,KACA,MAAA,CACLpD,KAAM,OACNzU,MAAO,GAEV,CAGD,SAASmsC,KACA,MAAA,CACL13B,KAAM,gBAET,CACH,CA7+BSsjC,CAASp4C,EAATo4C,CClEF,SAAqBnb,GACnB,MAAC6G,GAAY7G,KAGb,OAAAA,CACT,CD6D2Bob,CAAYzH,GAAM5wC,GAASu4B,WAAWiG,MFvD1D,WACL,IAKI8Z,EALA7qB,EAAS,EACTma,EAAS,GAETrzB,GAAQ,EAGL,OAIE,SAAalU,EAAOixC,EAAU7vB,GAErC,MAAMusB,EAAS,GAEX,IAAApgB,EAEAuN,EAEAsJ,EAEA8T,EAEApiC,EAWG,IAVP9V,EAAQunC,GAA2B,iBAAVvnC,EAAqBA,EAAM+2C,WAAa,IAAIoB,YAAYlH,QAAY,GAAWL,OAAO5wC,IAC/FokC,EAAA,EACPmD,EAAA,GACLrzB,IAE0B,QAAxBlU,EAAMw4B,WAAW,IACnB4L,IAEMlwB,OAAA,GAEHkwB,EAAgBpkC,EAAMqC,QAAQ,CAKnC,GAJAquC,GAAO0H,UAAYhU,EACX7W,EAAAmjB,GAAOliB,KAAKxuB,GACpBk4C,EAAc3qB,QAAyB,IAAhBA,EAAMrrB,MAAsBqrB,EAAMrrB,MAAQlC,EAAMqC,OACvEyT,EAAO9V,EAAMw4B,WAAW0f,IACnB3qB,EAAO,CACDga,EAAAvnC,EAAMoG,MAAMg+B,GACrB,KACD,CACD,GAAa,KAATtuB,GAAesuB,IAAkB8T,GAAeD,EAClDtK,EAAO/e,MAAO,GACKqpB,OAAA,OAUnB,OARIA,IACFtK,EAAO/e,MAAO,GACKqpB,OAAA,GAEjB7T,EAAgB8T,IAClBvK,EAAO/e,KAAK5uB,EAAMoG,MAAMg+B,EAAe8T,IACvC9qB,GAAU8qB,EAAc9T,GAElBtuB,GACN,KAAK,EAED63B,EAAO/e,KAAK,OACZxB,IACA,MAEJ,KAAK,EAID,IAFA0N,EAA+B,EAAxBoI,KAAKmV,KAAKjrB,EAAS,GAC1BugB,EAAO/e,MAAO,GACPxB,IAAW0N,GAAM6S,EAAO/e,MAAO,GACtC,MAEJ,KAAK,GAED+e,EAAO/e,MAAO,GACLxB,EAAA,EACT,MAEJ,QAEuB6qB,GAAA,EACV7qB,EAAA,EAIjBgX,EAAgB8T,EAAc,CAC/B,CAMM,OALH92B,IACE62B,GAAkBtK,EAAO/e,MAAO,GAChC2Y,GAAQoG,EAAO/e,KAAK2Y,GACxBoG,EAAO/e,KAAK,OAEP+e,CACR,CACH,CEpCuE2K,GAAat4C,EAAOixC,GAAU,KACrG,CAs/BA,SAAS1gB,GAAMhQ,GACN,MAAA,CACLoN,KAAMpN,EAAEoN,KACRP,OAAQ7M,EAAE6M,OACVzI,OAAQpE,EAAEoE,OAEd,CAOA,SAASmxB,GAAUyC,EAAU/H,GAC3B,IAAItuC,GAAQ,EACL,OAAEA,EAAQsuC,EAAWnuC,QAAQ,CAC5B,MAAArC,EAAQwwC,EAAWtuC,GACrB0wB,MAAMC,QAAQ7yB,GAChB81C,GAAUyC,EAAUv4C,GAEpBg5B,GAAUuf,EAAUv4C,EAEvB,CACH,CAOA,SAASg5B,GAAUuf,EAAUvf,GAEvB,IAAAx2B,EACJ,IAAKA,KAAOw2B,EACV,GAAIpH,GAAI0C,KAAK0E,EAAWx2B,GACtB,OAAQA,GACN,IAAK,iBACH,CACQ,MAAA22B,EAAQH,EAAUx2B,GACpB22B,GACFof,EAAS/1C,GAAKosB,QAAQuK,GAExB,KACD,CACH,IAAK,aACH,CACQ,MAAAA,EAAQH,EAAUx2B,GACpB22B,GACFof,EAAS/1C,GAAKosB,QAAQuK,GAExB,KACD,CACH,IAAK,QACL,IAAK,OACH,CACQ,MAAAA,EAAQH,EAAUx2B,GACpB22B,GACFx4B,OAAOC,OAAO23C,EAAS/1C,GAAM22B,GAE/B,KACD,EAKX,CAGA,SAASkd,GAAend,EAAMC,GAC5B,MAAID,EACI,IAAI/K,MAAM,iBAAmB+K,EAAKzkB,KAAO,MAAQgc,GAAkB,CACvEvc,MAAOglB,EAAKhlB,MACZkN,IAAK8X,EAAK9X,MACP,0BAA4B+X,EAAM1kB,KAAO,MAAQgc,GAAkB,CACtEvc,MAAOilB,EAAMjlB,MACbkN,IAAK+X,EAAM/X,MACR,aAEC,IAAI+M,MAAM,oCAAsCgL,EAAM1kB,KAAO,MAAQgc,GAAkB,CAC3Fvc,MAAOilB,EAAMjlB,MACbkN,IAAK+X,EAAM/X,MACR,kBAET,CEnoCe,SAASo3B,GAAY74C,GAGlC,MAAMq8B,EAAOz7B,KAEby7B,EAAKN,OAKL,SAAgB+c,GACd,OAAOzH,GAAayH,EAAK,IACpBzc,EAAKtzB,KAAK,eACV/I,EAIH6wC,WAAYxU,EAAKtzB,KAAK,wBAA0B,GAChDqtC,gBAAiB/Z,EAAKtzB,KAAK,2BAA6B,IAE3D,CACH,CCpBO,SAASgwC,GAAOplB,EAAO1F,GAC5B,MAAM+qB,EAAU/qB,EAAK4pB,cACrB,IAAIoB,EAAS,IAQThrB,GANY,cAAZ+qB,EACQC,GAAA,KACW,SAAZD,IACTC,GAAU,KAAOhrB,EAAKziB,OAASyiB,EAAKyY,YAAc,KAGlC,mBAAdzY,EAAKnZ,KACA,MAAA,CAAC,CAACA,KAAM,OAAQzU,MAAO,KAAO4tB,EAAKvmB,IAAMuxC,IAG5C,MAAAC,EAAWvlB,EAAM2E,IAAIrK,GACrBshB,EAAO2J,EAAS,GAElB3J,GAAsB,SAAdA,EAAKz6B,KACVy6B,EAAAlvC,MAAQ,IAAMkvC,EAAKlvC,MAExB64C,EAAS/f,QAAQ,CAACrkB,KAAM,OAAQzU,MAAO,MAGzC,MAAMwhC,EAAOqX,EAASA,EAASx2C,OAAS,GAQjC,OANHm/B,GAAsB,SAAdA,EAAK/sB,KACf+sB,EAAKxhC,OAAS44C,EAEdC,EAASjqB,KAAK,CAACna,KAAM,OAAQzU,MAAO44C,IAG/BC,CACT,CCgEA,SAASC,GAAclrB,GACrB,MAAMkqB,EAASlqB,EAAKkqB,OAEpB,OAAOA,QACHlqB,EAAKkF,SAASzwB,OAAS,EACvBy1C,CACN,CChHO,SAASiB,GAAU/4C,GAClB,MAAA+tB,EAASiJ,OAAOh3B,GAChB0wC,EAAS,YACX,IAAAnjB,EAAQmjB,EAAOliB,KAAKT,GACpBirB,EAAO,EAEX,MAAM1rB,EAAQ,GAEd,KAAOC,GACCD,EAAAsB,KACJqqB,GAASlrB,EAAO3nB,MAAM4yC,EAAMzrB,EAAMrrB,OAAQ82C,EAAO,GAAG,GACpDzrB,EAAM,IAGRyrB,EAAOzrB,EAAMrrB,MAAQqrB,EAAM,GAAGlrB,OACtBquC,EAAAA,EAAOliB,KAAKT,GAKf,OAFDT,EAAAsB,KAAKqqB,GAASlrB,EAAO3nB,MAAM4yC,GAAOA,EAAO,GAAG,IAE3C1rB,EAAMoJ,KAAK,GACpB,CAYA,SAASuiB,GAASj5C,EAAOkU,EAAOkN,GAC9B,IAAIytB,EAAa,EACbE,EAAW/uC,EAAMqC,OAErB,GAAI6R,EAAO,CACL4B,IAAAA,EAAO9V,EAAMo3C,YAAYvI,GAEtB/4B,KApDC,IAoDDA,GAnDG,KAmDaA,GACrB+4B,IACA/4B,EAAO9V,EAAMo3C,YAAYvI,EAE5B,CAED,GAAIztB,EAAK,CACP,IAAItL,EAAO9V,EAAMo3C,YAAYrI,EAAW,GAEjCj5B,KA7DC,IA6DDA,GA5DG,KA4DaA,GACrBi5B,IACAj5B,EAAO9V,EAAMo3C,YAAYrI,EAAW,EAEvC,CAED,OAAOA,EAAWF,EAAa7uC,EAAMoG,MAAMyoC,EAAYE,GAAY,EACrE,CCvCO,MAAMmK,GAAW,CACtBC,WCXK,SAAoB7lB,EAAO1F,GAEhC,MAAM7G,EAAS,CACbtS,KAAM,UACN0f,QAAS,aACTzxB,WAAY,CAAE,EACdowB,SAAUQ,EAAMze,KAAKye,EAAM2E,IAAIrK,IAAO,IAGjC,OADD0F,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC/B,EDEEuyB,MEXK,SAAmBhmB,EAAO1F,GAEzB,MAAA7G,EAAS,CAACtS,KAAM,UAAW0f,QAAS,KAAMzxB,WAAY,CAAA,EAAIowB,SAAU,IAEnE,OADDQ,EAAA8lB,MAAMxrB,EAAM7G,GACX,CAACuM,EAAM+lB,UAAUzrB,EAAM7G,GAAS,CAACtS,KAAM,OAAQzU,MAAO,MAC/D,EFOE8V,KGZK,SAAcwd,EAAO1F,GAC1B,MAAM5tB,EAAQ4tB,EAAK5tB,MAAQ4tB,EAAK5tB,MAAQ,KAAO,GAEzC0C,EAAa,CAAE,EAEjBkrB,EAAKxiB,OACP1I,EAAWuF,UAAY,CAAC,YAAc2lB,EAAKxiB,OAK7C,IAAI2b,EAAS,CACXtS,KAAM,UACN0f,QAAS,OACTzxB,aACAowB,SAAU,CAAC,CAACre,KAAM,OAAQzU,WAarB,OAVH4tB,EAAKkU,OACP/a,EAAOre,KAAO,CAACo5B,KAAMlU,EAAKkU,OAGtBxO,EAAA8lB,MAAMxrB,EAAM7G,GACTA,EAAAuM,EAAM+lB,UAAUzrB,EAAM7G,GAGtBA,EAAA,CAACtS,KAAM,UAAW0f,QAAS,MAAOzxB,WAAY,GAAIowB,SAAU,CAAC/L,IAChEuM,EAAA8lB,MAAMxrB,EAAM7G,GACXA,CACT,EHhBEwyB,OIdK,SAAuBjmB,EAAO1F,GAEnC,MAAM7G,EAAS,CACbtS,KAAM,UACN0f,QAAS,MACTzxB,WAAY,CAAE,EACdowB,SAAUQ,EAAM2E,IAAIrK,IAGf,OADD0F,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC/B,EJKEmrB,SKfK,SAAkB5e,EAAO1F,GAE9B,MAAM7G,EAAS,CACbtS,KAAM,UACN0f,QAAS,KACTzxB,WAAY,CAAE,EACdowB,SAAUQ,EAAM2E,IAAIrK,IAGf,OADD0F,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC/B,ELMEyyB,kBMjBK,SAA2BlmB,EAAO1F,GACjC,MAAA6rB,EACmC,iBAAhCnmB,EAAM3zB,QAAQ85C,cACjBnmB,EAAM3zB,QAAQ85C,cACd,gBACApvC,EAAK2sB,OAAOpJ,EAAKyY,YAAY7a,cAC7BkuB,EAAS9e,GAAavwB,EAAGvJ,eACzBoB,EAAQoxB,EAAMqmB,cAAcxoB,QAAQ9mB,GAEtC,IAAAuvC,EAEAC,EAAevmB,EAAMwmB,eAAe7jB,IAAI5rB,QAEvB,IAAjBwvC,GACaA,EAAA,EACTvmB,EAAAqmB,cAAc/qB,KAAKvkB,GACzBuvC,EAAUtmB,EAAMqmB,cAAct3C,QAE9Bu3C,EAAU13C,EAAQ,EAGJ23C,GAAA,EACVvmB,EAAAwmB,eAAe5jB,IAAI7rB,EAAIwvC,GAG7B,MAAMnjC,EAAO,CACXjC,KAAM,UACN0f,QAAS,IACTzxB,WAAY,CACVuH,KAAM,IAAMwvC,EAAgB,MAAQC,EACpCrvC,GACEovC,EACA,SACAC,GACCG,EAAe,EAAI,IAAMA,EAAe,IAC3CE,iBAAiB,EACjBn2C,gBAAiB,CAAC,mBAEpBkvB,SAAU,CAAC,CAACre,KAAM,OAAQzU,MAAOg3B,OAAO4iB,MAEpCtmB,EAAA8lB,MAAMxrB,EAAMlX,GAGlB,MAAMsjC,EAAM,CACVvlC,KAAM,UACN0f,QAAS,MACTzxB,WAAY,CAAE,EACdowB,SAAU,CAACpc,IAGN,OADD4c,EAAA8lB,MAAMxrB,EAAMosB,GACX1mB,EAAM+lB,UAAUzrB,EAAMosB,EAC/B,ENjCEhN,QOjBK,SAAiB1Z,EAAO1F,GAE7B,MAAM7G,EAAS,CACbtS,KAAM,UACN0f,QAAS,IAAMvG,EAAKspB,MACpBx0C,WAAY,CAAE,EACdowB,SAAUQ,EAAM2E,IAAIrK,IAGf,OADD0F,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC/B,EPQExgB,KQhBK,SAAc+sB,EAAO1F,GACtB,GAAA0F,EAAM3zB,QAAQs6C,mBAAoB,CAEpC,MAAMlzB,EAAS,CAACtS,KAAM,MAAOzU,MAAO4tB,EAAK5tB,OAElC,OADDszB,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC9B,CAGH,ERQEmzB,eSjBK,SAAwB5mB,EAAO1F,GACpC,MAAMvjB,EAAK2sB,OAAOpJ,EAAKyY,YAAY7a,cAC7B9qB,EAAa4yB,EAAM6mB,eAAelkB,IAAI5rB,GAE5C,IAAK3J,EACI,OAAAg4C,GAAOplB,EAAO1F,GAIjB,MAAAlrB,EAAa,CAACoR,IAAK8mB,GAAal6B,EAAWixB,KAAO,IAAKtqB,IAAKumB,EAAKvmB,KAE9C,OAArB3G,EAAW6T,YAAuC,IAArB7T,EAAW6T,QAC1C7R,EAAW6R,MAAQ7T,EAAW6T,OAI1B,MAAAwS,EAAS,CAACtS,KAAM,UAAW0f,QAAS,MAAOzxB,aAAYowB,SAAU,IAEhE,OADDQ,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC/B,ETDEwrB,MUpBK,SAAejf,EAAO1F,GAE3B,MAAMlrB,EAAa,CAACoR,IAAK8mB,GAAahN,EAAK+D,MAE1B,OAAb/D,EAAKvmB,UAA6B,IAAbumB,EAAKvmB,MAC5B3E,EAAW2E,IAAMumB,EAAKvmB,KAGL,OAAfumB,EAAKrZ,YAAiC,IAAfqZ,EAAKrZ,QAC9B7R,EAAW6R,MAAQqZ,EAAKrZ,OAIpB,MAAAwS,EAAS,CAACtS,KAAM,UAAW0f,QAAS,MAAOzxB,aAAYowB,SAAU,IAEhE,OADDQ,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC/B,EVKEqzB,WWpBK,SAAoB9mB,EAAO1F,GAE1B/V,MAAAA,EAAO,CAACpD,KAAM,OAAQzU,MAAO4tB,EAAK5tB,MAAMC,QAAQ,YAAa,MAC7DqzB,EAAA8lB,MAAMxrB,EAAM/V,GAGlB,MAAMkP,EAAS,CACbtS,KAAM,UACN0f,QAAS,OACTzxB,WAAY,CAAE,EACdowB,SAAU,CAACjb,IAGN,OADDyb,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC/B,EXOEszB,cYpBK,SAAuB/mB,EAAO1F,GACnC,MAAMvjB,EAAK2sB,OAAOpJ,EAAKyY,YAAY7a,cAC7B9qB,EAAa4yB,EAAM6mB,eAAelkB,IAAI5rB,GAE5C,IAAK3J,EACI,OAAAg4C,GAAOplB,EAAO1F,GAIvB,MAAMlrB,EAAa,CAACuH,KAAM2wB,GAAal6B,EAAWixB,KAAO,KAEhC,OAArBjxB,EAAW6T,YAAuC,IAArB7T,EAAW6T,QAC1C7R,EAAW6R,MAAQ7T,EAAW6T,OAIhC,MAAMwS,EAAS,CACbtS,KAAM,UACN0f,QAAS,IACTzxB,aACAowB,SAAUQ,EAAM2E,IAAIrK,IAGf,OADD0F,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC/B,EZHErQ,KavBK,SAAc4c,EAAO1F,GAE1B,MAAMlrB,EAAa,CAACuH,KAAM2wB,GAAahN,EAAK+D,MAEzB,OAAf/D,EAAKrZ,YAAiC,IAAfqZ,EAAKrZ,QAC9B7R,EAAW6R,MAAQqZ,EAAKrZ,OAI1B,MAAMwS,EAAS,CACbtS,KAAM,UACN0f,QAAS,IACTzxB,aACAowB,SAAUQ,EAAM2E,IAAIrK,IAGf,OADD0F,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC/B,EbOEyrB,SFnBK,SAAkBlf,EAAO1F,EAAMwD,GAC9B,MAAA1Y,EAAU4a,EAAM2E,IAAIrK,GACpB0sB,EAAQlpB,EAyEhB,SAAmBxD,GACjB,IAAI0sB,GAAQ,EACR1sB,GAAc,SAAdA,EAAKnZ,KAAiB,CACxB6lC,EAAQ1sB,EAAKkqB,SAAU,EACvB,MAAMhlB,EAAWlF,EAAKkF,SACtB,IAAI5wB,GAAQ,EAEZ,MAAQo4C,KAAWp4C,EAAQ4wB,EAASzwB,QAC1Bi4C,EAAAxB,GAAchmB,EAAS5wB,GAElC,CAEM,OAAAo4C,CACT,CAtFyBC,CAAUnpB,GAAU0nB,GAAclrB,GAEnDlrB,EAAa,CAAE,EAEfowB,EAAW,GAEb,GAAwB,kBAAjBlF,EAAK7lB,QAAuB,CAC/B,MAAAmnC,EAAOx2B,EAAQ,GAEjBu0B,IAAAA,EAEAiC,GAAsB,YAAdA,EAAKz6B,MAAuC,MAAjBy6B,EAAK/a,QAC1C8Y,EAAYiC,GAEZjC,EAAY,CAACx4B,KAAM,UAAW0f,QAAS,IAAKzxB,WAAY,CAAA,EAAIowB,SAAU,IACtEpa,EAAQogB,QAAQmU,IAGdA,EAAUna,SAASzwB,OAAS,GAC9B4qC,EAAUna,SAASgG,QAAQ,CAACrkB,KAAM,OAAQzU,MAAO,MAGnDitC,EAAUna,SAASgG,QAAQ,CACzBrkB,KAAM,UACN0f,QAAS,QACTzxB,WAAY,CAAC+R,KAAM,WAAY1M,QAAS6lB,EAAK7lB,QAASkB,UAAU,GAChE6pB,SAAU,KAKDpwB,EAAAuF,UAAY,CAAC,iBACzB,CAED,IAAI/F,GAAQ,EAEL,OAAEA,EAAQwW,EAAQrW,QAAQ,CACzB,MAAAsyB,EAAQjc,EAAQxW,IAIpBo4C,GACU,IAAVp4C,GACe,YAAfyyB,EAAMlgB,MACY,MAAlBkgB,EAAMR,UAENrB,EAASlE,KAAK,CAACna,KAAM,OAAQzU,MAAO,OAGnB,YAAf20B,EAAMlgB,MAAwC,MAAlBkgB,EAAMR,SAAoBmmB,EAGxDxnB,EAASlE,KAAK+F,GAFL7B,EAAAlE,QAAQ+F,EAAM7B,SAI1B,CAED,MAAM0O,EAAO9oB,EAAQA,EAAQrW,OAAS,GAGlCm/B,IAAS8Y,GAAuB,YAAd9Y,EAAK/sB,MAAuC,MAAjB+sB,EAAKrN,UACpDrB,EAASlE,KAAK,CAACna,KAAM,OAAQzU,MAAO,OAItC,MAAM+mB,EAAS,CAACtS,KAAM,UAAW0f,QAAS,KAAMzxB,aAAYowB,YAErD,OADDQ,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC/B,EEjDEzb,KcxBK,SAAcgoB,EAAO1F,GAE1B,MAAMlrB,EAAa,CAAE,EACfgW,EAAU4a,EAAM2E,IAAIrK,GAC1B,IAAI1rB,GAAQ,EAOL,IALmB,iBAAf0rB,EAAK1Z,OAAqC,IAAf0Z,EAAK1Z,QACzCxR,EAAWwR,MAAQ0Z,EAAK1Z,SAIjBhS,EAAQwW,EAAQrW,QAAQ,CACzB,MAAAsyB,EAAQjc,EAAQxW,GAEtB,GACiB,YAAfyyB,EAAMlgB,MACY,OAAlBkgB,EAAMR,SACNQ,EAAMjyB,YACNkwB,MAAMC,QAAQ8B,EAAMjyB,WAAWuF,YAC/B0sB,EAAMjyB,WAAWuF,UAAUjF,SAAS,kBACpC,CACWN,EAAAuF,UAAY,CAAC,sBACxB,KACD,CACF,CAGD,MAAM8e,EAAS,CACbtS,KAAM,UACN0f,QAASvG,EAAKiqB,QAAU,KAAO,KAC/Bn1C,aACAowB,SAAUQ,EAAMze,KAAK6D,GAAS,IAGzB,OADD4a,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC/B,EdVEkmB,Ue1BK,SAAmB3Z,EAAO1F,GAE/B,MAAM7G,EAAS,CACbtS,KAAM,UACN0f,QAAS,IACTzxB,WAAY,CAAE,EACdowB,SAAUQ,EAAM2E,IAAIrK,IAGf,OADD0F,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC/B,EfkBE+O,KgB3BK,SAAcxC,EAAO1F,GAEpB,MAAA7G,EAAS,CAACtS,KAAM,OAAQqe,SAAUQ,EAAMze,KAAKye,EAAM2E,IAAIrK,KAEtD,OADD0F,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC/B,EhBuBEqsB,OiB7BK,SAAgB9f,EAAO1F,GAE5B,MAAM7G,EAAS,CACbtS,KAAM,UACN0f,QAAS,SACTzxB,WAAY,CAAE,EACdowB,SAAUQ,EAAM2E,IAAIrK,IAGf,OADD0F,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC/B,EjBoBEyzB,MkB/BK,SAAelnB,EAAO1F,GACrB,MAAA9a,EAAOwgB,EAAM2E,IAAIrK,GACjB6sB,EAAW3nC,EAAK+vB,QAEhB6X,EAAe,GAErB,GAAID,EAAU,CAEZ,MAAMvL,EAAO,CACXz6B,KAAM,UACN0f,QAAS,QACTzxB,WAAY,CAAE,EACdowB,SAAUQ,EAAMze,KAAK,CAAC4lC,IAAW,IAEnCnnB,EAAM8lB,MAAMxrB,EAAKkF,SAAS,GAAIoc,GAC9BwL,EAAa9rB,KAAKsgB,EACnB,CAEG,GAAAp8B,EAAKzQ,OAAS,EAAG,CAEnB,MAAM8yB,EAAO,CACX1gB,KAAM,UACN0f,QAAS,QACTzxB,WAAY,CAAE,EACdowB,SAAUQ,EAAMze,KAAK/B,GAAM,IAGvBoB,EAAQsc,GAAW5C,EAAKkF,SAAS,IACjC1R,EAAMkP,GAAS1C,EAAKkF,SAASlF,EAAKkF,SAASzwB,OAAS,IACtD6R,GAASkN,IAAU+T,EAAAzH,SAAW,CAACxZ,QAAOkN,QAC1Cs5B,EAAa9rB,KAAKuG,EACnB,CAGD,MAAMpO,EAAS,CACbtS,KAAM,UACN0f,QAAS,QACTzxB,WAAY,CAAE,EACdowB,SAAUQ,EAAMze,KAAK6lC,GAAc,IAG9B,OADDpnB,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC/B,ElBVE4zB,UmB/BK,SAAmBrnB,EAAO1F,GAI/B,MAAM7G,EAAS,CACbtS,KAAM,UACN0f,QAAS,KACTzxB,WAAY,CAAE,EACdowB,SAAUQ,EAAM2E,IAAIrK,IAGf,OADD0F,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC/B,EnBoBE6zB,SoB3BK,SAAkBtnB,EAAO1F,EAAMwD,GAC9B,MAAAimB,EAAWjmB,EAASA,EAAO0B,cAAW,EAGtCqB,EAAuB,KADZkjB,EAAWA,EAASlmB,QAAQvD,GAAQ,GACpB,KAAO,KAElC7Y,EAAQqc,GAA0B,UAAhBA,EAAO3c,KAAmB2c,EAAOrc,WAAQ,EAC3D1S,EAAS0S,EAAQA,EAAM1S,OAASurB,EAAKkF,SAASzwB,OACpD,IAAIw4C,GAAY,EAEhB,MAAMC,EAAQ,GAEP,OAAED,EAAYx4C,GAAQ,CAErB,MAAA04C,EAAOntB,EAAKkF,SAAS+nB,GAErBn4C,EAAa,CAAE,EACf2xB,EAAatf,EAAQA,EAAM8lC,QAAa,EAE1CxmB,IACF3xB,EAAWqS,MAAQsf,GAIjBtN,IAAAA,EAAS,CAACtS,KAAM,UAAW0f,UAASzxB,aAAYowB,SAAU,IAE1DioB,IACFh0B,EAAO+L,SAAWQ,EAAM2E,IAAI8iB,GACtBznB,EAAA8lB,MAAM2B,EAAMh0B,GAClBA,EAASuM,EAAM+lB,UAAU0B,EAAMh0B,IAGjC+zB,EAAMlsB,KAAK7H,EACZ,CAGD,MAAMA,EAAS,CACbtS,KAAM,UACN0f,QAAS,KACTzxB,WAAY,CAAE,EACdowB,SAAUQ,EAAMze,KAAKimC,GAAO,IAGvB,OADDxnB,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC/B,EpBhBElP,KqBjCK,SAAcyb,EAAO1F,GAEpB,MAAA7G,EAAS,CAACtS,KAAM,OAAQzU,MAAO+4C,GAAU/hB,OAAOpJ,EAAK5tB,SAEpD,OADDszB,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC/B,ErB6BEolB,csBlCK,SAAuB7Y,EAAO1F,GAEnC,MAAM7G,EAAS,CACbtS,KAAM,UACN0f,QAAS,KACTzxB,WAAY,CAAE,EACdowB,SAAU,IAGL,OADDQ,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC/B,EtByBEi0B,KAAMC,GACNC,KAAMD,GACNv6C,WAAYu6C,GACZE,mBAAoBF,IAItB,SAASA,KAET,CuB/DO,MCODG,GAAsB,iBAATpf,KAAoBA,KAAOqf,WA6EjCC,GAA4BC,GA3EpB,EAACC,EAAGr1C,KACjB,MAAAmB,EAAK,CAACm0C,EAAKv5C,KACbs5C,EAAAtlB,IAAIh0B,EAAOu5C,GACNA,GAGHC,EAASx5C,IACT,GAAAs5C,EAAEhnB,IAAItyB,GACD,OAAAs5C,EAAEvlB,IAAI/zB,GAEf,MAAOuS,EAAMzU,GAASmG,EAAEjE,GACxB,OAAQuS,GACN,KDpBoB,ECqBpB,KDtBoB,ECuBX,OAAAnN,EAAGtH,EAAOkC,GACnB,KDtBoB,ECsBR,CACV,MAAMy5C,EAAMr0C,EAAG,GAAIpF,GACnB,IAAA,MAAWA,KAASlC,EACd27C,EAAA/sB,KAAK8sB,EAAOx5C,IACX,OAAAy5C,CACR,CACD,KD3BoB,EC2BP,CACX,MAAMxkC,EAAS7P,EAAG,CAAE,EAAEpF,GACX,IAAA,MAACM,EAAKN,KAAUlC,EACzBmX,EAAOukC,EAAOl5C,IAAQk5C,EAAOx5C,GACxB,OAAAiV,CACR,CACD,KDhCoB,ECiClB,OAAO7P,EAAG,IAAIs0C,KAAK57C,GAAQkC,GAC7B,KDjCoB,ECiCP,CACL,MAAA6rB,OAACA,EAAQ8tB,MAAAA,GAAS77C,EACxB,OAAOsH,EAAG,IAAIw0C,OAAO/tB,EAAQ8tB,GAAQ35C,EACtC,CACD,KDpCoB,ECoCV,CACR,MAAM2tC,EAAMvoC,EAAO,IAAAyqB,IAAK7vB,GACb,IAAA,MAACM,EAAKN,KAAUlC,EACzB6vC,EAAI3Z,IAAIwlB,EAAOl5C,GAAMk5C,EAAOx5C,IACvB,OAAA2tC,CACR,CACD,KDzCoB,ECyCV,CACR,MAAM3Z,EAAM5uB,EAAO,IAAA2qB,IAAK/vB,GACxB,IAAA,MAAWA,KAASlC,EACdk2B,EAAAqD,IAAImiB,EAAOx5C,IACV,OAAAg0B,CACR,CACD,KD9CoB,EC8CR,CACV,MAAOx2B,KAAAA,EAAMuxB,QAAAA,GAAWjxB,EACxB,OAAOsH,EAAG,IAAI8zC,GAAI17C,GAAMuxB,GAAU/uB,EACnC,CACD,KDjDoB,ECkDlB,OAAOoF,EAAGy0C,OAAO/7C,GAAQkC,GAC3B,IAAK,SACH,OAAOoF,EAAG3G,OAAOo7C,OAAO/7C,IAASkC,GACnC,IAAK,cACH,OAAOoF,EAAG,IAAI00C,WAAWh8C,GAAOunC,OAAQvnC,GAC1C,IAAK,WAAY,CACf,MAAMunC,OAAEA,GAAW,IAAIyU,WAAWh8C,GAClC,OAAOsH,EAAG,IAAI20C,SAAS1U,GAASvnC,EACjC,EAEH,OAAOsH,EAAG,IAAI8zC,GAAI3mC,GAAMzU,GAAQkC,IAG3B,OAAAw5C,GAYgCQ,KAAiBnqB,IAAKwpB,EAAtBW,CAAkC,GC7ErEC,GAAQ,IAERpF,SAACA,IAAY,IACbj1C,KAACA,IAAQnB,OAETid,GAAkB5d,IACtB,MAAMyU,SAAczU,EAChB,GAAS,WAATyU,IAAsBzU,EACjB,MAAA,CFde,EEcHyU,GAErB,MAAM2nC,EAAWrF,GAASziB,KAAKt0B,GAAOoG,MAAM,GAAK,GACjD,OAAQg2C,GACN,IAAK,QACI,MAAA,CFlBa,EEkBLD,IACjB,IAAK,SACI,MAAA,CFnBa,EEmBJA,IAClB,IAAK,OACI,MAAA,CFpBa,EEoBNA,IAChB,IAAK,SACI,MAAA,CFrBa,EEqBJA,IAClB,IAAK,MACI,MAAA,CFtBa,EEsBPA,IACf,IAAK,MACI,MAAA,CFvBa,EEuBPA,IACf,IAAK,WACI,MAAA,CF9Ba,EE8BLC,GAGf,OAAAA,EAASp5C,SAAS,SACb,CFlCe,EEkCPo5C,GAEbA,EAASp5C,SAAS,SACb,CF/Be,EE+BPo5C,GAEV,CFtCiB,EEsCRA,IAGZC,GAAa,EAAEC,EAAM7nC,KF3CD,IE4CxB6nC,IACU,aAAT7nC,GAAgC,WAATA,GAyHZ8nC,GAAY,CAACv8C,GAAQw8C,OAAMC,SAAS,MAChD,MAAMt2C,EAAI,GACV,MAxHiB,EAACu2C,EAAQF,EAAMhB,EAAGr1C,KAE7B,MAAAmB,EAAK,CAACm0C,EAAKz7C,KACf,MAAMkC,EAAQiE,EAAEyoB,KAAK6sB,GAAO,EAErBv5C,OADLs5C,EAAAtlB,IAAIl2B,EAAOkC,GACNA,GAGHy6C,EAAgB38C,IAChB,GAAAw7C,EAAEhnB,IAAIx0B,GACD,OAAAw7C,EAAEvlB,IAAIj2B,GAEf,IAAKs8C,EAAM7nC,GAAQmJ,GAAO5d,GAC1B,OAAQs8C,GACN,KF9DoB,EE8DJ,CACd,IAAIje,EAAQr+B,EACZ,OAAQyU,GACN,IAAK,SACI6nC,EF1DO,EE2Ddje,EAAQr+B,EAAM+2C,WACd,MACF,IAAK,WACL,IAAK,SACC,GAAA2F,EACI,MAAA,IAAIxvB,UAAU,uBAAyBzY,GACvC4pB,EAAA,KACR,MACF,IAAK,YACH,OAAO/2B,EAAG,EF7EI,GE6EItH,GAEtB,OAAOsH,EAAG,CAACg1C,EAAMje,GAAQr+B,EAC1B,CACD,KF/EoB,EE+ER,CACV,GAAIyU,EAAM,CACR,IAAIqjC,EAAS93C,EAON,MANM,aAATyU,EACOqjC,EAAA,IAAIkE,WAAWh8C,EAAMunC,QAEd,gBAAT9yB,IACEqjC,EAAA,IAAIkE,WAAWh8C,IAEnBsH,EAAG,CAACmN,EAAM,IAAIqjC,IAAU93C,EAChC,CAED,MAAM27C,EAAM,GACNz5C,EAAQoF,EAAG,CAACg1C,EAAMX,GAAM37C,GAC9B,IAAA,MAAWq+B,KAASr+B,EACd27C,EAAA/sB,KAAK+tB,EAAKte,IACTn8B,OAAAA,CACR,CACD,KFhGoB,EEgGP,CACX,GAAIuS,EACF,OAAQA,GACN,IAAK,SACH,OAAOnN,EAAG,CAACmN,EAAMzU,EAAM+2C,YAAa/2C,GACtC,IAAK,UACL,IAAK,SACL,IAAK,SACH,OAAOsH,EAAG,CAACmN,EAAMzU,EAAM48C,WAAY58C,GAIzC,GAAIw8C,GAAS,WAAYx8C,EAChB,OAAA28C,EAAK38C,EAAM68C,UAEpB,MAAMj6C,EAAU,GACVV,EAAQoF,EAAG,CAACg1C,EAAM15C,GAAU5C,GACvB,IAAA,MAAAwC,KAAOV,GAAK9B,IACjB08C,GAAWL,GAAWz+B,GAAO5d,EAAMwC,MAC7BI,EAAAgsB,KAAK,CAAC+tB,EAAKn6C,GAAMm6C,EAAK38C,EAAMwC,MAEjCN,OAAAA,CACR,CACD,KFtHoB,EEuHlB,OAAOoF,EAAG,CAACg1C,EAAMt8C,EAAM88C,eAAgB98C,GACzC,KFvHoB,EEuHP,CACL,MAAA+tB,OAACA,EAAQ8tB,MAAAA,GAAS77C,EACjB,OAAAsH,EAAG,CAACg1C,EAAM,CAACvuB,SAAQ8tB,UAAS77C,EACpC,CACD,KF1HoB,EE0HV,CACR,MAAM4C,EAAU,GACVV,EAAQoF,EAAG,CAACg1C,EAAM15C,GAAU5C,GAClC,IAAA,MAAYwC,EAAK67B,KAAUr+B,GACrB08C,IAAYL,GAAWz+B,GAAOpb,MAAS65C,GAAWz+B,GAAOygB,MACnDz7B,EAAAgsB,KAAK,CAAC+tB,EAAKn6C,GAAMm6C,EAAKte,KAE3Bn8B,OAAAA,CACR,CACD,KFlIoB,EEkIV,CACR,MAAMU,EAAU,GACVV,EAAQoF,EAAG,CAACg1C,EAAM15C,GAAU5C,GAClC,IAAA,MAAWq+B,KAASr+B,GACd08C,GAAWL,GAAWz+B,GAAOygB,KACvBz7B,EAAAgsB,KAAK+tB,EAAKte,IAEfn8B,OAAAA,CACR,EAGG,MAAA+uB,QAACA,GAAWjxB,EACX,OAAAsH,EAAG,CAACg1C,EAAM,CAAC58C,KAAM+U,EAAMwc,YAAWjxB,IAGpC,OAAA28C,GAiBAI,GAAaP,GAAQC,KAAUD,EAAM,IAAIzqB,IAAK5rB,EAA9C42C,CAAiD/8C,GAAQmG,GC1JnD62C,GAA2B,mBAApBC,gBAAoB,CAEvCC,EAAKv9C,IACJA,IAAY,SAAUA,GAAW,UAAWA,GAC1C27C,GAAYiB,GAAUW,EAAKv9C,IAAYs9C,gBAAgBC,GAE3D,CAACA,EAAKv9C,IAAY27C,GAAYiB,GAAUW,EAAKv9C,IC2DxC,SAASw9C,GAA2Bh3C,EAAGi3C,GAE5C,MAAMr2B,EAAS,CAAC,CAACtS,KAAM,OAAQzU,MAAO,MAW/B,OATHo9C,EAAmB,GACrBr2B,EAAO6H,KAAK,CACVna,KAAM,UACN0f,QAAS,MACTzxB,WAAY,CAAE,EACdowB,SAAU,CAAC,CAACre,KAAM,OAAQzU,MAAOg3B,OAAOomB,OAIrCr2B,CACT,CAaO,SAASs2B,GAAyBC,EAAgBF,GACvD,MACE,sBACCE,EAAiB,IACjBF,EAAmB,EAAI,IAAMA,EAAmB,GAErD,CC0BO,MAAMG,GAAA,SAgBCz9C,GACJ,GAAAA,QACK,OAAAT,GAGL,GAAgB,mBAATS,EACT,OAAO09C,GAAY19C,GAGjB,GAAgB,iBAATA,EACF,OAAA8yB,MAAMC,QAAQ/yB,GAe7B,SAAoB29C,GAElB,MAAM57C,EAAS,GACf,IAAIK,GAAQ,EAEL,OAAEA,EAAQu7C,EAAMp7C,QACrBR,EAAOK,GAASq7C,GAAQE,EAAMv7C,IAGhC,OAAOs7C,GAAYN,GAMnB,SAASA,KAAOtkB,GACd,IAAI12B,GAAQ,EAEL,OAAEA,EAAQL,EAAOQ,QACtB,GAAIR,EAAOK,GAAOw7C,MAAMn9C,KAAMq4B,GAAoB,OAAA,EAG7C,OAAA,CACR,CACH,CAvCqC+kB,CAAW79C,GA+ChD,SAAsBwC,GACd,MAAAs7C,EAAA,EAEN,OAAOJ,GAAYvlB,GAMnB,SAASA,EAAIrK,GACL,MAAAiwB,EAAA,EAKF,IAAAr7C,EAEJ,IAAKA,KAAOF,EACV,GAAIu7C,EAAar7C,KAASo7C,EAAcp7C,GAAa,OAAA,EAGhD,OAAA,CACR,CACH,CAtEwDs7C,CAAah+C,GAG3D,GAAgB,iBAATA,EACT,OA0ER,SAAqBwC,GACnB,OAAOk7C,GAAY/oC,GAKnB,SAASA,EAAKmZ,GACLA,OAAAA,GAAQA,EAAKnZ,OAASnS,CAC9B,CACH,CAnFey7C,CAAYj+C,GAGf,MAAA,IAAIquB,MAAM,+CACjB,EAuFL,SAASqvB,GAAYQ,GACZ,OAME,SAAMh+C,EAAOkC,EAAOkvB,GACpB,OAAAsG,QAoBX,SAAwB13B,GACtB,OAAiB,OAAVA,GAAmC,iBAAVA,GAAsB,SAAUA,CAClE,CArBMi+C,CAAej+C,IACbg+C,EAAa1pB,KACX/zB,KACAP,EACiB,iBAAVkC,EAAqBA,OAAQ,EACpCkvB,QAAU,GAGjB,CACH,CAEA,SAAS/xB,KACA,OAAA,CACT,CC3DA,MAAMU,GAAQ,GAKDm+C,IAAW,EAKXC,IAAO,EAsDb,SAASC,GAAa/rB,EAAMvyB,EAAMu+C,EAASrb,GAE5C,IAAA1gC,EAEgB,mBAATxC,GAA0C,mBAAZu+C,GAC7Brb,EAAAqb,EAEAA,EAAAv+C,GAGFwC,EAAAxC,EAGJ,MAAA6K,EAAK4yC,GAAQj7C,GACb6R,EAAO6uB,GAAe,EAAA,GASnB,SAAAsb,EAAQ1wB,EAAM1rB,EAAOq8C,GACtB,MAAAv+C,EACJ4tB,GAAwB,iBAATA,EAAoBA,EAAO,CAAE,EAG1C,GAAsB,iBAAf5tB,EAAMyU,KAAmB,CAC5B/U,MAAAA,EAEqB,iBAAlBM,EAAMm0B,QACTn0B,EAAMm0B,QAEc,iBAAfn0B,EAAMN,KACXM,EAAMN,UACN,EAECiB,OAAA8rB,eAAe+xB,EAAO,OAAQ,CACnCx+C,MACE,SAAiB4tB,EAAKnZ,MAAQ/U,EAAO,IAAMA,EAAO,IAAM,IAAO,KAEpE,CAEM8+C,OAAAA,EAEP,SAASA,IAEP,IAEIC,EAEA95B,EAEA+5B,EANA33B,EAAShnB,GAQT,KAACD,GAAQ6K,EAAGijB,EAAM1rB,EAAOq8C,EAAQA,EAAQl8C,OAAS,SAAM,MAE1D0kB,EA0CR,SAAkB/mB,GACZ,GAAA4yB,MAAMC,QAAQ7yB,GACT,OAAAA,EAGL,GAAiB,iBAAVA,EACF,MAAA,CAACk+C,GAAUl+C,GAGpB,OAAOA,QAAwCD,GAAQ,CAACC,EAC1D,CApDiB2+C,CAASN,EAAQzwB,EAAM2wB,IAE5Bx3B,EAAO,KAAOo3B,IACT,OAAAp3B,EAIP,GAAA,aAAc6G,GAAQA,EAAKkF,SAAU,CACjC,MAAA8rB,EAAA,EAEN,GAAIA,EAAa9rB,UArHL,SAqHiB/L,EAAO,GAIlC,IAHApC,GAAUqe,EAAU4b,EAAa9rB,SAASzwB,QAAe,GAAA8R,EAC1CuqC,EAAAH,EAAQ1uB,OAAO+uB,GAEvBj6B,GAAS,GAAMA,EAASi6B,EAAa9rB,SAASzwB,QAAQ,CACrD,MAAAsyB,EAAQiqB,EAAa9rB,SAASnO,GAIhC,GAFJ85B,EAAYH,EAAQ3pB,EAAOhQ,EAAQ+5B,EAAvBJ,GAERG,EAAU,KAAON,GACZ,OAAAM,EAIP95B,EAAwB,iBAAjB85B,EAAU,GAAkBA,EAAU,GAAK95B,EAASxQ,CAC9D,CAEJ,CAEM,OAAA4S,CACR,CACF,CAzEDu3B,CAAQjsB,OAAM,EAAW,GAAzBisB,EA0EF,CCnGO,SAASE,GAAMnsB,EAAMwsB,EAAeC,EAAkBC,GAEvD,IAAA/b,EAEAljC,EAEAu+C,EAGuB,mBAAlBQ,GACqB,mBAArBC,GAEAh/C,OAAA,EACGu+C,EAAAQ,EACA7b,EAAA8b,IAGHh/C,EAAA++C,EAEGR,EAAAS,EACA9b,EAAA+b,GAGCX,GAAA/rB,EAAMvyB,EAMV,SAAS8tB,EAAM2wB,GACtB,MAAMntB,EAASmtB,EAAQA,EAAQl8C,OAAS,GAClCH,EAAQkvB,EAASA,EAAO0B,SAAS3B,QAAQvD,QAAQ,EAChD,OAAAywB,EAAQzwB,EAAM1rB,EAAOkvB,EAC7B,EAVkC4R,EAWrC,CCrIA,MAAMpR,GAAM,CAAE,EAACC,eAGTpyB,GAAe,CAAE,EAsJvB,SAAS25C,GAAMr3B,EAAMgH,GACfhH,EAAK2L,WAAa3E,EAAA2E,S7FtPjB,SAAkBE,GACjB,MAAA1Z,EAAQsc,GAAW5C,GACnBxM,EAAMkP,GAAS1C,GAErB,GAAI1Z,GAASkN,EACJ,MAAA,CAAClN,QAAOkN,MAEnB,C6F+OmCsM,CAAS3L,GAC5C,CAcA,SAASs3B,GAAUt3B,EAAMgH,GAEvB,IAAIhC,EAASgC,EAGT,GAAAhH,GAAQA,EAAKrZ,KAAM,CACf,MAAAs2C,EAAQj9B,EAAKrZ,KAAKs2C,MAClBC,EAAYl9B,EAAKrZ,KAAKu2C,UACtBC,EAAcn9B,EAAKrZ,KAAKw2C,YAE1B,GAAiB,iBAAVF,EAGL,GAAgB,YAAhBj4B,EAAOtS,KACTsS,EAAOoN,QAAU6qB,MAMd,CAIMj4B,EAAA,CAACtS,KAAM,UAAW0f,QAAS6qB,EAAOt8C,WAAY,CAAE,EAAEowB,SAD1C,aAAc/L,EAASA,EAAO+L,SAAW,CAAC/L,GAE5D,CAGiB,YAAhBA,EAAOtS,MAAsByqC,GAC/Bv+C,OAAOC,OAAOmmB,EAAOrkB,WAAYu6C,GAAgBiC,IAIjD,aAAcn4B,GACdA,EAAO+L,UADP,MAEAmsB,IAGAl4B,EAAO+L,SAAWmsB,EAErB,CAEM,OAAAl4B,CACT,CAYA,SAASo4B,GAAsB7rB,EAAO1F,GAC9B,MAAAllB,EAAOklB,EAAKllB,MAAQ,CAAE,EAEtBqe,IACJ,UAAW6G,IACTgE,GAAI0C,KAAK5rB,EAAM,gBAAkBkpB,GAAI0C,KAAK5rB,EAAM,aAE9C,CACE+L,KAAM,UACN0f,QAAS,MACTzxB,WAAY,CAAE,EACdowB,SAAUQ,EAAM2E,IAAIrK,IALtB,CAACnZ,KAAM,OAAQzU,MAAO4tB,EAAK5tB,OAS1B,OADDszB,EAAA8lB,MAAMxrB,EAAM7G,GACXuM,EAAM+lB,UAAUzrB,EAAM7G,EAC/B,CAcO,SAASlS,GAAKuqC,EAAO9E,GAE1B,MAAMvzB,EAAS,GACf,IAAI7kB,GAAQ,EAML,IAJHo4C,GACFvzB,EAAO6H,KAAK,CAACna,KAAM,OAAQzU,MAAO,SAG3BkC,EAAQk9C,EAAM/8C,QACjBH,GAAO6kB,EAAO6H,KAAK,CAACna,KAAM,OAAQzU,MAAO,OACtC+mB,EAAA6H,KAAKwwB,EAAMl9C,IAOb,OAJHo4C,GAAS8E,EAAM/8C,OAAS,GAC1B0kB,EAAO6H,KAAK,CAACna,KAAM,OAAQzU,MAAO,OAG7B+mB,CACT,CAUA,SAASs4B,GAAuBr/C,GAC9B,IAAIkC,EAAQ,EACR4T,EAAO9V,EAAMw4B,WAAWt2B,GAErB4T,KAAS,IAATA,GAAuB,KAATA,GACnB5T,IACA4T,EAAO9V,EAAMw4B,WAAWt2B,GAGnB,OAAAlC,EAAMoG,MAAMlE,EACrB,CCjYO,SAASo9C,GAAOjtB,EAAM1yB,GACrB,MAAA2zB,ED0GD,SAAqBjB,EAAM1yB,GAChC,MAAM82B,EAAW92B,GAAWF,GAEtB06C,MAAqBpoB,IAErBwtB,MAAmBxtB,IAEnB+nB,MAAqB/nB,IAIrBmnB,EAAW,IAAIsG,MAAoB/oB,EAASyiB,UAG5C5lB,EAAQ,CACZ2E,IA0EF,SAAa7G,GAEX,MAAM7uB,EAAS,GAEf,GAAI,aAAc6uB,EAAQ,CACxB,MAAMguB,EAAQhuB,EAAO0B,SACrB,IAAI5wB,GAAQ,EACL,OAAEA,EAAQk9C,EAAM/8C,QAAQ,CAC7B,MAAM0kB,EAASuM,EAAMW,IAAImrB,EAAMl9C,GAAQkvB,GAGvC,GAAIrK,EAAQ,CACV,GAAI7kB,GAAmC,UAA1Bk9C,EAAMl9C,EAAQ,GAAGuS,OACvBme,MAAMC,QAAQ9L,IAA2B,SAAhBA,EAAOtS,OAC5BsS,EAAA/mB,MAAQq/C,GAAuBt4B,EAAO/mB,SAG1C4yB,MAAMC,QAAQ9L,IAA2B,YAAhBA,EAAOtS,MAAoB,CACjD,MAAAy6B,EAAOnoB,EAAO+L,SAAS,GAEzBoc,GAAsB,SAAdA,EAAKz6B,OACVy6B,EAAAlvC,MAAQq/C,GAAuBnQ,EAAKlvC,OAE5C,CAGC4yB,MAAMC,QAAQ9L,GACTxkB,EAAAqsB,QAAQ7H,GAEfxkB,EAAOqsB,KAAK7H,EAEf,CACF,CACF,CAEM,OAAAxkB,CACR,EA7GC82C,aACAc,iBACAoF,eACAzF,iBACAH,cAAe,GACnBT,SAAIA,EACAjlB,IAgCOA,SAAIrG,EAAMwD,GACjB,MAAM3c,EAAOmZ,EAAKnZ,KACZgrC,EAASnsB,EAAM4lB,SAASzkC,GAE9B,GAAImd,GAAI0C,KAAKhB,EAAM4lB,SAAUzkC,IAASgrC,EAC7B,OAAAA,EAAOnsB,EAAO1F,EAAMwD,GAGzB,GAAAkC,EAAM3zB,QAAQ+/C,aAAepsB,EAAM3zB,QAAQ+/C,YAAY18C,SAASyR,GAAO,CACzE,GAAI,aAAcmZ,EAAM,CACtB,MAAMkF,SAACA,KAAa6sB,GAAW/xB,EACzB7G,EAASk2B,GAAgB0C,GAIxB,OAFA54B,EAAA+L,SAAWQ,EAAM2E,IAAIrK,GAErB7G,CACR,CAGD,OAAOk2B,GAAgBrvB,EACxB,CAIM,OAFS0F,EAAM3zB,QAAQigD,gBAAkBT,IAEjC7rB,EAAO1F,EAAMwD,EAC7B,EAxDCzxB,QAAS82B,EACT2iB,SACJvkC,KAAIA,IAiBK,OAdD2pC,GAAAnsB,EAAM,SAAUzE,GACpB,GAAkB,eAAdA,EAAKnZ,MAAuC,uBAAdmZ,EAAKnZ,KAA+B,CACpE,MAAMo7B,EAAoB,eAAdjiB,EAAKnZ,KAAwB0lC,EAAiBoF,EACpDl1C,EAAK2sB,OAAOpJ,EAAKyY,YAAY7a,cAI9BqkB,EAAIrb,IAAInqB,IAEPwlC,EAAA3Z,IAAI7rB,EAAIujB,EAEf,CACL,GAES0F,CAoFT,CCxOgBusB,CAAYxtB,EAAM1yB,GAC1BiuB,EAAO0F,EAAMW,IAAI5B,OAAM,GACvBytB,ELkCD,SAAgBxsB,GACf,MAAAmmB,EACmC,iBAAhCnmB,EAAM3zB,QAAQ85C,cACjBnmB,EAAM3zB,QAAQ85C,cACd,gBACAsG,EACJzsB,EAAM3zB,QAAQogD,qBAAuB5C,GACjC6C,EACJ1sB,EAAM3zB,QAAQqgD,mBAAqB3C,GAC/B4C,EAAgB3sB,EAAM3zB,QAAQsgD,eAAiB,YAC/CC,EAAuB5sB,EAAM3zB,QAAQugD,sBAAwB,KAC7DC,EAA0B7sB,EAAM3zB,QAAQwgD,yBAA2B,CACvEl4C,UAAW,CAAC,YAGRm4C,EAAY,GAClB,IAAI9C,GAAiB,EAErB,OAASA,EAAiBhqB,EAAMqmB,cAAct3C,QAAQ,CAC9C3B,MAAAA,EAAa4yB,EAAMisB,aAAatpB,IACpC3C,EAAMqmB,cAAc2D,IAGtB,IAAK58C,EACH,SAGI0H,MAAAA,EAAUkrB,EAAM2E,IAAIv3B,GACpB2J,EAAK2sB,OAAOt2B,EAAW2lC,YAAY7a,cACnCkuB,EAAS9e,GAAavwB,EAAGvJ,eAC/B,IAAIs8C,EAAmB,EAEvB,MAAMiD,EAAiB,GACjBC,EAAShtB,EAAMwmB,eAAe7jB,IAAI5rB,GAGxC,UAAkB,IAAXi2C,KAA0BlD,GAAoBkD,GAAQ,CACvDD,EAAeh+C,OAAS,GAC1Bg+C,EAAezxB,KAAK,CAACna,KAAM,OAAQzU,MAAO,MAG5C,IAAI8yB,EAC6B,iBAAxBitB,EACHA,EACAA,EAAoBzC,EAAgBF,GAElB,iBAAbtqB,IACTA,EAAW,CAACre,KAAM,OAAQzU,MAAO8yB,IAGnCutB,EAAezxB,KAAK,CAClBna,KAAM,UACN0f,QAAS,IACTzxB,WAAY,CACVuH,KACE,IACAwvC,EACA,SACAC,GACC0D,EAAmB,EAAI,IAAMA,EAAmB,IACnDmD,oBAAqB,GACrB/7C,UAC+B,iBAAtBw7C,EACHA,EACAA,EAAkB1C,EAAgBF,GACxCn1C,UAAW,CAAC,0BAEd6qB,SAAUF,MAAMC,QAAQC,GAAYA,EAAW,CAACA,IAEnD,CAED,MAAM0O,EAAOp5B,EAAQA,EAAQ/F,OAAS,GAEtC,GAAIm/B,GAAsB,YAAdA,EAAK/sB,MAAuC,MAAjB+sB,EAAKrN,QAAiB,CAC3D,MAAMqsB,EAAWhf,EAAK1O,SAAS0O,EAAK1O,SAASzwB,OAAS,GAClDm+C,GAA8B,SAAlBA,EAAS/rC,KACvB+rC,EAASxgD,OAAS,IAElBwhC,EAAK1O,SAASlE,KAAK,CAACna,KAAM,OAAQzU,MAAO,MAGtCwhC,EAAA1O,SAASlE,QAAQyxB,EAC5B,MACMj4C,EAAQwmB,QAAQyxB,GAIlB,MAAM7N,EAAW,CACf/9B,KAAM,UACN0f,QAAS,KACTzxB,WAAY,CAAC2H,GAAIovC,EAAgB,MAAQC,GACzC5mB,SAAUQ,EAAMze,KAAKzM,GAAS,IAG1BkrB,EAAA8lB,MAAM14C,EAAY8xC,GAExB4N,EAAUxxB,KAAK4jB,EAChB,CAEG,GAAqB,IAArB4N,EAAU/9C,OAIP,MAAA,CACLoS,KAAM,UACN0f,QAAS,UACTzxB,WAAY,CAAC+9C,eAAe,EAAMx4C,UAAW,CAAC,cAC9C6qB,SAAU,CACR,CACEre,KAAM,UACN0f,QAAS+rB,EACTx9C,WAAY,IACPu6C,GAAgBkD,GACnB91C,GAAI,kBAENyoB,SAAU,CAAC,CAACre,KAAM,OAAQzU,MAAOigD,KAEnC,CAACxrC,KAAM,OAAQzU,MAAO,MACtB,CACEyU,KAAM,UACN0f,QAAS,KACTzxB,WAAY,CAAE,EACdowB,SAAUQ,EAAMze,KAAKurC,GAAW,IAElC,CAAC3rC,KAAM,OAAQzU,MAAO,OAG5B,CKjKe0gD,CAAOptB,GAEdvM,EAAS6L,MAAMC,QAAQjF,GACzB,CAACnZ,KAAM,OAAQqe,SAAUlF,GACzBA,GAAQ,CAACnZ,KAAM,OAAQqe,SAAU,IAU9B,OARHgtB,GAKK/4B,EAAA+L,SAASlE,KAAK,CAACna,KAAM,OAAQzU,MAAO,MAAO8/C,GAG7C/4B,CACT,CC0Ce,SAAS45B,GAAaC,EAAajhD,GAC5C,OAAAihD,GAAe,QAASA,EAInBr5C,eAAgB8qB,EAAMf,GAErB,MAAAuvB,EACJvB,GAAOjtB,EAAM,CAACf,UAAS3xB,UAEnBihD,EAAYE,IAAID,EAAUvvB,EACjC,EAMI,SAAUe,EAAMf,GAMrB,OACEguB,GAAOjtB,EAAM,CAACf,UAAUsvB,GAAejhD,GAE1C,CACH,CCvKO,SAASohD,GAAK/yB,GACnB,GAAIA,EACI,MAAAA,CAEV,CCTA,IAAIgzB,GAASrgD,OAAOI,UAAU8wB,eAC1BovB,GAAQtgD,OAAOI,UAAUg2C,SACzBtqB,GAAiB9rB,OAAO8rB,eACxBy0B,GAAOvgD,OAAOwgD,yBAEdtuB,GAAU,SAAiB8oB,GAC1B,MAAyB,mBAAlB/oB,MAAMC,QACTD,MAAMC,QAAQ8oB,GAGK,mBAApBsF,GAAM3sB,KAAKqnB,EACnB,EAEIyF,GAAgB,SAAuBC,GAC1C,IAAKA,GAA2B,oBAApBJ,GAAM3sB,KAAK+sB,GACf,OAAA,EAGR,IASI7+C,EATA8+C,EAAoBN,GAAO1sB,KAAK+sB,EAAK,eACrCE,EAAmBF,EAAIlhD,aAAekhD,EAAIlhD,YAAYY,WAAaigD,GAAO1sB,KAAK+sB,EAAIlhD,YAAYY,UAAW,iBAE9G,GAAIsgD,EAAIlhD,cAAgBmhD,IAAsBC,EACtC,OAAA,EAMR,IAAK/+C,KAAO6+C,GAEZ,YAAsB,IAAR7+C,GAAuBw+C,GAAO1sB,KAAK+sB,EAAK7+C,EACvD,EAGIg/C,GAAc,SAAqBltC,EAAQ3U,GAC1C8sB,IAAmC,cAAjB9sB,EAAQD,KACd+sB,GAAAnY,EAAQ3U,EAAQD,KAAM,CACpC+hD,YAAY,EACZC,cAAc,EACd1hD,MAAOL,EAAQgiD,SACfC,UAAU,IAGJttC,EAAA3U,EAAQD,MAAQC,EAAQgiD,QAEjC,EAGIE,GAAc,SAAqBR,EAAK3hD,GAC3C,GAAa,cAATA,EAAsB,CACzB,IAAKshD,GAAO1sB,KAAK+sB,EAAK3hD,GACd,UACGwhD,GAGH,OAAAA,GAAKG,EAAK3hD,GAAMM,KAExB,CAED,OAAOqhD,EAAI3hD,EACZ,aAEiB,SAASoiD,IACzB,IAAIniD,EAASD,EAAMoU,EAAKiuC,EAAMC,EAAaC,EACvC3tC,EAAS4tC,UAAU,GACnB10B,EAAI,EACJnrB,EAAS6/C,UAAU7/C,OACnB8/C,GAAO,EAaJ,IAVe,kBAAX7tC,IACH6tC,EAAA7tC,EACEA,EAAA4tC,UAAU,IAAM,GAErB10B,EAAA,IAES,MAAVlZ,GAAqC,iBAAXA,GAAyC,mBAAXA,KAC3DA,EAAS,CAAA,GAGHkZ,EAAInrB,IAAUmrB,EAGpB,GAAe,OAFf7tB,EAAUuiD,UAAU10B,IAInB,IAAK9tB,KAAQC,EACNmU,EAAA+tC,GAAYvtC,EAAQ5U,GAItB4U,KAHGytC,EAAAF,GAAYliD,EAASD,MAKvByiD,GAAQJ,IAASX,GAAcW,KAAUC,EAAcnvB,GAAQkvB,MAC9DC,GACWA,GAAA,EACdC,EAAQnuC,GAAO+e,GAAQ/e,GAAOA,EAAM,IAEpCmuC,EAAQnuC,GAAOstC,GAActtC,GAAOA,EAAM,CAAA,EAI/B0tC,GAAAltC,EAAQ,CAAE5U,KAAMA,EAAMiiD,SAAUG,EAAOK,EAAMF,EAAOF,WAGtC,IAATA,GACjBP,GAAYltC,EAAQ,CAAE5U,KAAMA,EAAMiiD,SAAUI,KAQ1C,OAAAztC,CACR,GCpHe,SAAS8sC,GAAcphD,GACrC,GAAqB,iBAAVA,GAAgC,OAAVA,EACzB,OAAA,EAGF,MAAAe,EAAYJ,OAAOyhD,eAAepiD,GACxC,QAAsB,OAAde,GAAsBA,IAAcJ,OAAOI,WAAkD,OAArCJ,OAAOyhD,eAAerhD,IAA0BshD,OAAOC,eAAetiD,GAAYqiD,OAAO11B,YAAY3sB,EACtK,CC+BO,SAASuiD,KAEd,MAAMC,EAAM,GAENC,EAAW,CAAC3B,IAKlB,YAAgBv+C,GACd,IAAImgD,GAAkB,EAEhB,MAAAC,EAAWpgD,EAAOwyB,MAEpB,GAAoB,mBAAb4tB,EACH,MAAA,IAAIz1B,UAAU,2CAA6Cy1B,IAW1D,SAAA7nB,EAAK9M,KAAUqC,GAChB,MAAA+C,EAAKovB,IAAME,GACjB,IAAIxgD,GAAQ,EAEZ,GAAI8rB,EACF20B,EAAS30B,OADX,CAMO,OAAE9rB,EAAQK,EAAOF,QACA,OAAlBguB,EAAOnuB,SAAqC,IAAlBmuB,EAAOnuB,KAC5BA,EAAAA,GAASK,EAAOL,IAKlBK,EAAA8tB,EAGL+C,EAqDH,SAAcwvB,EAAYD,GAE3B,IAAA9jB,EAEG,OAAAgkB,EAQP,SAASA,KAAWjqB,GACZ,MAAAkqB,EAAoBF,EAAWvgD,OAASu2B,EAAWv2B,OAErD,IAAA0kB,EAEA+7B,GACFlqB,EAAWhK,KAAKm0B,GAGd,IACOh8B,EAAA67B,EAAWlF,MAAMn9C,KAAMq4B,EACjC,OAAQ5K,GAOP,GAAI80B,GAAqBjkB,EACjB,MAPF,EAUN,OAAOkkB,EAVD,EAWP,CAEID,IACC/7B,GAAUA,EAAOi8B,MAA+B,mBAAhBj8B,EAAOi8B,KAClCj8B,EAAAi8B,KAAKA,EAAMD,GACTh8B,aAAkBoH,MAC3B40B,EAAKh8B,GAELi8B,EAAKj8B,GAGV,CAOQ,SAAAg8B,EAAK/0B,KAAUqC,GACjBwO,IACMA,GAAA,EACA8jB,EAAA30B,KAAUqC,GAEtB,CAOD,SAAS2yB,EAAKhjD,GACZ+iD,EAAK,KAAM/iD,EACZ,CACH,CAxHQ6U,CAAKue,EAAI0H,EAATjmB,IAAkBwb,GAETsyB,EAAA,QAAStyB,EAhBnB,CAkBF,CAjCIyK,CAAA,QAASv4B,EAkCf,EAhDsB48B,IAmDvB,SAAa8jB,GACP,GAAsB,mBAAfA,EACT,MAAM,IAAI/1B,UACR,+CAAiD+1B,GAK9C,OADPT,EAAI5zB,KAAKq0B,GACFR,CACR,GA1DM,OAAAA,CA2DT,CCpDO,MAAMS,GAAU,CAACC,SAcxB,SAAkB/9B,EAAMg+B,GACtB,QAAgB,IAAZA,GAA4C,iBAAZA,EAC5B,MAAA,IAAIl2B,UAAU,mCAGtBm2B,GAAWj+B,GACX,IAIIk+B,EAJApvC,EAAQ,EACRkN,GAAM,EACNlf,EAAQkjB,EAAK/iB,OAKf+gD,QAAY,IAAZA,GACmB,IAAnBA,EAAQ/gD,QACR+gD,EAAQ/gD,OAAS+iB,EAAK/iB,OACtB,CACA,KAAOH,KACL,GAAgC,KAA5BkjB,EAAKgyB,YAAYl1C,IAGnB,GAAIohD,EAAc,CAChBpvC,EAAQhS,EAAQ,EAChB,KACD,OACQkf,EAAM,IAGAkiC,GAAA,EACfliC,EAAMlf,EAAQ,GAIlB,OAAOkf,EAAM,EAAI,GAAKgE,EAAKhf,MAAM8N,EAAOkN,EACzC,CAED,GAAIgiC,IAAYh+B,EACP,MAAA,GAGT,IAAIm+B,GAAmB,EACnBC,EAAeJ,EAAQ/gD,OAAS,EAEpC,KAAOH,KACL,GAAgC,KAA5BkjB,EAAKgyB,YAAYl1C,IAGnB,GAAIohD,EAAc,CAChBpvC,EAAQhS,EAAQ,EAChB,KACD,OAEGqhD,EAAmB,IAGND,GAAA,EACfC,EAAmBrhD,EAAQ,GAGzBshD,GAAmB,IAEjBp+B,EAAKgyB,YAAYl1C,KAAWkhD,EAAQhM,YAAYoM,KAC9CA,EAAe,IAGXthD,EAAAA,IAKOshD,GAAA,EACTpiC,EAAAmiC,IAMVrvC,IAAUkN,EACNA,EAAAmiC,EACGniC,EAAM,IACfA,EAAMgE,EAAK/iB,QAGN,OAAA+iB,EAAKhf,MAAM8N,EAAOkN,EAC3B,EAlGkCqiC,QA4GlC,SAAiBr+B,GAGX,GAFJi+B,GAAWj+B,GAES,IAAhBA,EAAK/iB,OACA,MAAA,IAGT,IAGIqhD,EAHAtiC,GAAM,EACNlf,EAAQkjB,EAAK/iB,OAKjB,OAASH,GACP,GAAgC,KAA5BkjB,EAAKgyB,YAAYl1C,IACnB,GAAIwhD,EAAgB,CACZxhD,EAAAA,EACN,KACD,OACSwhD,IAEOA,GAAA,GAId,OAAAtiC,EAAM,EACe,KAAxBgE,EAAKgyB,YAAY,GACf,IACA,IACM,IAARh2B,GAAqC,KAAxBgE,EAAKgyB,YAAY,GAC5B,KACAhyB,EAAKhf,MAAM,EAAGgb,EACtB,EA5I2CgiC,QAsJ3C,SAAiBh+B,GACfi+B,GAAWj+B,GAEX,IASIs+B,EATAxhD,EAAQkjB,EAAK/iB,OAEb+e,GAAM,EACNuiC,EAAY,EACZC,GAAW,EAGXC,EAAc,EAIlB,KAAO3hD,KAAS,CACR4T,MAAAA,EAAOsP,EAAKgyB,YAAYl1C,GAE9B,GAAa,KAAT4T,EAWAsL,EAAM,IAGSsiC,GAAA,EACjBtiC,EAAMlf,EAAQ,GAGH,KAAT4T,EAEE8tC,EAAW,EACF1hD,EAAAA,EACc,IAAhB2hD,IACKA,EAAA,GAEPD,GAAe,IAGVC,GAAA,QAzBd,GAAIH,EAAgB,CAClBC,EAAYzhD,EAAQ,EACpB,KACD,CAwBJ,CAGC,GAAA0hD,EAAW,GACXxiC,EAAM,GAEU,IAAhByiC,GAEiB,IAAhBA,GAAqBD,IAAaxiC,EAAM,GAAKwiC,IAAaD,EAAY,EAEhE,MAAA,GAGF,OAAAv+B,EAAKhf,MAAMw9C,EAAUxiC,EAC9B,EAnNoDsV,KA6NpD,YAAiBotB,GACf,IAEIC,EAFA7hD,GAAQ,EAIL,OAAEA,EAAQ4hD,EAASzhD,QACb2hD,GAAAF,EAAS5hD,IAEhB4hD,EAAS5hD,KAET6hD,OAAW,IAAXA,EAAuBD,EAAS5hD,GAAS6hD,EAAS,IAAMD,EAAS5hD,IAIvE,YAAkB,IAAX6hD,EAAuB,IAahC,SAAmB3+B,GACjBi+B,GAAWj+B,GAEX,MAAM6+B,EAAmC,KAAxB7+B,EAAKgyB,YAAY,GAGlC,IAAIp3C,EAuBN,SAAyBolB,EAAM8+B,GAC7B,IAMIpuC,EAEAquC,EARAp9B,EAAS,GACTq9B,EAAoB,EACpBC,GAAY,EACZC,EAAO,EACPpiD,GAAQ,EAML,OAAEA,GAASkjB,EAAK/iB,QAAQ,CACzBH,GAAAA,EAAQkjB,EAAK/iB,OACfyT,EAAOsP,EAAKgyB,YAAYl1C,OAC9B,IAAwB,KAAT4T,EACT,MAEAA,EAAO,EACR,CAED,GAAa,KAATA,EAAuB,CACrB,GAAAuuC,IAAcniD,EAAQ,GAAc,IAAToiD,QAAY,GAEhCD,IAAcniD,EAAQ,GAAc,IAAToiD,EAAY,CAChD,GACEv9B,EAAO1kB,OAAS,GACM,IAAtB+hD,GAC0C,KAA1Cr9B,EAAOqwB,YAAYrwB,EAAO1kB,OAAS,IACO,KAA1C0kB,EAAOqwB,YAAYrwB,EAAO1kB,OAAS,GAE/B,GAAA0kB,EAAO1kB,OAAS,GAGd,GAFa8hD,EAAAp9B,EAAO0G,YAAY,KAEhC02B,IAAmBp9B,EAAO1kB,OAAS,EAAG,CACpC8hD,EAAiB,GACVp9B,EAAA,GACWq9B,EAAA,IAEXr9B,EAAAA,EAAO3gB,MAAM,EAAG+9C,GACzBC,EAAoBr9B,EAAO1kB,OAAS,EAAI0kB,EAAO0G,YAAY,MAGjDvrB,EAAAA,EACLoiD,EAAA,EACP,QACD,OACb,GAAqBv9B,EAAO1kB,OAAS,EAAG,CACnB0kB,EAAA,GACWq9B,EAAA,EACRliD,EAAAA,EACLoiD,EAAA,EACP,QACD,CAGCJ,IACFn9B,EAASA,EAAO1kB,OAAS,EAAI0kB,EAAS,MAAQ,KAC1Bq9B,EAAA,EAE9B,MACYr9B,EAAO1kB,OAAS,EAClB0kB,GAAU,IAAM3B,EAAKhf,MAAMi+C,EAAY,EAAGniD,GAE1C6kB,EAAS3B,EAAKhf,MAAMi+C,EAAY,EAAGniD,GAGrCkiD,EAAoBliD,EAAQmiD,EAAY,EAG9BniD,EAAAA,EACLoiD,EAAA,CACR,MAAmB,KAATxuC,GAAyBwuC,GAAW,EAC7CA,IAEOA,GAAA,CAEV,CAEM,OAAAv9B,CACT,CAtGcw9B,CAAgBn/B,GAAO6+B,GAEd,IAAjBjkD,EAAMqC,QAAiB4hD,IACjBjkD,EAAA,KAGNA,EAAMqC,OAAS,GAA2C,KAAtC+iB,EAAKgyB,YAAYhyB,EAAK/iB,OAAS,KAC5CrC,GAAA,KAGJ,OAAAikD,EAAW,IAAMjkD,EAAQA,CAClC,CA9BsCa,CAAUkjD,EAChD,EA5O0DS,IAAK,KA8W/D,SAASnB,GAAWj+B,GACd,GAAgB,iBAATA,EACT,MAAM,IAAI8H,UACR,mCAAqCu3B,KAAKC,UAAUt/B,GAG1D,CCpaO,MAAMu/B,GAAU,CAACC,IAExB,WACS,MAAA,GACT,GCYO,SAASC,GAAMC,GACb,OAAAptB,QACa,OAAlBotB,GAC2B,iBAAlBA,GACP,SAAUA,GACVA,EAAc76C,MACd,aAAc66C,GACdA,EAAcC,eAES,IAAvBD,EAAcE,KAEpB,CClBO,SAASC,GAAU7/B,GACpB,GAAgB,iBAATA,EACFA,EAAA,IAAI8/B,IAAI9/B,QACN,IAACy/B,GAAMz/B,GAAO,CAEvB,MAAM4I,EAAQ,IAAId,UAChB,+EACE9H,EACA,KAGE,MADN4I,EAAMlY,KAAO,uBACPkY,CACP,CAEG,GAAkB,UAAlB5I,EAAK2/B,SAAsB,CAEvB,MAAA/2B,EAAQ,IAAId,UAAU,kCAEtB,MADNc,EAAMlY,KAAO,yBACPkY,CACP,CAED,OAWF,SAA6B2D,GACvB,GAAiB,KAAjBA,EAAIwzB,SAAiB,CAEvB,MAAMn3B,EAAQ,IAAId,UAChB,wDAGI,MADNc,EAAMlY,KAAO,4BACPkY,CACP,CAED,MAAMo3B,EAAWzzB,EAAIyzB,SACrB,IAAIljD,GAAQ,EAEL,OAAEA,EAAQkjD,EAAS/iD,QAEtB,GAAgC,KAAhC+iD,EAAShO,YAAYl1C,IACe,KAApCkjD,EAAShO,YAAYl1C,EAAQ,GAC7B,CACA,MAAMmjD,EAAQD,EAAShO,YAAYl1C,EAAQ,GACvC,GAAU,KAAVmjD,GAAoC,MAAVA,EAAyB,CAErD,MAAMr3B,EAAQ,IAAId,UAChB,uDAGI,MADNc,EAAMlY,KAAO,4BACPkY,CACP,CACF,CAGH,OAAOs3B,mBAAmBF,EAC5B,CA1CSG,CAAoBngC,EAC7B,CCdA,MAAMN,GAAA,CACJ,UACA,OACA,WACA,OACA,UACA,WAGK,MAAM0gC,GAuBX,WAAArlD,CAAYH,GAEN,IAAAL,EAKQA,EAHPK,EAEM6kD,GAAM7kD,GACL,CAAColB,KAAMplB,GACS,iBAAVA,GA+jBtB,SAAsBA,GACb,OAAA03B,QACL13B,GACmB,iBAAVA,GACP,eAAgBA,GAChB,eAAgBA,EAEtB,CAtkB4CylD,CAAazlD,GACzC,CAACA,SAEDA,EANA,CAAE,EAkBdO,KAAKqkD,IAAM,QAASjlD,EAAU,GAAKglD,GAAQC,MAU3CrkD,KAAKmI,KAAO,CAAE,EASdnI,KAAKmlD,QAAU,GAOfnlD,KAAKolD,SAAW,GAOXplD,KAAAP,MAYAO,KAAAsvC,IAUAtvC,KAAAwmB,OASAxmB,KAAAqlD,OAIL,IAkBIrY,EAlBArrC,GAAQ,EAEL,OAAEA,EAAQ4iB,GAAMziB,QAAQ,CACvBkrC,MAAAA,EAAQzoB,GAAM5iB,GAKlBqrC,KAAS5tC,QACU,IAAnBA,EAAQ4tC,IACW,OAAnB5tC,EAAQ4tC,KAGHA,KAAAA,GAAmB,YAAVA,EAAsB,IAAI5tC,EAAQ4tC,IAAU5tC,EAAQ4tC,GAErE,CAMD,IAAKA,KAAS5tC,EAEPmlB,GAAM9hB,SAASuqC,KAEbhtC,KAAAgtC,GAAS5tC,EAAQ4tC,GAG3B,CAQD,YAAI4V,GACK,MAAqB,iBAAd5iD,KAAK6kB,KACf89B,GAAQC,SAAS5iD,KAAK6kB,WACtB,CACL,CAcD,YAAI+9B,CAASA,GACX0C,GAAe1C,EAAU,YACzB2C,GAAW3C,EAAU,YACrB5iD,KAAK6kB,KAAO89B,GAAQxsB,KAAKn2B,KAAKkjD,SAAW,GAAIN,EAC9C,CAQD,WAAIM,GACK,MAAqB,iBAAdljD,KAAK6kB,KACf89B,GAAQO,QAAQljD,KAAK6kB,WACrB,CACL,CAYD,WAAIq+B,CAAQA,GACCJ,GAAA9iD,KAAK4iD,SAAU,WAC1B5iD,KAAK6kB,KAAO89B,GAAQxsB,KAAK+sB,GAAW,GAAIljD,KAAK4iD,SAC9C,CAQD,WAAIC,GACK,MAAqB,iBAAd7iD,KAAK6kB,KACf89B,GAAQE,QAAQ7iD,KAAK6kB,WACrB,CACL,CAcD,WAAIg+B,CAAQA,GAIV,GAHA0C,GAAW1C,EAAS,WACTC,GAAA9iD,KAAKkjD,QAAS,WAErBL,EAAS,CACX,GAA+B,KAA3BA,EAAQhM,YAAY,GAChB,MAAA,IAAIjpB,MAAM,iCAGlB,GAAIi1B,EAAQpgD,SAAS,IAAK,GAClB,MAAA,IAAImrB,MAAM,yCAEnB,CAEI5tB,KAAA6kB,KAAO89B,GAAQxsB,KAAKn2B,KAAKkjD,QAASljD,KAAKwlD,MAAQ3C,GAAW,IAChE,CAQD,QAAIh+B,GACF,OAAO7kB,KAAKmlD,QAAQnlD,KAAKmlD,QAAQrjD,OAAS,EAC3C,CAcD,QAAI+iB,CAAKA,GACHy/B,GAAMz/B,KACRA,EAAO6/B,GAAU7/B,IAGnBygC,GAAezgC,EAAM,QAEjB7kB,KAAK6kB,OAASA,GACX7kB,KAAAmlD,QAAQ92B,KAAKxJ,EAErB,CAQD,QAAI2gC,GACK,MAAqB,iBAAdxlD,KAAK6kB,KACf89B,GAAQC,SAAS5iD,KAAK6kB,KAAM7kB,KAAK6iD,cACjC,CACL,CAcD,QAAI2C,CAAKA,GACPF,GAAeE,EAAM,QACrBD,GAAWC,EAAM,QACZxlD,KAAA6kB,KAAO89B,GAAQxsB,KAAKn2B,KAAKkjD,SAAW,GAAIsC,GAAQxlD,KAAK6iD,SAAW,IACtE,CA+DD,IAAA4C,CAAKr1B,EAAeC,EAAwB3L,GAE1C,MAAMgM,EAAU1wB,KAAK0wB,QAAQN,EAAeC,EAAwB3L,GAI9D,MAFNgM,EAAQI,OAAQ,EAEVJ,CACP,CA4DD,IAAApuB,CAAK8tB,EAAeC,EAAwB3L,GAE1C,MAAMgM,EAAU1wB,KAAK0wB,QAAQN,EAAeC,EAAwB3L,GAI7D,OAFPgM,EAAQI,WAAQ,EAETJ,CACR,CA4DD,OAAAA,CAAQN,EAAeC,EAAwB3L,GAC7C,MAAMgM,EAAU,IAAIP,GAElBC,EACAC,EACA3L,GAYK,OATH1kB,KAAK6kB,OACP6L,EAAQvxB,KAAOa,KAAK6kB,KAAO,IAAM6L,EAAQvxB,KACzCuxB,EAAQK,KAAO/wB,KAAK6kB,MAGtB6L,EAAQI,OAAQ,EAEX9wB,KAAAolD,SAAS/2B,KAAKqC,GAEZA,CACR,CAeD,QAAA8lB,CAAS9F,GACH,QAAe,IAAf1wC,KAAKP,MACA,MAAA,GAGL,GAAsB,iBAAfO,KAAKP,MACd,OAAOO,KAAKP,MAIP,OADS,IAAIm4C,YAAYlH,QAAY,GAC7BL,OAAOrwC,KAAKP,MAC5B,EAaH,SAAS8lD,GAAWG,EAAMvmD,GACxB,GAAIumD,GAAQA,EAAKjjD,SAASkgD,GAAQsB,KAChC,MAAM,IAAIr2B,MACR,IAAMzuB,EAAO,uCAAyCwjD,GAAQsB,IAAM,IAG1E,CAYA,SAASqB,GAAeI,EAAMvmD,GAC5B,IAAKumD,EACH,MAAM,IAAI93B,MAAM,IAAMzuB,EAAO,oBAEjC,CAYA,SAAS2jD,GAAWj+B,EAAM1lB,GACxB,IAAK0lB,EACH,MAAM,IAAI+I,MAAM,YAAczuB,EAAO,kCAEzC,CCjnBO,MAAMwmD,GAAA,SAYG9lD,GACR,MAEM+lD,EAFO5lD,KACOJ,YAIX,UAEHH,EAAQmmD,EAAM/lD,GAEds9C,EAAQ,WACL,OAAA19C,EAAM09C,MAAMA,EAAOwE,UAC3B,EAgBM,OAdAvhD,OAAAylD,eAAe1I,EAAOyI,GActBzI,CACR,ECiUD9rB,GAAM,CAAE,EAACC,eAeR,MAAMw0B,WAAkBH,GAI7B,WAAA/lD,GAEEgC,MAAM,QAeN5B,KAAK+lD,cAAW,EAYhB/lD,KAAKgmD,YAAS,EAadhmD,KAAKimD,UAAY,GAajBjmD,KAAKw3C,cAAW,EAShBx3C,KAAKkmD,aAAc,EASnBlmD,KAAKmmD,YAAS,EASdnmD,KAAKomD,UAAY,CAAE,EAUnBpmD,KAAKm7B,YAAS,EASdn7B,KAAKqmD,aAAerE,IACrB,CAaD,IAAAR,GAEQ,MAAAnB,EAAA,IAEEyF,GAER,IAAInkD,GAAQ,EAEZ,OAASA,EAAQ3B,KAAKimD,UAAUnkD,QAAQ,CAChC,MAAAwkD,EAAWtmD,KAAKimD,UAAUtkD,GACpB0+C,EAAAzhB,OAAO0nB,EACpB,CAIM,OAFPjG,EAAYl4C,KAAKo5C,IAAO,EAAM,CAAA,EAAIvhD,KAAKomD,YAEhC/F,CACR,CA6DD,IAAAl4C,CAAKlG,EAAKxC,GACJ,MAAe,iBAARwC,EAEgB,IAArB0/C,UAAU7/C,QACGykD,GAAA,OAAQvmD,KAAKmmD,QACvBnmD,KAAAomD,UAAUnkD,GAAOxC,EACfO,MAIDqxB,GAAI0C,KAAK/zB,KAAKomD,UAAWnkD,IAAQjC,KAAKomD,UAAUnkD,SAAS,EAI/DA,GACaskD,GAAA,OAAQvmD,KAAKmmD,QAC5BnmD,KAAKomD,UAAYnkD,EACVjC,MAIFA,KAAKomD,SACb,CAmBD,MAAAI,GACE,GAAIxmD,KAAKmmD,OACA,OAAAnmD,KAMHy7B,MAAAA,EAAAA,KAEN,OAASz7B,KAAKkmD,YAAclmD,KAAKimD,UAAUnkD,QAAQ,CAC3C,MAACwkD,KAAalnD,GAAWY,KAAKimD,UAAUjmD,KAAKkmD,aAE/C,IAAe,IAAf9mD,EAAQ,GACV,UAGiB,IAAfA,EAAQ,KACVA,EAAQ,QAAK,GAGf,MAAMqnD,EAAcH,EAASvyB,KAAK0H,KAASr8B,GAEhB,mBAAhBqnD,GACJzmD,KAAAqmD,aAAaznB,IAAI6nB,EAEzB,CAKM,OAHPzmD,KAAKmmD,QAAS,EACdnmD,KAAKkmD,YAAclwB,OAAO4E,kBAEnB56B,IACR,CAgBD,KAAAgwC,CAAMjf,GACJ/wB,KAAKwmD,SACC,MAAAE,EAAWC,GAAM51B,GACjBoK,EAASn7B,KAAKm7B,QAAUn7B,KAAKgmD,OAEnC,OADAY,GAAa,QAASzrB,GACfA,EAAO1E,OAAOiwB,GAAWA,EACjC,CA4CD,OAAAG,CAAQ91B,EAAMyxB,GACZ,MAAM/mB,EAAOz7B,KAMb,OAJAA,KAAKwmD,SACLI,GAAa,UAAW5mD,KAAKm7B,QAAUn7B,KAAKgmD,QAC5Cc,GAAe,UAAW9mD,KAAKw3C,UAAYx3C,KAAK+lD,UAEzCvD,EAAOuE,OAAS,EAAWvE,GAAQ,IAAIwE,QAAQD,GAQ7C,SAAAA,EAASxoB,EAAS0oB,GACnB,MAAAP,EAAWC,GAAM51B,GAGjBm2B,EAEsBzrB,EAAKuU,MAAM0W,GA+B9B,SAAAS,EAAS15B,EAAOsD,GACnBtD,IAAUsD,EACZk2B,EAAOx5B,GACE8Q,EACTA,EAAQxN,GAGRyxB,OAAK,EAAWzxB,EAEnB,CArCD0K,EAAK8kB,IAAI2G,EAAWR,EAAU,SAAUj5B,EAAOqE,EAAMf,GACnD,GAAItD,IAAUqE,IAASf,EACrB,OAAOo2B,EAAS15B,GAKZ,MAAA25B,EAAA,EAKAC,EAAgB5rB,EAAK0oB,UAAUiD,EAAar2B,GA2iB1D,IAAyBtxB,EACC,iBADDA,EAziBG4nD,IAqjB5B,SAAsB5nD,GACb,OAAA03B,QACL13B,GACmB,iBAAVA,GACP,eAAgBA,GAChB,eAAgBA,EAEtB,CAlBsCylD,CAAazlD,GAziBzCsxB,EAAKtxB,MAAQ4nD,EAEbt2B,EAAKvK,OAAS6gC,EAGhBF,EAAS15B,EAAsDsD,EACvE,EAiBK,CACF,CAiCD,WAAAu2B,CAAYv2B,GAEV,IAEIvK,EAFA+gC,GAAW,EAYR,OARPvnD,KAAKwmD,SACLI,GAAa,cAAe5mD,KAAKm7B,QAAUn7B,KAAKgmD,QAChDc,GAAe,cAAe9mD,KAAKw3C,UAAYx3C,KAAK+lD,UAE/C/lD,KAAA6mD,QAAQ91B,EASJ,SAAStD,EAAOsD,GACZw2B,GAAA,EACX/G,GAAK/yB,GACIsD,EAAAA,CACV,GAZUy2B,GAAA,cAAe,UAAWD,GAG9B/gC,CAUR,CAwCD,GAAA+5B,CAAIzuB,EAAMf,EAAMyxB,GACdiF,GAAW31B,GACX9xB,KAAKwmD,SAEL,MAAMH,EAAermD,KAAKqmD,aAO1B,OALK7D,GAAwB,mBAATzxB,IACXyxB,EAAAzxB,EACAA,OAAA,GAGFyxB,EAAOuE,OAAS,EAAWvE,GAAQ,IAAIwE,QAAQD,GAW7C,SAAAA,EAASxoB,EAAS0oB,GAKnB,MAAAP,EAAWC,GAAM51B,GACVs1B,EAAA9F,IAAIzuB,EAAM40B,EAQd,SAASj5B,EAAOi6B,EAAY32B,GAC7B,MAAA42B,EAEFD,GAAc51B,EAGdrE,EACFw5B,EAAOx5B,GACE8Q,EACTA,EAAQopB,GAGHnF,OAAA,EAAWmF,EAAe52B,EAElC,EACF,CACF,CAmBD,OAAA62B,CAAQ91B,EAAMf,GAEZ,IAEIvK,EAFA+gC,GAAW,EAQR,OAJFvnD,KAAAugD,IAAIzuB,EAAMf,EASN,SAAStD,EAAOqE,GACvB0uB,GAAK/yB,GACIqE,EAAAA,EACEy1B,GAAA,CACZ,GAXUC,GAAA,UAAW,MAAOD,GAEtB/gC,CAUR,CA+BD,SAAA29B,CAAUryB,EAAMf,GACd/wB,KAAKwmD,SACC,MAAAE,EAAWC,GAAM51B,GACjBymB,EAAWx3C,KAAKw3C,UAAYx3C,KAAK+lD,SAIhCvO,OAHPsP,GAAe,YAAatP,GAC5BiQ,GAAW31B,GAEJ0lB,EAAS1lB,EAAM40B,EACvB,CA2DD,GAAA9nB,CAAIn/B,KAAU44B,GACZ,MAAM4tB,EAAYjmD,KAAKimD,UACjBG,EAAYpmD,KAAKomD,UAInB,GAFWG,GAAA,MAAOvmD,KAAKmmD,QAEvB1mD,cAEO,GAAiB,mBAAVA,EAChBooD,EAAUpoD,EAAO44B,OACvB,IAAgC,iBAAV54B,EAOhB,MAAM,IAAIktB,UAAU,+BAAiCltB,EAAQ,KANzD4yB,MAAMC,QAAQ7yB,GAChBqoD,EAAQroD,GAERsoD,EAAUtoD,EAIb,CAEM,OAAAO,KAMP,SAASg5B,EAAIv5B,GACP,GAAiB,mBAAVA,EACCA,EAAAA,EAAO,QACzB,IAAkC,iBAAVA,EAShB,MAAM,IAAIktB,UAAU,+BAAiCltB,EAAQ,KARzD,GAAA4yB,MAAMC,QAAQ7yB,GAAQ,CAClB,MAACuoD,KAAW3vB,GAAU,EAE5BwvB,EAAUG,EAAQ3vB,EAC5B,MACU0vB,EAAUtoD,EAIb,CACF,CAMD,SAASsoD,EAAUvhC,GACjB,KAAM,YAAaA,MAAa,aAAcA,GAC5C,MAAM,IAAIoH,MACR,8KAIJk6B,EAAQthC,EAAOyhC,SAEXzhC,EAAO0P,WACTkwB,EAAUlwB,SAAWqrB,IAAO,EAAM6E,EAAUlwB,SAAU1P,EAAO0P,UAEhE,CAMD,SAAS4xB,EAAQG,GACf,IAAItmD,GAAQ,EAER,GAAAsmD,aAEO,KAAA51B,MAAMC,QAAQ21B,GAMvB,MAAM,IAAIt7B,UAAU,oCAAsCs7B,EAAU,KAL7D,OAAEtmD,EAAQsmD,EAAQnmD,QAAQ,CAE/Bk3B,EADcivB,EAAQtmD,GAEvB,CAGF,CACF,CAOQ,SAAAkmD,EAAUG,EAAQ3vB,GACzB,IAAI12B,GAAQ,EACRumD,GAAa,EAEV,OAAEvmD,EAAQskD,EAAUnkD,QACzB,GAAImkD,EAAUtkD,GAAO,KAAOqmD,EAAQ,CACrBrmD,EAAAA,EACb,KACD,CAGH,IAAuB,IAAnBumD,EACFjC,EAAU53B,KAAK,CAAC25B,KAAW3vB,SAC5B,GAGQA,EAAWv2B,OAAS,EAAG,CAC9B,IAAKqmD,KAAYtyB,GAAQwC,EACzB,MAAM+vB,EAAiBnC,EAAUiC,GAAY,GACzCG,GAAWD,IAAmBC,GAAWF,KACjC5G,EAAAA,IAAO,EAAM6G,EAAgBD,IAGzClC,EAAUiC,GAAc,CAACF,EAAQG,KAAYtyB,EAC9C,CACF,CACF,EA+BI,MAAMyyB,IAAU,IAAIxC,IAAYU,SASvC,SAASI,GAAaznD,EAAMM,GACtB,GAAiB,mBAAVA,EACT,MAAM,IAAIktB,UAAU,WAAaxtB,EAAO,qBAE5C,CASA,SAAS2nD,GAAe3nD,EAAMM,GACxB,GAAiB,mBAAVA,EACT,MAAM,IAAIktB,UAAU,WAAaxtB,EAAO,uBAE5C,CASA,SAASonD,GAAepnD,EAAMgnD,GAC5B,GAAIA,EACF,MAAM,IAAIv4B,MACR,gBACEzuB,EACA,mHAGR,CAQA,SAASsoD,GAAWp6B,GAGlB,IAAKg7B,GAAWh7B,IAA8B,iBAAdA,EAAKnZ,KACnC,MAAM,IAAIyY,UAAU,uBAAyBU,EAAO,IAGxD,CAUA,SAASm6B,GAAWroD,EAAMopD,EAAWhB,GACnC,IAAKA,EACH,MAAM,IAAI35B,MACR,IAAMzuB,EAAO,0BAA4BopD,EAAY,YAG3D,CAMA,SAAS5B,GAAMlnD,GACb,OAOF,SAAyBA,GAChB,OAAA03B,QACL13B,GACmB,iBAAVA,GACP,YAAaA,GACb,aAAcA,EAEpB,CAdS+oD,CAAgB/oD,GAASA,EAAQ,IAAIwlD,GAAMxlD,EACpD,CChpCA,MAIMgpD,GAAe,GAEfC,GAA2B,CAAChP,oBAAoB,GAChDiP,GAAe,gCAIfC,GAAe,CACnB,CAACpnC,KAAM,aAAc1X,GAAI,wCACzB,CAAC0X,KAAM,qBAAsB1X,GAAI,wCACjC,CACE0X,KAAM,YACN1X,GAAI,qDACJ0e,GAAI,gBAEN,CACEhH,KAAM,eACN1X,GAAI,qDACJ0e,GAAI,mBAEN,CAAChH,KAAM,YAAa1X,GAAI,oBACxB,CACE0X,KAAM,kBACN1X,GAAI,qDACJ0e,GAAI,sBAEN,CAAChH,KAAM,aAAc1X,GAAI,wCACzB,CAAC0X,KAAM,sBAAuB1X,GAAI,+BAClC,CACE0X,KAAM,mBACN1X,GAAI,kDAEN,CAAC0X,KAAM,aAAc1X,GAAI,qBACzB,CAAC0X,KAAM,UAAW1X,GAAI,kCAAmC0e,GAAI,iBAC7D,CAAChH,KAAM,eAAgB1X,GAAI,wBAC3B,CAAC0X,KAAM,YAAa1X,GAAI,iCAAkC0e,GAAI,cAC9D,CAAChH,KAAM,SAAU1X,GAAI,4BAA6B0e,GAAI,YACtD,CAAChH,KAAM,YAAa1X,GAAI,qBACxB,CAAC0X,KAAM,oBAAqB1X,GAAI,oBAAqB0e,GAAI,gBACzD,CAAChH,KAAM,mBAAoB1X,GAAI,oBAAqB0e,GAAI,iBAenD,SAASqgC,GAASzpD,GACjB,MAAA0pD,EAsFR,SAAyB1pD,GACjB,MAAA2pD,EAAgB3pD,EAAQ2pD,eAAiBN,GACzCO,EAAgB5pD,EAAQ4pD,eAAiBP,GACzCQ,EAAsB7pD,EAAQ6pD,oBAChC,IAAI7pD,EAAQ6pD,uBAAwBP,IACpCA,GAEEI,EAAYR,KACf1pB,IAAIqZ,IACJrZ,IAAIoqB,GACJpqB,IAAIwhB,GAAc6I,GAClBrqB,IAAImqB,GAEA,OAAAD,CACT,CApGoBI,CAAgB9pD,GAC5B2xB,EA6GR,SAAoB3xB,GACZ,MAAAmzB,EAAWnzB,EAAQmzB,UAAY,GAC/BxB,EAAO,IAAIk0B,GAEO,iBAAb1yB,IACTxB,EAAKtxB,MAAQ8yB,GASR,OAAAxB,CACT,CA5Heo4B,CAAW/pD,GACjB,OAuIT,SAAc0yB,EAAM1yB,GAClB,MAAMgqD,EAAkBhqD,EAAQgqD,gBAC1BC,EAAejqD,EAAQiqD,aACvBr2B,EAAa5zB,EAAQ4zB,WACrBs2B,EAAqBlqD,EAAQkqD,mBAC7BC,EAAWnqD,EAAQmqD,SACnBC,EAAmBpqD,EAAQoqD,iBAC3BC,EAAerqD,EAAQqqD,cAAgBC,GAE7C,IAAA,MAAWC,KAAef,GACpBxoD,OAAOqgD,OAAOrhD,EAASuqD,EAAYnoC,OACrCziB,GAEI4qD,EAAYnoC,KAEXmoC,EAAYnhC,IACCmhC,EAAYnhC,GAK1BmhC,EAAY7/C,KAcpB,OAFAm0C,GAAMnsB,EAAMvvB,GAELsvB,GAAaC,EAAM,CAC5BC,SAAIA,EAAQA,SACRiB,aACAI,oBAAoB,EACxB9zB,IAAIA,EAAGA,IACPszB,KAAIA,EAAIA,KACJS,UAAU,EACVC,UAAU,IAIH,SAAA/wB,EAAU8qB,EAAM1rB,EAAOkvB,GAC9B,GAAkB,QAAdxD,EAAKnZ,MAAkB2c,GAA2B,iBAAVlvB,EAOnCA,OANH4nD,EACK14B,EAAA0B,SAAS2F,OAAOv2B,EAAO,GAEvBkvB,EAAA0B,SAAS5wB,GAAS,CAACuS,KAAM,OAAQzU,MAAO4tB,EAAK5tB,OAG/CkC,EAGL0rB,GAAc,YAAdA,EAAKnZ,KAAoB,CAEvB,IAAAjS,EAEJ,IAAKA,KAAOq1B,GAER,GAAAl3B,OAAOqgD,OAAOnpB,GAAer1B,IAC7B7B,OAAOqgD,OAAOpzB,EAAKlrB,WAAYF,GAC/B,CACM,MAAAxC,EAAQ4tB,EAAKlrB,WAAWF,GACxB1C,EAAO+3B,GAAcr1B,IACd,OAAT1C,GAAiBA,EAAKkD,SAAS4qB,EAAKuG,YACtCvG,EAAKlrB,WAAWF,GAAOwnD,EAAahzB,OAAOh3B,GAAS,IAAKwC,EAAKorB,GAEjE,CAEJ,CAEGA,GAAc,YAAdA,EAAKnZ,KAAoB,CAC3B,IAAIikB,EAASixB,GACRA,EAAgB3mD,SAAS4qB,EAAKuG,WAC/B01B,GACEA,EAAmB7mD,SAAS4qB,EAAKuG,SAOvC,IAJKuE,GAAUkxB,GAAiC,iBAAV1nD,IACpCw2B,GAAUkxB,EAAah8B,EAAM1rB,EAAOkvB,IAGlCsH,GAAUtH,GAA2B,iBAAVlvB,EAOtBA,OANH6nD,GAAoBn8B,EAAKkF,SAC3B1B,EAAO0B,SAAS2F,OAAOv2B,EAAO,KAAM0rB,EAAKkF,UAElC1B,EAAA0B,SAAS2F,OAAOv2B,EAAO,GAGzBA,CAEV,CACF,CACH,CAxOSioD,CAAKd,EAAUlB,QAAQkB,EAAU9Y,MAAMjf,GAAOA,GAAO3xB,EAC9D,CAkPO,SAASsqD,GAAoBjqD,GAI5B,MAAAoqD,EAAQpqD,EAAMmxB,QAAQ,KACtBk5B,EAAerqD,EAAMmxB,QAAQ,KAC7Bm5B,EAAatqD,EAAMmxB,QAAQ,KAC3B2W,EAAQ9nC,EAAMmxB,QAAQ,KAE5B,OAEY,IAAVi5B,IAEiB,IAAhBtiB,GAAgBsiB,EAAQtiB,QACxBuiB,GAAuBD,EAAQC,IAChB,IAAfC,GAAqBF,EAAQE,GAE9BpB,GAAappD,KAAKE,EAAMoG,MAAM,EAAGgkD,IAE1BpqD,EAGF,EACT","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132]}