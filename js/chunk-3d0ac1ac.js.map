{"version":3,"file":"chunk-3d0ac1ac.js","sources":["../../src/contexts/AuthContext.tsx","../../src/hooks/useSiteSettings.tsx","../../src/hooks/useScrollSpy.ts","../../src/hooks/useSidebarSkills.ts","../../src/hooks/useBooks.ts","../../src/hooks/useCategories.ts","../../src/hooks/useLearningManager.ts","../../src/hooks/useSkills.ts","../../src/hooks/useVideoLearnings.ts","../../src/hooks/useVideoPlaylists.ts","../../src/hooks/useToast.ts","../../src/hooks/useProjects.ts","../../src/hooks/useProjectDetail.ts","../../src/hooks/useExperiences.ts","../../src/hooks/useAbortController.ts","../../src/hooks/useOptimisticUpdate.ts","../../src/hooks/useBookManagerData.ts","../../src/hooks/useCRUDManager.ts","../../src/hooks/useExperienceManagerData.ts","../../src/hooks/useProjectForm.ts","../../src/hooks/useProjectManagerData.ts","../../src/hooks/useMessageManagerData.ts","../../src/hooks/useMessageDetail.ts","../../src/hooks/useSkillMutations.ts","../../src/hooks/useSkillsManagerData.ts","../../src/admin/settings/hooks/useSettingsForm.ts","../../src/hooks/useDataCounts.ts","../../src/hooks/useAdminSidebarState.ts"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback, useMemo } from 'react';\nimport { authAPI } from '../services/api';\n\ninterface User {\n  username: string;\n  isAdmin: boolean;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => void;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  // token 상태 제거: HttpOnly 쿠키 사용 가정\n  const [isLoading, setIsLoading] = useState(false); // 초기 로딩 상태를 false로 설정\n\n  // useEffect에서 사용자 정보를 로드 (토큰이 쿠키에 있을 경우)\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        // verify API가 HttpOnly 쿠키를 사용하여 인증하고 사용자 정보를 반환한다고 가정\n        const response = await authAPI.verify();\n        setUser(response.data.user);\n      } catch (error) {\n        // 토큰이 없거나 유효하지 않으면 user를 null로 설정\n        setUser(null);\n      }\n    };\n    \n    // 앱 로드 시 verify API를 호출하여 기존 세션 확인\n    loadUser();\n  }, []); // 앱 로드 시 한 번만 실행\n\n  const login = useCallback(async (username: string, password: string) => {\n    try {\n      setIsLoading(true);\n      // 로그인 API 호출: 서버는 성공 시 HttpOnly 쿠키에 토큰을 설정하고 사용자 정보를 반환\n      const response = await authAPI.login(username, password);\n      setUser(response.data.user);\n      setIsLoading(false);\n    } catch (error: any) {\n      setIsLoading(false);\n      // setUser(null); // 로그인 실패 시 user 초기화\n      throw new Error(error.response?.data?.message || '로그인에 실패했습니다.');\n    }\n  }, []);\n\n  const logout = useCallback(async () => {\n    // 로그아웃 API 호출: 서버는 쿠키를 제거\n    try {\n      await authAPI.logout(); \n    } catch (error) {\n      // 서버 측 로그아웃 실패 시에도 클라이언트 상태는 초기화\n      console.error('서버 로그아웃 오류:', error);\n    }\n    setUser(null);\n  }, []);\n\n  // Context value를 useMemo로 메모이제이션하여 불필요한 리렌더링 방지\n  const value = useMemo(() => ({\n    user,\n    login,\n    logout,\n    // isAuthenticated는 user 객체의 유무로 판단\n    isAuthenticated: !!user,\n    isLoading,\n  }), [user, login, logout, isLoading]);\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n\n","import React, { createContext, useState, useEffect, useCallback, useMemo, ReactNode, useContext } from 'react'\nimport { settingsAPI } from '../services/api'\nimport { SettingsFormData } from '../types'\n\n// =================================================================\n// 초기 설정값 정의 (기본값 제공) - 상수로 한 번만 생성\n// =================================================================\n\nconst INITIAL_SETTINGS: Partial<SettingsFormData> = {\n  // GeneralInfo 기본값\n  fullName: '',\n  firstName: '',\n  role: '',\n  subtitle: '',\n  location: '',\n  education: '',\n  yearsOfExperience: '',\n  \n  // ContactInfo 기본값\n  email: '',\n  phone: '',\n  githubUrl: '',\n  linkedinUrl: '',\n  \n  // ContentText 기본값\n  heroTitle: '',\n  heroSubtitle: '',\n  heroTag: '',\n  heroCtaLink1: '',\n  heroCtaLink2: '',\n  aboutTitle: '',\n  aboutSubtitle: '',\n  aboutDescription1: '',\n  aboutDescription2: '',\n  skillsTitle: '',\n  skillsSubtitle: '',\n  projectsTitle: '',\n  projectsSubtitle: '',\n  // 🌟 프로젝트 업데이트 카드 기본값 (빈 값으로 설정 - 관리자가 직접 입력)\n  projectsUpdateTitle: '',\n  projectsUpdateDescription: '',\n  projectsUpdateTechList: [],\n  booksTitle: '',\n  booksSubtitle: '',\n  contactTitle: '',\n  contactSubtitle: '',\n  experienceTitle: '',\n  experienceSubtitle: '',\n  \n  // 🌟 학습 목표 기본값\n  learningGoalsTitle: '앞으로의 학습 목표',\n  learningGoalsDescription: '4차 산업혁명 시대에 발맞춰 **지능형 공장(Smart Factory) 구현**을 위해 다음 기술들을 집중적으로 탐구하여 전문성을 확대해 나가겠습니다.',\n  learningGoalsList: ['첨단 로봇 제어', '딥러닝 기반 비전 시스템', '엣지 컴퓨팅', '클라우드 연동', 'MES/ERP 연동 기술'],\n  \n  // Stats 기본값\n  stat1Number: '',\n  stat1Label: '',\n  stat2Number: '',\n  stat2Label: '',\n  stat3Number: '',\n  stat3Label: '',\n  \n  // MainSkills 기본값\n  mainSkills: [],\n}\n\n// =================================================================\n// Context 타입 정의 및 생성\n// =================================================================\n\ninterface SiteSettingsContextType {\n  settings: SettingsFormData;\n  loading: boolean;\n  error: string | null;\n  refetchSettings: () => Promise<void>; // 관리자 페이지를 위한 수동 새로고침 함수\n}\n\nconst SiteSettingsContext = createContext<SiteSettingsContextType | undefined>(undefined);\n\n// =================================================================\n// Provider 컴포넌트\n// =================================================================\n\ninterface SiteSettingsProviderProps {\n  children: ReactNode;\n}\n\nexport const SiteSettingsProvider: React.FC<SiteSettingsProviderProps> = ({ children }) => {\n  const [settings, setSettings] = useState<SettingsFormData>(INITIAL_SETTINGS as SettingsFormData);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // 설정 데이터를 가져오는 함수\n  const fetchSettings = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await settingsAPI.get();\n      \n      const mergedSettings = {\n        ...INITIAL_SETTINGS,\n        ...response.data\n      };\n      \n      setSettings(mergedSettings);\n    } catch (err) {\n      console.error('Failed to fetch settings:', err);\n      setError('설정을 불러오는데 실패했습니다.');\n      setSettings(INITIAL_SETTINGS as SettingsFormData);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Provider가 마운트될 때 *단 한 번만* 데이터를 가져옵니다. (캐싱)\n  useEffect(() => {\n    fetchSettings();\n  }, [fetchSettings]);\n\n  const refetchSettings = useCallback(async () => {\n      await fetchSettings();\n  }, [fetchSettings]);\n\n  // Context value를 useMemo로 메모이제이션하여 불필요한 리렌더링 방지\n  const value = useMemo(() => ({\n    settings,\n    loading,\n    error,\n    refetchSettings\n  }), [settings, loading, error, refetchSettings]);\n\n  return (\n    <SiteSettingsContext.Provider value={value}>\n      {children}\n    </SiteSettingsContext.Provider>\n  );\n};\n\n// =================================================================\n// Custom Hook: 이제 Context를 소비합니다.\n// =================================================================\n\nexport const useSiteSettings = () => {\n  const context = useContext(SiteSettingsContext);\n  if (context === undefined) {\n    throw new Error('useSiteSettings must be used within a SiteSettingsProvider');\n  }\n  return context;\n};\n","import { useEffect, useState, useCallback, useRef } from 'react'\n\n// 섹션 ID 목록 정의\nexport const SECTION_IDS = [\n  'hero',\n  'about', \n  'experience',\n  'skills',\n  'projects',\n  'contact',\n  'books', // Books 페이지 추가\n  'projects-page', // Projects 페이지 추가\n  'experience-page', // Experience 페이지 추가\n  'about-page', // About 페이지 추가\n  'contact-page', // Contact 페이지 추가\n  'skills-page' // Skills 페이지 추가\n] as const\n\nexport type SectionId = typeof SECTION_IDS[number]\n\n// 스크롤 스파이 훅 옵션 인터페이스\ninterface UseScrollSpyOptions {\n  /** 활성화 기준점 오프셋 (픽셀) - 기본값: 80px */\n  offset?: number\n  /** 디바운스 지연 시간 (밀리초) - 기본값: 100ms */\n  debounceDelay?: number\n}\n\n// 기본 옵션\nconst DEFAULT_OPTIONS: Required<UseScrollSpyOptions> = {\n  offset: 80,\n  debounceDelay: 100\n}\n\n// 디바운스 유틸리티 함수\nconst debounce = <T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): ((...args: Parameters<T>) => void) => {\n  let timeoutId: number | null = null\n  \n  return (...args: Parameters<T>) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId)\n    }\n    \n    timeoutId = setTimeout(() => {\n      func(...args)\n    }, delay)\n  }\n}\n\n// 스크롤 스파이 훅\nexport const useScrollSpy = (options: UseScrollSpyOptions = {}) => {\n  const { offset, debounceDelay } = { ...DEFAULT_OPTIONS, ...options }\n  const [activeSection, setActiveSection] = useState<SectionId>('hero')\n  const timeoutRef = useRef<number | null>(null)\n\n  const handleScroll = useCallback(() => {\n    // 현재 스크롤 위치 + 오프셋을 활성화 기준점으로 설정\n    const activationPoint = window.scrollY + offset\n    let newActiveSection: SectionId = 'hero' // 기본값\n\n    // 섹션들을 순회하며 activationPoint를 지난 가장 마지막 섹션을 찾기\n    for (const sectionId of SECTION_IDS) {\n      const element = document.getElementById(sectionId)\n      if (!element) continue\n\n      // 요소의 문서 상단으로부터의 위치 (오프셋 반영)\n      const elementTop = element.offsetTop - offset\n      \n      // 현재 스크롤 위치가 섹션 상단보다 크거나 같다면, 해당 섹션을 활성화\n      if (activationPoint >= elementTop) {\n        newActiveSection = sectionId\n      }\n    }\n    \n    setActiveSection(newActiveSection)\n  }, [offset])\n\n  // 디바운스된 스크롤 핸들러\n  const debouncedHandleScroll = useCallback(\n    debounce(handleScroll, debounceDelay),\n    [handleScroll, debounceDelay]\n  )\n\n  useEffect(() => {\n    // 스크롤 이벤트 리스너 등록\n    window.addEventListener('scroll', debouncedHandleScroll, { passive: true })\n    \n    // 초기 실행 (디바운스 없이 즉시 실행)\n    handleScroll()\n\n    // 클린업\n    return () => {\n      window.removeEventListener('scroll', debouncedHandleScroll)\n      // 디바운스 타이머 정리\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current)\n      }\n    }\n  }, [handleScroll, debouncedHandleScroll])\n\n  return activeSection\n}\n\n// 부드러운 스크롤 함수 (오프셋 지원)\nexport const scrollToSection = (sectionId: SectionId, offset: number = 80) => {\n  const element = document.getElementById(sectionId)\n  if (element) {\n    const elementTop = element.offsetTop - offset\n    \n    window.scrollTo({\n      top: elementTop,\n      behavior: 'smooth'\n    })\n  }\n}\n","import { useState, useEffect, useCallback, useMemo } from 'react'\nimport { skillsAPI } from '../services/api'\nimport { Skill } from '../types'\nimport { useSiteSettings } from './useSiteSettings'\n\n/**\n * 사이드바에 표시할 스킬 데이터를 관리하는 커스텀 훅\n * \n * @returns {Object} 스킬 데이터 및 로딩 상태\n * @property {Skill[]} coreSkills - 사이드바에 표시할 핵심 기술\n * @property {Skill[]} languageSkills - 언어 카드에 표시할 언어 스킬\n * @property {boolean} isLoadingSkills - 스킬 데이터 로딩 상태\n */\nexport const useSidebarSkills = () => {\n  const [coreSkills, setCoreSkills] = useState<Skill[]>([])\n  const [languageSkills, setLanguageSkills] = useState<Skill[]>([])\n  const [isLoadingSkills, setIsLoadingSkills] = useState(false)\n  const { settings: siteSettings } = useSiteSettings()\n\n  // 스킬 데이터를 가져오는 함수 (useCallback으로 메모이제이션)\n  const fetchSkills = useCallback(async () => {\n    setIsLoadingSkills(true)\n    try {\n      const response = await skillsAPI.getAll()\n      const allSkills = response.data || []\n      \n      // 사이드바 핵심 기술 필터링 (showInSidebar: true)\n      let sidebarSkills = allSkills\n        .filter((skill: Skill) => skill.showInSidebar)\n        .sort((a: Skill, b: Skill) => a.order - b.order)\n        .slice(0, siteSettings?.sidebarSkillCount || 4)\n      \n      // 선택된 스킬이 없으면 레벨 높은 순으로 fallback\n      if (sidebarSkills.length === 0) {\n        sidebarSkills = allSkills\n          .sort((a: Skill, b: Skill) => b.level - a.level)\n          .slice(0, siteSettings?.sidebarSkillCount || 4)\n      }\n      setCoreSkills(sidebarSkills)\n      \n      // 언어 카드 스킬 필터링 (showInLanguageCard: true)\n      // 레벨 높은 순으로 정렬 (왼쪽에 잘하는 언어)\n      let langSkills = allSkills\n        .filter((skill: Skill) => skill.showInLanguageCard)\n        .sort((a: Skill, b: Skill) => b.level - a.level)\n        .slice(0, siteSettings?.languageCardSkillCount || 3)\n      \n      // 선택된 언어 스킬이 없으면 빈 배열 유지 (언어 카드는 숨김)\n      setLanguageSkills(langSkills)\n    } catch (error) {\n      console.error('스킬 데이터 로드 실패:', error)\n      // 에러 시 빈 배열로 설정하여 \"스킬 데이터가 없습니다\" 메시지 표시\n      setCoreSkills([])\n      setLanguageSkills([])\n    } finally {\n      setIsLoadingSkills(false)\n    }\n  }, [siteSettings?.sidebarSkillCount, siteSettings?.languageCardSkillCount])\n\n  useEffect(() => {\n    fetchSkills()\n  }, [fetchSkills])\n\n  // 반환 객체를 useMemo로 메모이제이션하여 불필요한 리렌더링 방지\n  return useMemo(() => ({\n    coreSkills,\n    languageSkills,\n    isLoadingSkills\n  }), [coreSkills, languageSkills, isLoadingSkills])\n}\n\n","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport { booksAPI } from '../services/api'\nimport { Book, BookFormData, BookUpdateData } from '../types'\n\n// 💡 서적 관련 쿼리 키 상수 - 모든 서적 데이터 캐시의 기준점\nexport const BOOK_QUERY_KEY = 'books'\n\n// =================================================================\n// 📚 서적 목록 조회 (React Query)\n// =================================================================\n\nexport const useBooks = () => {\n  return useQuery<Book[], Error>({\n    queryKey: [BOOK_QUERY_KEY, 'list'],\n    queryFn: async () => {\n      const response = await booksAPI.getAll()\n      return response.data.data || response.data || []\n    },\n    staleTime: 5 * 60 * 1000, // 5분 동안 캐시 유지\n    gcTime: 10 * 60 * 1000, // 10분 후 가비지 컬렉션\n  })\n}\n\n// =================================================================\n// 📖 개별 서적 상세 조회 (React Query)\n// =================================================================\n\nexport const useBook = (bookId: string | undefined) => {\n  return useQuery<Book, Error>({\n    queryKey: [BOOK_QUERY_KEY, 'detail', bookId],\n    queryFn: async () => {\n      if (!bookId) throw new Error('Book ID is required')\n      const response = await booksAPI.getById(bookId)\n      return response.data\n    },\n    enabled: !!bookId, // bookId가 있을 때만 실행\n    staleTime: 5 * 60 * 1000,\n    gcTime: 10 * 60 * 1000,\n  })\n}\n\n// =================================================================\n// ✏️ 서적 생성 (React Query Mutation)\n// =================================================================\n\nexport const useCreateBook = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation<Book, Error, BookFormData>({\n    mutationFn: async (bookData: BookFormData) => {\n      const response = await booksAPI.create(bookData)\n      return response.data\n    },\n    onSuccess: () => {\n      // 💡 서적 목록 캐시 무효화 → 자동으로 다시 fetch\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\n      // 💡 데이터 카운트도 무효화하여 서적 개수 업데이트\n      queryClient.invalidateQueries({ queryKey: ['dataCounts'] })\n    },\n  })\n}\n\n// =================================================================\n// 🔄 서적 수정 (React Query Mutation)\n// =================================================================\n\nexport const useUpdateBook = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation<Book, Error, { id: string; data: BookUpdateData }>({\n    mutationFn: async ({ id, data }) => {\n      const response = await booksAPI.update(id, data)\n      return response.data\n    },\n    onSuccess: (_, variables) => {\n      // 💡 서적 목록 캐시 무효화\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\n      // 💡 해당 서적 상세 캐시도 무효화\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', variables.id] })\n    },\n  })\n}\n\n// =================================================================\n// 🗑️ 서적 삭제 (React Query Mutation)\n// =================================================================\n\nexport const useDeleteBook = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation<void, Error, string>({\n    mutationFn: async (id: string) => {\n      await booksAPI.delete(id)\n    },\n    onSuccess: () => {\n      // 💡 서적 목록 캐시 무효화\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\n      // 💡 데이터 카운트도 무효화하여 서적 개수 업데이트\n      queryClient.invalidateQueries({ queryKey: ['dataCounts'] })\n    },\n  })\n}\n\n// =================================================================\n// 🔄 기존 훅 호환성 유지 (기존 컴포넌트가 바로 사용할 수 있도록)\n// =================================================================\n\nexport const useBookManagerData = () => {\n  const { data: books = [], isLoading, isError, error, refetch } = useBooks()\n  const createMutation = useCreateBook()\n  const updateMutation = useUpdateBook()\n  const deleteMutation = useDeleteBook()\n\n  const createBook = async (bookData: BookFormData) => {\n    try {\n      const result = await createMutation.mutateAsync(bookData)\n      return { success: true, data: result }\n    } catch (error) {\n      console.error('서적 추가 실패:', error)\n      return { success: false, error }\n    }\n  }\n\n  const updateBook = async (id: string, bookData: BookUpdateData) => {\n    try {\n      const result = await updateMutation.mutateAsync({ id, data: bookData })\n      return { success: true, data: result }\n    } catch (error) {\n      console.error('서적 수정 실패:', error)\n      return { success: false, error }\n    }\n  }\n\n  const deleteBook = async (id: string) => {\n    try {\n      await deleteMutation.mutateAsync(id)\n      return { success: true }\n    } catch (error) {\n      console.error('서적 삭제 실패:', error)\n      return { success: false, error }\n    }\n  }\n\n  return {\n    books,\n    isLoading,\n    error: isError ? (error?.message || '서적을 불러오는데 실패했습니다.') : null,\n    isOptimistic: false, // React Query는 자체적으로 낙관적 업데이트 지원\n    createBook,\n    updateBook,\n    deleteBook,\n    refetch,\n  }\n}\n\nexport default useBooks\n","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport { categoriesAPI } from '../services/api'\nimport { Category, CategoryFormData, CategoryUsage } from '../types'\n\n// 쿼리 키\nconst CATEGORIES_QUERY_KEY = ['categories']\n\n// 🔍 모든 카테고리 조회\nexport const useCategories = () => {\n  return useQuery({\n    queryKey: CATEGORIES_QUERY_KEY,\n    queryFn: async () => {\n      const response = await categoriesAPI.getAll()\n      return response.data\n    }\n  })\n}\n\n// 🔍 특정 카테고리 조회\nexport const useCategory = (id: string | undefined) => {\n  return useQuery({\n    queryKey: [...CATEGORIES_QUERY_KEY, id],\n    queryFn: async () => {\n      if (!id) throw new Error('ID가 필요합니다')\n      const response = await categoriesAPI.getById(id)\n      return response.data\n    },\n    enabled: !!id\n  })\n}\n\n// 📊 카테고리 사용 통계 조회\nexport const useCategoryUsage = (id: string | undefined) => {\n  return useQuery({\n    queryKey: [...CATEGORIES_QUERY_KEY, id, 'usage'],\n    queryFn: async () => {\n      if (!id) throw new Error('ID가 필요합니다')\n      const response = await categoriesAPI.getUsage(id)\n      return response.data\n    },\n    enabled: !!id\n  })\n}\n\n// ✏️ 카테고리 생성\nexport const useCreateCategory = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: async (data: CategoryFormData) => {\n      const response = await categoriesAPI.create(data)\n      return response.data\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: CATEGORIES_QUERY_KEY })\n    }\n  })\n}\n\n// 🔄 카테고리 수정\nexport const useUpdateCategory = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: CategoryFormData }) => {\n      const response = await categoriesAPI.update(id, data)\n      return response.data\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: CATEGORIES_QUERY_KEY })\n    }\n  })\n}\n\n// 🗑️ 카테고리 삭제\nexport const useDeleteCategory = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await categoriesAPI.delete(id)\n      return response.data\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: CATEGORIES_QUERY_KEY })\n    }\n  })\n}\n\n// 🔧 카테고리 관리를 위한 통합 훅\nexport const useCategoryManagerData = () => {\n  const { data: categories = [], isLoading } = useCategories()\n  const createMutation = useCreateCategory()\n  const updateMutation = useUpdateCategory()\n  const deleteMutation = useDeleteCategory()\n\n  return {\n    categories,\n    isLoading,\n    createCategory: async (data: CategoryFormData) => {\n      try {\n        await createMutation.mutateAsync(data)\n        return { success: true }\n      } catch (error: any) {\n        console.error('카테고리 생성 실패:', error)\n        return { success: false, error }\n      }\n    },\n    updateCategory: async (id: string, data: CategoryFormData) => {\n      try {\n        await updateMutation.mutateAsync({ id, data })\n        return { success: true }\n      } catch (error: any) {\n        console.error('카테고리 수정 실패:', error)\n        return { success: false, error }\n      }\n    },\n    deleteCategory: async (id: string) => {\n      try {\n        await deleteMutation.mutateAsync(id)\n        return { success: true }\n      } catch (error: any) {\n        console.error('카테고리 삭제 실패:', error)\n        return { success: false, error }\n      }\n    }\n  }\n}\n","import { useState } from 'react'\nimport { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { learningsAPI } from '../services/api'\nimport { Learning, LearningFormData, Book, Chapter } from '../types'\nimport { BOOK_QUERY_KEY } from './useBooks'\n\n/**\n * 🌟 React Query 기반 학습 내용(Learning) 관리 훅\n * \n * 주요 개선사항:\n * 1. React Query Mutation 사용으로 캐시 자동 관리\n * 2. 서적 상세 정보 캐시 무효화로 실시간 업데이트\n * 3. 데이터 카운트 자동 동기화\n * 4. 스킬 연결/해제 낙관적 업데이트\n */\n\n// =================================================================\n// ✏️ 학습 내용 생성 (React Query Mutation)\n// =================================================================\n\nexport const useCreateLearning = (bookId: string) => {\n  const queryClient = useQueryClient()\n\n  return useMutation<Learning, Error, LearningFormData>({\n    mutationFn: async (data: LearningFormData) => {\n      const response = await learningsAPI.createForBook(bookId, data)\n      return response.data\n    },\n    onSuccess: () => {\n      // 💡 해당 서적 상세 캐시 무효화 → BookDetail 자동 업데이트\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', bookId] })\n      // 💡 서적 목록도 무효화 (learnings 배열이 포함될 수 있음)\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\n      // 💡 목차(chapters) 캐시도 무효화\n      queryClient.invalidateQueries({ queryKey: ['chapters', bookId] })\n    },\n  })\n}\n\n// =================================================================\n// 🔄 학습 내용 수정 (React Query Mutation)\n// =================================================================\n\nexport const useUpdateLearning = (bookId: string) => {\n  const queryClient = useQueryClient()\n\n  return useMutation<Learning, Error, { learningId: string; data: LearningFormData }>({\n    mutationFn: async ({ learningId, data }) => {\n      const response = await learningsAPI.updateForBook(bookId, learningId, data)\n      return response.data\n    },\n    onSuccess: () => {\n      // 💡 해당 서적 상세 캐시 무효화\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', bookId] })\n      // 💡 서적 목록도 무효화\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\n      // 💡 목차(chapters) 캐시도 무효화\n      queryClient.invalidateQueries({ queryKey: ['chapters', bookId] })\n    },\n  })\n}\n\n// =================================================================\n// 🗑️ 학습 내용 삭제 (React Query Mutation)\n// =================================================================\n\nexport const useDeleteLearning = (bookId: string) => {\n  const queryClient = useQueryClient()\n\n  return useMutation<void, Error, string>({\n    mutationFn: async (learningId: string) => {\n      await learningsAPI.deleteForBook(bookId, learningId)\n    },\n    onSuccess: () => {\n      // 💡 해당 서적 상세 캐시 무효화\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', bookId] })\n      // 💡 서적 목록도 무효화\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\n      // 💡 목차(chapters) 캐시도 무효화\n      queryClient.invalidateQueries({ queryKey: ['chapters', bookId] })\n    },\n  })\n}\n\n// =================================================================\n// 🔗 학습 내용 스킬 업데이트 (React Query Mutation)\n// =================================================================\n\nexport const useUpdateLearningSkills = (bookId: string) => {\n  const queryClient = useQueryClient()\n\n  return useMutation<Learning, Error, { learningId: string; skillIds: string[] }>({\n    mutationFn: async ({ learningId, skillIds }) => {\n      // 💡 learningsAPI.updateSkills 함수 사용\n      const response = await learningsAPI.updateSkills(bookId, learningId, skillIds)\n      return response.data\n    },\n    onSuccess: () => {\n      // 스킬 업데이트 성공 시, Book Detail 캐시를 무효화하여 모든 UI를 새로고침\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', bookId] })\n      // 서적 목록도 무효화\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\n      // 목차(chapters) 캐시도 무효화\n      queryClient.invalidateQueries({ queryKey: ['chapters', bookId] })\n    },\n  })\n}\n\n// =================================================================\n// 🔄 기존 훅 호환성 유지 (useLearningManager)\n// =================================================================\n\n/**\n * 학습 내용(Learning)의 추가, 수정, 삭제 및 폼 상태 관리를 담당하는 커스텀 훅\n * @param bookId 현재 서적 ID\n */\nexport const useLearningManager = (bookId: string) => {\n  const queryClient = useQueryClient()\n  \n  // 폼 및 액션 관련 상태\n  const [editingLearningId, setEditingLearningId] = useState<string | null>(null)\n  const [editingChapterId, setEditingChapterId] = useState<string | null>(null)\n  const [currentFormData, setCurrentFormData] = useState<LearningFormData>({ topic: '', content: '' })\n  const [showAddForm, setShowAddForm] = useState(false)\n  const [apiError, setApiError] = useState<string | null>(null)\n\n  // React Query Mutations\n  const createMutation = useCreateLearning(bookId)\n  const updateMutation = useUpdateLearning(bookId)\n  const deleteMutation = useDeleteLearning(bookId)\n  const updateSkillsMutation = useUpdateLearningSkills(bookId)  // 🌟 스킬 업데이트 Mutation 추가\n\n  const isSaving = createMutation.isPending || updateMutation.isPending || deleteMutation.isPending || updateSkillsMutation.isPending\n\n  // 폼 닫기/초기화 공통 로직\n  const resetFormState = () => {\n    setEditingLearningId(null)\n    setEditingChapterId(null)\n    setCurrentFormData({ topic: '', content: '' })\n    setShowAddForm(false)\n  }\n\n  // 학습 내용 추가 폼 표시/숨김 토글\n  const handleToggleAddForm = () => {\n    if (editingLearningId) {\n      handleCancelEdit()\n    }\n    if (showAddForm) {\n      setCurrentFormData({ topic: '', content: '' })\n    }\n    setShowAddForm(prev => !prev)\n    setApiError(null)\n  }\n\n  // 🌟 학습 내용 추가 (React Query Mutation 사용)\n  const handleAddLearning = async () => {\n    if (!currentFormData.topic || !currentFormData.content) return\n\n    try {\n      setApiError(null)\n      await createMutation.mutateAsync(currentFormData)\n      resetFormState()\n    } catch (error) {\n      console.error('Failed to add learning:', error)\n      setApiError('학습 내용 추가에 실패했습니다.')\n    }\n  }\n\n  // 🌟 학습 내용 삭제 (목차 기반/직접 학습 내용 구분)\n  const handleDeleteLearning = async (learningId: string, chapterId?: string) => {\n    if (!confirm('이 학습 내용을 삭제하시겠습니까?')) return\n\n    try {\n      setApiError(null)\n      \n      // 목차 기반 학습 내용인 경우\n      if (chapterId) {\n        await learningsAPI.deleteForChapter(bookId, chapterId, learningId)\n        console.log('✅ 목차 학습 내용 삭제 성공')\n      } else {\n        // 직접 학습 내용인 경우\n        await deleteMutation.mutateAsync(learningId)\n      }\n      \n      // 캐시 무효화\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', bookId] })\n      queryClient.invalidateQueries({ queryKey: ['chapters', bookId] })\n    } catch (error) {\n      console.error('Failed to delete learning:', error)\n      setApiError('학습 내용 삭제에 실패했습니다.')\n    }\n  }\n\n  // 학습 내용 수정 시작\n  const handleStartEdit = (learning: Learning, chapterId?: string) => {\n    setShowAddForm(false)\n    setEditingLearningId(learning._id)\n    setEditingChapterId(chapterId || null)\n    setCurrentFormData({ topic: learning.topic, content: learning.content })\n    setApiError(null)\n  }\n\n  // 🌟 학습 내용 수정 저장 (목차 기반/직접 학습 내용 구분)\n  const handleSaveEdit = async () => {\n    if (!editingLearningId || !currentFormData.topic || !currentFormData.content) return\n\n    try {\n      setApiError(null)\n      \n      // 목차 기반 학습 내용인 경우\n      if (editingChapterId) {\n        const response = await learningsAPI.updateForChapter(\n          bookId, \n          editingChapterId, \n          editingLearningId, \n          currentFormData\n        )\n        console.log('✅ 목차 학습 내용 수정 성공:', response.data)\n      } else {\n        // 직접 학습 내용인 경우\n        await updateMutation.mutateAsync({\n          learningId: editingLearningId,\n          data: currentFormData\n        })\n      }\n      \n      // 캐시 무효화\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', bookId] })\n      queryClient.invalidateQueries({ queryKey: ['chapters', bookId] })\n      \n      resetFormState()\n    } catch (error) {\n      console.error('Failed to update learning:', error)\n      setApiError('학습 내용 수정에 실패했습니다.')\n    }\n  }\n\n  // 학습 내용 수정 취소\n  const handleCancelEdit = () => {\n    resetFormState()\n    setApiError(null)\n  }\n\n  // =================================================================\n  // 🌟 스킬 연결/해제 핸들러 (낙관적 업데이트 포함)\n  // =================================================================\n\n  /**\n   * 특정 학습 내용에 스킬을 연결하거나 해제합니다.\n   * 낙관적 업데이트를 사용하여 UI 반응 속도를 높입니다.\n   */\n  const handleSkillLinkChange = async (learningId: string, skillId: string, isLinked: boolean) => {\n    const queryKey = [BOOK_QUERY_KEY, 'detail', bookId]\n    const chaptersQueryKey = ['chapters', bookId]\n    \n    // 1. Optimistic Update를 위한 현재 캐시 가져오기\n    const previousBook = queryClient.getQueryData<Book>(queryKey)\n    const previousChapters = queryClient.getQueryData<Chapter[]>(chaptersQueryKey)\n\n    try {\n      setApiError(null)\n\n      // 2. 새로운 skillIds 배열 계산\n      let newSkillIds: string[] = []\n      \n      // 현재 학습 내용을 찾기\n      const currentLearning = (previousChapters || []).flatMap(c => c.learnings || []).find(l => l._id === learningId)\n                              || (previousBook?.learnings || []).find(l => l._id === learningId)\n\n      if (currentLearning) {\n        const currentSkillIds = currentLearning.skillIds || []\n        if (isLinked) {\n          // 연결: skillId 추가 (중복 방지)\n          newSkillIds = Array.from(new Set([...currentSkillIds, skillId]))\n        } else {\n          // 해제: skillId 제거\n          newSkillIds = currentSkillIds.filter((id: string) => id !== skillId)\n        }\n      } else {\n        // Learning을 찾을 수 없는 경우\n        newSkillIds = isLinked ? [skillId] : []\n      }\n      \n      // 3. Optimistic Update 실행: chapters 캐시 업데이트\n      if (previousChapters) {\n        queryClient.setQueryData<Chapter[]>(chaptersQueryKey, (oldChapters) => {\n          if (!oldChapters) return oldChapters\n          \n          return oldChapters.map((chapter) => ({\n            ...chapter,\n            learnings: (chapter.learnings || []).map((learning) => \n              learning._id === learningId ? { ...learning, skillIds: newSkillIds } : learning\n            )\n          }))\n        })\n      }\n      \n      // Book 캐시도 업데이트 (기존 learnings 지원)\n      if (previousBook) {\n        queryClient.setQueryData<Book>(queryKey, (oldBook) => {\n          if (!oldBook) return oldBook\n          \n          // 목차 기반일 경우\n          if (oldBook.chapters && oldBook.chapters.length > 0) {\n            return {\n              ...oldBook,\n              chapters: oldBook.chapters.map((chapter: Chapter) => ({\n                ...chapter,\n                learnings: (chapter.learnings || []).map((learning: Learning) => \n                  learning._id === learningId ? { ...learning, skillIds: newSkillIds } : learning\n                )\n              }))\n            }\n          }\n          \n          // 기존 학습 내용 리스트 기반일 경우\n          return {\n            ...oldBook,\n            learnings: (oldBook.learnings || []).map((learning: Learning) => \n              learning._id === learningId ? { ...learning, skillIds: newSkillIds } : learning\n            )\n          }\n        })\n      }\n\n      // 4. 서버 API 호출\n      await updateSkillsMutation.mutateAsync({ learningId, skillIds: newSkillIds })\n\n    } catch (error) {\n      console.error('Failed to update learning skills:', error)\n      setApiError('스킬 연결/해제에 실패했습니다.')\n\n      // 5. 에러 발생 시 롤백: 이전 데이터로 복원\n      if (previousChapters) {\n        queryClient.setQueryData(chaptersQueryKey, previousChapters)\n      }\n      if (previousBook) {\n        queryClient.setQueryData(queryKey, previousBook)\n      } else {\n        // 이전 데이터가 없으면 캐시를 무효화하여 서버에서 다시 가져오도록 합니다\n        queryClient.invalidateQueries({ queryKey })\n        queryClient.invalidateQueries({ queryKey: chaptersQueryKey })\n      }\n    }\n  }\n\n  return {\n    editingLearningId,\n    currentFormData,\n    setCurrentFormData,\n    showAddForm,\n    isSaving,\n    learningApiError: apiError,\n    handleToggleAddForm,\n    handleAddLearning,\n    handleDeleteLearning,\n    handleStartEdit,\n    handleSaveEdit,\n    handleCancelEdit,\n    handleSkillLinkChange,  // 🌟 새로운 핸들러 추가\n  }\n}\n","import { useQuery } from '@tanstack/react-query';\nimport { skillsAPI } from '../services/api';\nimport { SkillCategory } from '../types';\n\ninterface UseSkillsResult {\n  skillCategories: SkillCategory[];\n  loading: boolean;\n  error: string | null;\n  refetch: () => void;\n}\n\n// React Query를 사용한 데이터 페칭\nconst fetchSkillCategories = async (): Promise<SkillCategory[]> => {\n  const response = await skillsAPI.getCategories();\n  // API 응답이 { data: [...] } 형태인지 확인\n  const categories = response.data?.data || response.data || [];\n  return categories;\n};\n\nexport const useSkills = (): UseSkillsResult => {\n  const {\n    data: skillCategories = [],\n    isLoading: loading,\n    error,\n    refetch\n  } = useQuery({\n    queryKey: ['skillCategories'],\n    queryFn: fetchSkillCategories,\n    staleTime: 5 * 60 * 1000, // 5분\n    cacheTime: 10 * 60 * 1000, // 10분\n  });\n\n  return { \n    skillCategories, \n    loading, \n    error: error ? '스킬 데이터를 불러오는데 실패했습니다.' : null, \n    refetch \n  };\n};\n","import { useQuery, useMutation, useQueryClient, UseQueryResult } from '@tanstack/react-query'\nimport { videoLearningsAPI } from '../services/api'\nimport { VideoLearning, VideoLearningFormData } from '../types'\n\n// =================================================================\n// 📹 VideoLearning Query Keys\n// =================================================================\n\nconst VIDEO_LEARNING_QUERY_KEY = 'videoLearnings'\n\n// =================================================================\n// 📥 영상 학습 목록 조회 (React Query)\n// =================================================================\n\nexport const useVideoLearnings = (): UseQueryResult<VideoLearning[], Error> => {\n  return useQuery<VideoLearning[], Error>({\n    queryKey: [VIDEO_LEARNING_QUERY_KEY, 'list'],\n    queryFn: async () => {\n      const response = await videoLearningsAPI.getAll()\n      return response.data?.data || response.data || []\n    },\n    staleTime: 5 * 60 * 1000,  // 5분\n  })\n}\n\n// =================================================================\n// 📥 특정 영상 학습 조회 (React Query)\n// =================================================================\n\nexport const useVideoLearning = (id: string | undefined): UseQueryResult<VideoLearning, Error> => {\n  return useQuery<VideoLearning, Error>({\n    queryKey: [VIDEO_LEARNING_QUERY_KEY, 'detail', id],\n    queryFn: async () => {\n      if (!id) throw new Error('ID is required')\n      const response = await videoLearningsAPI.getById(id)\n      return response.data\n    },\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000,\n  })\n}\n\n// =================================================================\n// ➕ 영상 학습 생성 (React Query Mutation)\n// =================================================================\n\nexport const useCreateVideoLearning = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation<VideoLearning, Error, VideoLearningFormData>({\n    mutationFn: async (data: VideoLearningFormData) => {\n      const response = await videoLearningsAPI.create(data)\n      return response.data\n    },\n    onSuccess: () => {\n      // 목록 캐시 무효화\n      queryClient.invalidateQueries({ queryKey: [VIDEO_LEARNING_QUERY_KEY, 'list'] })\n      // 데이터 카운트도 무효화\n      queryClient.invalidateQueries({ queryKey: ['dataCounts'] })\n    },\n  })\n}\n\n// =================================================================\n// ✏️ 영상 학습 수정 (React Query Mutation)\n// =================================================================\n\nexport const useUpdateVideoLearning = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation<VideoLearning, Error, { id: string; data: VideoLearningFormData }>({\n    mutationFn: async ({ id, data }) => {\n      const response = await videoLearningsAPI.update(id, data)\n      return response.data\n    },\n    onSuccess: (_, variables) => {\n      // 목록 캐시 무효화\n      queryClient.invalidateQueries({ queryKey: [VIDEO_LEARNING_QUERY_KEY, 'list'] })\n      // 해당 영상 학습 상세 캐시도 무효화\n      queryClient.invalidateQueries({ queryKey: [VIDEO_LEARNING_QUERY_KEY, 'detail', variables.id] })\n    },\n  })\n}\n\n// =================================================================\n// 🗑️ 영상 학습 삭제 (React Query Mutation)\n// =================================================================\n\nexport const useDeleteVideoLearning = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation<void, Error, string>({\n    mutationFn: async (id: string) => {\n      await videoLearningsAPI.delete(id)\n    },\n    onSuccess: () => {\n      // 목록 캐시 무효화\n      queryClient.invalidateQueries({ queryKey: [VIDEO_LEARNING_QUERY_KEY, 'list'] })\n      // 데이터 카운트도 무효화\n      queryClient.invalidateQueries({ queryKey: ['dataCounts'] })\n    },\n  })\n}\n\n// =================================================================\n// 🔄 기존 훅 호환성 유지 (기존 컴포넌트가 바로 사용할 수 있도록)\n// =================================================================\n\nexport const useVideoLearningManagerData = () => {\n  const { data: videoLearnings = [], isLoading, isError, error, refetch } = useVideoLearnings()\n  const createMutation = useCreateVideoLearning()\n  const updateMutation = useUpdateVideoLearning()\n  const deleteMutation = useDeleteVideoLearning()\n\n  const createVideoLearning = async (data: VideoLearningFormData) => {\n    try {\n      await createMutation.mutateAsync(data)\n      return { success: true }\n    } catch (error) {\n      console.error('VideoLearning 생성 실패:', error)\n      return { success: false, error }\n    }\n  }\n\n  const updateVideoLearning = async (id: string, data: VideoLearningFormData) => {\n    try {\n      await updateMutation.mutateAsync({ id, data })\n      return { success: true }\n    } catch (error) {\n      console.error('VideoLearning 수정 실패:', error)\n      return { success: false, error }\n    }\n  }\n\n  const deleteVideoLearning = async (id: string) => {\n    try {\n      await deleteMutation.mutateAsync(id)\n      return { success: true }\n    } catch (error) {\n      console.error('VideoLearning 삭제 실패:', error)\n      return { success: false, error }\n    }\n  }\n\n  return {\n    videoLearnings,\n    isLoading,\n    error: isError ? error : null,\n    createVideoLearning,\n    updateVideoLearning,\n    deleteVideoLearning,\n    refetch,\n  }\n}\n\n","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport { videoPlaylistsAPI, playlistVideosAPI } from '../services/api'\nimport { VideoPlaylist, VideoPlaylistFormData, PlaylistVideo, PlaylistVideoFormData } from '../types'\n\n// =================================================================\n// 재생 목록 조회 훅\n// =================================================================\n\nexport const useVideoPlaylists = () => {\n  return useQuery<VideoPlaylist[], Error>({\n    queryKey: ['videoPlaylists'],\n    queryFn: async () => {\n      const response = await videoPlaylistsAPI.getAll()\n      return response.data?.data || response.data || []\n    },\n    staleTime: 5 * 60 * 1000,\n  })\n}\n\nexport const useVideoPlaylist = (id: string | undefined) => {\n  return useQuery<VideoPlaylist, Error>({\n    queryKey: ['videoPlaylist', id],\n    queryFn: async () => {\n      if (!id) throw new Error('ID가 필요합니다')\n      const response = await videoPlaylistsAPI.getById(id)\n      return response.data?.data || response.data\n    },\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000,\n  })\n}\n\n// =================================================================\n// 재생 목록 내 영상 조회 훅\n// =================================================================\n\nexport const usePlaylistVideos = (playlistId: string | undefined) => {\n  return useQuery<PlaylistVideo[], Error>({\n    queryKey: ['playlistVideos', playlistId],\n    queryFn: async () => {\n      if (!playlistId) return []\n      const response = await playlistVideosAPI.getByPlaylist(playlistId)\n      return response.data?.data || response.data || []\n    },\n    enabled: !!playlistId,\n    staleTime: 5 * 60 * 1000,\n  })\n}\n\n// =================================================================\n// 재생 목록 Mutation 훅\n// =================================================================\n\nexport const useCreateVideoPlaylist = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: (data: VideoPlaylistFormData) => videoPlaylistsAPI.create(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['videoPlaylists'] })\n    },\n  })\n}\n\nexport const useUpdateVideoPlaylist = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: VideoPlaylistFormData }) =>\n      videoPlaylistsAPI.update(id, data),\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['videoPlaylists'] })\n      queryClient.invalidateQueries({ queryKey: ['videoPlaylist', variables.id] })\n    },\n  })\n}\n\nexport const useDeleteVideoPlaylist = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: (id: string) => videoPlaylistsAPI.delete(id),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['videoPlaylists'] })\n    },\n  })\n}\n\n// =================================================================\n// 재생 목록 영상 Mutation 훅\n// =================================================================\n\nexport const useCreatePlaylistVideo = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: (data: PlaylistVideoFormData) => playlistVideosAPI.create(data),\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['playlistVideos', variables.playlistId] })\n    },\n  })\n}\n\nexport const useUpdatePlaylistVideo = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: PlaylistVideoFormData }) =>\n      playlistVideosAPI.update(id, data),\n    onSuccess: (response) => {\n      const playlistId = response.data?.data?.playlistId\n      if (playlistId) {\n        queryClient.invalidateQueries({ queryKey: ['playlistVideos', playlistId] })\n      }\n    },\n  })\n}\n\nexport const useDeletePlaylistVideo = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: (id: string) => playlistVideosAPI.delete(id),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['playlistVideos'] })\n    },\n  })\n}\n\n// =================================================================\n// 관리자용 데이터 훅\n// =================================================================\n\nexport const useVideoPlaylistManagerData = () => {\n  const { data: playlists = [], isLoading } = useVideoPlaylists()\n  const createMutation = useCreateVideoPlaylist()\n  const updateMutation = useUpdateVideoPlaylist()\n  const deleteMutation = useDeleteVideoPlaylist()\n\n  const createPlaylist = async (data: VideoPlaylistFormData) => {\n    try {\n      console.log('🎬 재생 목록 생성 시도:', data)\n      const result = await createMutation.mutateAsync(data)\n      console.log('✅ 재생 목록 생성 성공:', result)\n      return { success: true }\n    } catch (error: any) {\n      console.error('❌ 재생 목록 생성 실패:', error)\n      console.error('❌ 에러 상세:', {\n        message: error?.message,\n        response: error?.response?.data,\n        status: error?.response?.status\n      })\n      return { success: false, error }\n    }\n  }\n\n  const updatePlaylist = async (id: string, data: VideoPlaylistFormData) => {\n    try {\n      await updateMutation.mutateAsync({ id, data })\n      return { success: true }\n    } catch (error) {\n      console.error('재생 목록 수정 실패:', error)\n      return { success: false, error }\n    }\n  }\n\n  const deletePlaylist = async (id: string) => {\n    try {\n      await deleteMutation.mutateAsync(id)\n      return { success: true }\n    } catch (error) {\n      console.error('재생 목록 삭제 실패:', error)\n      return { success: false, error }\n    }\n  }\n\n  return {\n    playlists,\n    isLoading,\n    createPlaylist,\n    updatePlaylist,\n    deletePlaylist,\n  }\n}\n\n","import { useState, useCallback } from 'react'\n\nexport type ToastType = 'success' | 'error' | 'warning' | 'info'\n\nexport interface Toast {\n  id: string\n  type: ToastType\n  title: string\n  message?: string\n  duration?: number\n}\n\ninterface UseToastReturn {\n  toasts: Toast[]\n  showToast: (toast: Omit<Toast, 'id'>) => void\n  hideToast: (id: string) => void\n  clearAllToasts: () => void\n}\n\n/**\n * Toast 알림 시스템을 위한 Custom Hook\n * 성공, 에러, 경고, 정보 메시지를 표시할 수 있습니다.\n */\nexport function useToast(): UseToastReturn {\n  const [toasts, setToasts] = useState<Toast[]>([])\n\n  const showToast = useCallback((toast: Omit<Toast, 'id'>) => {\n    const id = Math.random().toString(36).substr(2, 9)\n    const newToast: Toast = {\n      id,\n      duration: 5000, // 기본 5초\n      ...toast\n    }\n\n    setToasts(prev => [...prev, newToast])\n\n    // 자동 제거 (duration이 0이 아닌 경우)\n    if (newToast.duration && newToast.duration > 0) {\n      setTimeout(() => {\n        hideToast(id)\n      }, newToast.duration)\n    }\n  }, [])\n\n  const hideToast = useCallback((id: string) => {\n    setToasts(prev => prev.filter(toast => toast.id !== id))\n  }, [])\n\n  const clearAllToasts = useCallback(() => {\n    setToasts([])\n  }, [])\n\n  return {\n    toasts,\n    showToast,\n    hideToast,\n    clearAllToasts\n  }\n}\n\n/**\n * 편의 메서드들을 제공하는 Toast Hook\n */\nexport function useToastHelpers() {\n  const { showToast, ...rest } = useToast()\n\n  const success = useCallback((title: string, message?: string) => {\n    showToast({ type: 'success', title, message })\n  }, [showToast])\n\n  const error = useCallback((title: string, message?: string) => {\n    showToast({ type: 'error', title, message })\n  }, [showToast])\n\n  const warning = useCallback((title: string, message?: string) => {\n    showToast({ type: 'warning', title, message })\n  }, [showToast])\n\n  const info = useCallback((title: string, message?: string) => {\n    showToast({ type: 'info', title, message })\n  }, [showToast])\n\n  return {\n    ...rest,\n    success,\n    error,\n    warning,\n    info\n  }\n}\n\nexport default useToast\n","import { useQuery } from '@tanstack/react-query';\nimport { projectsAPI } from '../services/api';\nimport { Project } from '../types';\n\ninterface UseProjectsResult {\n  projects: Project[];\n  loading: boolean;\n  error: string | null;\n  refetch: () => void;\n}\n\n// React Query를 사용한 데이터 페칭\nconst fetchProjects = async (): Promise<Project[]> => {\n  const response = await projectsAPI.getAll();\n  return response.data.data;\n};\n\nexport const useProjects = (): UseProjectsResult => {\n  const {\n    data: projects = [],\n    isLoading: loading,\n    error,\n    refetch\n  } = useQuery({\n    queryKey: ['projects'],\n    queryFn: fetchProjects,\n    staleTime: 5 * 60 * 1000, // 5분\n    cacheTime: 10 * 60 * 1000, // 10분\n  });\n\n  return { \n    projects, \n    loading, \n    error: error ? '프로젝트를 불러오는데 실패했습니다.' : null, \n    refetch \n  };\n};\n","import { useState, useEffect, useMemo } from 'react'\nimport { projectsAPI } from '../services/api'\nimport { Project, Skill } from '../types'\nimport { useSkills } from './useSkills'\nimport { \n  getLocalizedField, \n  getLocalizedArrayField,\n  getLocalizedSkillName,\n  getLocalizedSkillDescription,\n  Language \n} from '@/utils/i18nUtils'\n\ninterface LocalizedProject extends Omit<Project, 'technologies' | 'features' | 'learnings' | 'videoDescriptions'> {\n  title: string\n  description: string\n  detailedDescription: string\n  technologies: string[]\n  features: string[]\n  learnings: string[]\n  videoDescriptions: string[]\n}\n\ninterface LinkedSkill extends Skill {\n  levelText: string\n}\n\ninterface UseProjectDetailReturn {\n  loading: boolean\n  error: string | null\n  localizedProject: LocalizedProject | null\n  linkedSkills: LinkedSkill[]\n}\n\n/**\n * Custom hook for ProjectDetail component\n * Handles data fetching, multilingual field processing, and skill matching\n */\nexport const useProjectDetail = (\n  id: string | undefined,\n  currentLang: Language\n): UseProjectDetailReturn => {\n  const [project, setProject] = useState<Project | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const { skillCategories } = useSkills()\n\n  // Fetch project data by ID\n  useEffect(() => {\n    const fetchProject = async () => {\n      if (!id) return\n\n      try {\n        setLoading(true)\n        const response = await projectsAPI.getById(id)\n        setProject(response.data)\n      } catch (error) {\n        console.error('Failed to fetch project:', error)\n        setError('프로젝트를 불러오는데 실패했습니다.')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchProject()\n  }, [id])\n\n  // Create localized project object with all multilingual fields processed\n  const localizedProject = useMemo<LocalizedProject | null>(() => {\n    if (!project) return null\n\n    return {\n      ...project,\n      // String fields\n      title: getLocalizedField(currentLang, project.title, project.titleEn, project.titleJa),\n      description: getLocalizedField(currentLang, project.description, project.descriptionEn, project.descriptionJa),\n      detailedDescription: getLocalizedField(\n        currentLang,\n        project.detailedDescription,\n        project.detailedDescriptionEn,\n        project.detailedDescriptionJa\n      ),\n      // Array fields - CRITICAL: Always add || [] fallback to prevent runtime errors\n      technologies: getLocalizedArrayField(\n        currentLang,\n        project.technologies,\n        project.technologiesEn,\n        project.technologiesJa\n      ) || [],\n      features: getLocalizedArrayField(\n        currentLang,\n        project.features,\n        project.featuresEn,\n        project.featuresJa\n      ) || [],\n      learnings: getLocalizedArrayField(\n        currentLang,\n        project.learnings,\n        project.learningsEn,\n        project.learningsJa\n      ) || [],\n      videoDescriptions: getLocalizedArrayField(\n        currentLang,\n        project.videoDescriptions,\n        project.videoDescriptionsEn,\n        project.videoDescriptionsJa\n      ) || [],\n    }\n  }, [project, currentLang])\n\n  // Helper function to get level text\n  const getLevelText = (level: number): string => {\n    if (level >= 90) return 'Expert'\n    if (level >= 70) return 'Proficient'\n    if (level >= 50) return 'Competent'\n    return 'Basic'\n  }\n\n  // Process linked skills with multilingual support\n  const linkedSkills = useMemo<LinkedSkill[]>(() => {\n    if (!project || !skillCategories) return []\n\n    // Flatten all skills from categories\n    const allSkills = skillCategories.flatMap(category => category.skills || [])\n\n    // Create Set for O(1) lookup performance\n    const skillIdSet = new Set(project.skillIds || [])\n\n    // Filter and map skills with localization\n    return allSkills\n      .filter(skill => skillIdSet.has(skill._id!))\n      .map(skill => ({\n        ...skill,\n        name: getLocalizedSkillName(currentLang, skill),\n        description: getLocalizedSkillDescription(currentLang, skill),\n        levelText: getLevelText(skill.level || 0),\n      }))\n  }, [project, skillCategories, currentLang])\n\n  return {\n    loading,\n    error,\n    localizedProject,\n    linkedSkills,\n  }\n}\n\n","import { useQuery } from '@tanstack/react-query';\nimport { experiencesAPI } from '../services/api';\n\n// 경력 상세 카테고리 타입\nexport interface ExperienceDetail {\n  category: string;  // 카테고리 이름 (예: \"근무경험\", \"교육\", \"근무매장\")\n  items: string[];   // 카테고리별 항목들\n}\n\n// 백엔드 ExperienceSchema에 맞춘 인터페이스 정의\nexport interface ExperienceItem {\n  _id: string;\n  period: string;\n  title: string;\n  company: string;\n  description: string;\n  details?: ExperienceDetail[];  // 카테고리별 상세 내용 (신규)\n  skills: string[];  // 🔄 호환성 유지\n  skillIds?: string[];  // 🌟 스킬 ID 목록 (Skills 페이지와 연결)\n  iconKey?: string;\n  color?: string;\n  bgColor?: string;\n  order?: number;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\ninterface UseExperiencesResult {\n  experiences: ExperienceItem[];\n  loading: boolean;\n  error: string | null;\n  refetch: () => void;\n}\n\n// 데이터 변환 및 정렬 함수\nconst transformExperiences = (data: ExperienceItem[]): ExperienceItem[] => {\n  return data.slice().sort((a, b) => {\n    // case 1: 두 항목 모두 order가 있으면 order를 기준으로 오름차순\n    if (a.order !== undefined && b.order !== undefined) {\n      return a.order - b.order;\n    }\n    \n    // case 2: order가 하나만 있거나 둘 다 없으면 createdAt을 기준으로 역순 (최신순)\n    if (a.createdAt && b.createdAt) {\n      // Date 객체로 변환하여 비교 (내림차순)\n      return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n    }\n    \n    return 0; // 정렬할 필드가 모두 없으면 순서 변경 없음\n  });\n};\n\n// React Query를 사용한 데이터 페칭\nconst fetchExperiences = async (): Promise<ExperienceItem[]> => {\n  const response = await experiencesAPI.getAll();\n  const data: ExperienceItem[] = response.data.data;\n  return transformExperiences(data);\n};\n\nexport const useExperiences = (): UseExperiencesResult => {\n  const {\n    data: experiences = [],\n    isLoading: loading,\n    error,\n    refetch\n  } = useQuery({\n    queryKey: ['experiences'],\n    queryFn: fetchExperiences,\n    staleTime: 5 * 60 * 1000, // 5분\n    cacheTime: 10 * 60 * 1000, // 10분\n  });\n\n  return { \n    experiences, \n    loading, \n    error: error ? '경험 데이터를 불러오는 중 오류가 발생했습니다.' : null, \n    refetch \n  };\n};\n","import { useEffect, useRef, useCallback } from 'react'\n\n/**\n * AbortController를 사용하여 API 요청 취소를 관리하는 Hook\n * 컴포넌트 언마운트 시 또는 의존성 변경 시 이전 요청을 취소하여\n * 메모리 누수와 Race Condition을 방지합니다.\n */\nexport function useAbortController() {\n  const abortControllerRef = useRef<AbortController | null>(null)\n\n  // 새로운 AbortController 생성\n  const createAbortController = useCallback(() => {\n    // 이전 컨트롤러가 있다면 취소\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort()\n    }\n    \n    // 새로운 컨트롤러 생성\n    abortControllerRef.current = new AbortController()\n    return abortControllerRef.current\n  }, [])\n\n  // 현재 AbortController 가져오기 (없으면 생성)\n  const getAbortController = useCallback(() => {\n    if (!abortControllerRef.current) {\n      abortControllerRef.current = new AbortController()\n    }\n    return abortControllerRef.current\n  }, [])\n\n  // 요청 취소\n  const abort = useCallback(() => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort()\n      abortControllerRef.current = null\n    }\n  }, [])\n\n  // 컴포넌트 언마운트 시 정리\n  useEffect(() => {\n    return () => {\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort()\n      }\n    }\n  }, [])\n\n  return {\n    createAbortController,\n    getAbortController,\n    abort,\n    signal: abortControllerRef.current?.signal\n  }\n}\n\n/**\n * API 요청을 위한 AbortController를 자동으로 관리하는 Hook\n * 의존성 배열이 변경될 때마다 이전 요청을 취소하고 새로운 요청을 시작합니다.\n */\nexport function useAbortableEffect(\n  effect: (signal: AbortSignal) => void | (() => void),\n  deps: React.DependencyList = []\n) {\n  const { createAbortController } = useAbortController()\n\n  useEffect(() => {\n    const abortController = createAbortController()\n    \n    const cleanup = effect(abortController.signal)\n    \n    return () => {\n      if (typeof cleanup === 'function') {\n        cleanup()\n      }\n      abortController.abort()\n    }\n  }, deps)\n}\n\n/**\n * API 요청을 위한 fetch wrapper with AbortController\n */\nexport async function fetchWithAbort(\n  url: string,\n  options: RequestInit = {},\n  signal?: AbortSignal\n): Promise<Response> {\n  const response = await fetch(url, {\n    ...options,\n    signal: signal || null\n  })\n\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`)\n  }\n\n  return response\n}\n\nexport default useAbortController\n","import { useState, useCallback, useRef } from 'react'\n\ninterface OptimisticUpdateOptions<T> {\n  onSuccess?: (data: T) => void\n  onError?: (error: Error, rollback: () => void) => void\n  onRollback?: (data: T) => void\n}\n\n/**\n * 낙관적 업데이트를 관리하는 Hook\n * API 요청 전에 UI를 먼저 업데이트하여 더 나은 사용자 경험을 제공합니다.\n * 실패 시 자동으로 롤백합니다.\n */\nexport function useOptimisticUpdate<T>(\n  initialData: T,\n  options: OptimisticUpdateOptions<T> = {}\n) {\n  const [data, setData] = useState<T>(initialData)\n  const [isOptimistic, setIsOptimistic] = useState(false)\n  const previousDataRef = useRef<T>(initialData)\n\n  const { onSuccess, onError, onRollback } = options\n\n  // 낙관적 업데이트 실행\n  const optimisticUpdate = useCallback(async (\n    optimisticData: T | ((prev: T) => T),\n    apiCall: () => Promise<T>\n  ) => {\n    // 이전 데이터 백업\n    previousDataRef.current = data\n    \n    // 낙관적 업데이트 실행\n    setData(prev => {\n      const newData = typeof optimisticData === 'function' \n        ? (optimisticData as (prev: T) => T)(prev)\n        : optimisticData\n      return newData\n    })\n    \n    setIsOptimistic(true)\n\n    try {\n      // API 호출\n      const result = await apiCall()\n      \n      // 성공 시 실제 데이터로 업데이트\n      setData(result)\n      setIsOptimistic(false)\n      onSuccess?.(result)\n      \n      return result\n    } catch (error) {\n      // 실패 시 롤백\n      setData(previousDataRef.current)\n      setIsOptimistic(false)\n      \n      const rollback = () => {\n        setData(previousDataRef.current)\n        onRollback?.(previousDataRef.current)\n      }\n      \n      onError?.(error as Error, rollback)\n      throw error\n    }\n  }, [data, onSuccess, onError, onRollback])\n\n  // 데이터 업데이트 (낙관적 업데이트 없이)\n  const updateData = useCallback((newData: T | ((prev: T) => T)) => {\n    setData(prev => {\n      const updated = typeof newData === 'function' \n        ? (newData as (prev: T) => T)(prev)\n        : newData\n      return updated\n    })\n  }, [])\n\n  // 데이터 리셋\n  const resetData = useCallback((newData: T) => {\n    setData(newData)\n    previousDataRef.current = newData\n    setIsOptimistic(false)\n  }, [])\n\n  return {\n    data,\n    isOptimistic,\n    optimisticUpdate,\n    updateData,\n    resetData\n  }\n}\n\n/**\n * 배열 데이터를 위한 낙관적 업데이트 Hook\n * 추가, 수정, 삭제 작업에 특화되어 있습니다.\n */\nexport function useOptimisticArrayUpdate<T extends { _id: string }>(\n  initialData: T[],\n  options: OptimisticUpdateOptions<T[]> = {}\n) {\n  const {\n    data,\n    isOptimistic,\n    optimisticUpdate,\n    updateData,\n    resetData\n  } = useOptimisticUpdate<T[]>(initialData, options)\n\n  // 항목 추가\n  const optimisticAdd = useCallback(async (\n    newItem: T,\n    apiCall: () => Promise<T>\n  ) => {\n    return optimisticUpdate(\n      (prev) => [...prev, { ...newItem, _id: `temp_${Date.now()}` } as T],\n      async () => {\n        const result = await apiCall()\n        // 임시 ID를 실제 ID로 교체\n        updateData(prev => prev.map(item => \n          item._id.startsWith('temp_') ? result : item\n        ))\n        return [...data.filter(item => !item._id.startsWith('temp_')), result]\n      }\n    )\n  }, [optimisticUpdate, updateData, data])\n\n  // 항목 수정\n  const optimisticUpdateItem = useCallback(async (\n    id: string,\n    updates: Partial<T>,\n    apiCall: () => Promise<T>\n  ) => {\n    return optimisticUpdate(\n      (prev) => prev.map(item => \n        item._id === id ? { ...item, ...updates } : item\n      ),\n      async () => {\n        const result = await apiCall()\n        updateData(prev => prev.map(item => \n          item._id === id ? result : item\n        ))\n        return data.map(item => item._id === id ? result : item)\n      }\n    )\n  }, [optimisticUpdate, updateData, data])\n\n  // 항목 삭제\n  const optimisticDelete = useCallback(async (\n    id: string,\n    apiCall: () => Promise<void>\n  ) => {\n    const itemToDelete = data.find(item => item._id === id)\n    if (!itemToDelete) return\n\n    return optimisticUpdate(\n      (prev) => prev.filter(item => item._id !== id),\n      async () => {\n        await apiCall()\n        return data.filter(item => item._id !== id)\n      }\n    )\n  }, [optimisticUpdate, data])\n\n  // 항목 재정렬\n  const optimisticReorder = useCallback(async (\n    reorderedItems: T[],\n    apiCall: () => Promise<T[]>\n  ) => {\n    return optimisticUpdate(\n      reorderedItems,\n      async () => {\n        const result = await apiCall()\n        return result\n      }\n    )\n  }, [optimisticUpdate])\n\n  return {\n    data,\n    isOptimistic,\n    optimisticAdd,\n    optimisticUpdateItem,\n    optimisticDelete,\n    optimisticReorder,\n    updateData,\n    resetData\n  }\n}\n\nexport default useOptimisticUpdate\n","import { useState, useEffect, useCallback } from 'react'\nimport { useAbortController } from './useAbortController'\nimport { useOptimisticArrayUpdate } from './useOptimisticUpdate'\nimport { useToastHelpers } from './useToast'\nimport { booksAPI } from '../services/api'\nimport { Book, BookFormData, BookUpdateData } from '../types'\n\n/**\n * 리팩토링된 BookManager 데이터 관리 Hook\n * \n * 주요 개선사항:\n * 1. AbortController를 사용한 메모리 누수 방지\n * 2. 낙관적 업데이트로 성능 개선\n * 3. Toast 알림으로 사용자 피드백 개선\n * 4. 에러 처리 강화\n */\nexport function useBookManagerData() {\n  const [isLoading, setIsLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const { createAbortController } = useAbortController()\n  const { success, error: showError } = useToastHelpers()\n\n  // 낙관적 업데이트를 사용한 서적 데이터 관리\n  const {\n    data: books,\n    isOptimistic,\n    optimisticAdd,\n    optimisticUpdateItem,\n    optimisticDelete,\n    resetData\n  } = useOptimisticArrayUpdate<Book>([])\n\n  // 서적 데이터 로드\n  const fetchBooks = useCallback(async () => {\n    try {\n      setIsLoading(true)\n      setError(null)\n      \n      const abortController = createAbortController()\n      const response = await booksAPI.getAll()\n      \n        if (!abortController.signal.aborted) {\n          resetData(response.data.data || [])\n        }\n    } catch (err) {\n      if (!(err as Error).name?.includes('AbortError')) {\n        const errorMessage = '서적 목록을 불러오는데 실패했습니다.'\n        setError(errorMessage)\n        showError('로드 실패', errorMessage)\n      }\n    } finally {\n      setIsLoading(false)\n    }\n  }, [createAbortController, resetData, showError])\n\n  // 서적 생성\n  const createBook = useCallback(async (bookData: BookFormData) => {\n    try {\n      const newBook = {\n        ...bookData,\n        _id: `temp_${Date.now()}`,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      } as Book\n\n      const result = await optimisticAdd(\n        newBook,\n        () => booksAPI.create(bookData).then(res => res.data)\n      )\n\n      success('서적 추가 완료', `${bookData.title}이(가) 성공적으로 추가되었습니다.`)\n      return result\n    } catch (err) {\n      showError('서적 추가 실패', err instanceof Error ? err.message : '알 수 없는 오류가 발생했습니다.')\n      throw err\n    }\n  }, [optimisticAdd, success, showError])\n\n  // 서적 수정\n  const updateBook = useCallback(async (bookId: string, bookData: BookUpdateData) => {\n    try {\n      const result = await optimisticUpdateItem(\n        bookId,\n        bookData,\n        () => booksAPI.update(bookId, bookData).then(res => res.data)\n      )\n\n      success('서적 수정 완료', '서적 정보가 성공적으로 수정되었습니다.')\n      return result\n    } catch (err) {\n      showError('서적 수정 실패', err instanceof Error ? err.message : '알 수 없는 오류가 발생했습니다.')\n      throw err\n    }\n  }, [optimisticUpdateItem, success, showError])\n\n  // 서적 삭제\n  const deleteBook = useCallback(async (bookId: string) => {\n    try {\n      const result = await optimisticDelete(\n        bookId,\n        () => booksAPI.delete(bookId).then(() => {})\n      )\n\n      success('서적 삭제 완료', '서적이 성공적으로 삭제되었습니다.')\n      return result\n    } catch (err) {\n      showError('서적 삭제 실패', err instanceof Error ? err.message : '알 수 없는 오류가 발생했습니다.')\n      throw err\n    }\n  }, [optimisticDelete, success, showError])\n\n  // 초기 데이터 로드\n  useEffect(() => {\n    fetchBooks()\n  }, [])\n\n  return {\n    books,\n    isLoading,\n    error,\n    isOptimistic,\n    createBook,\n    updateBook,\n    deleteBook,\n    refetch: fetchBooks\n  }\n}\n\nexport default useBookManagerData","import { useState, useCallback } from 'react'\n\ninterface CRUDState<T> {\n  showForm: boolean\n  editingItem: T | null\n  isSaving: boolean\n  isDeleting: boolean\n}\n\ninterface CRUDActions<T> {\n  handleCreate: () => void\n  handleEdit: (item: T) => void\n  handleCancel: () => void\n  handleSave: (data: any) => Promise<void>\n  handleDelete: (item: T) => Promise<void>\n  setShowForm: (show: boolean) => void\n  setEditingItem: (item: T | null) => void\n}\n\ninterface UseCRUDManagerOptions<T> {\n  onSave: (data: any, editingItem?: T | null) => Promise<void>\n  onDelete: (item: T) => Promise<void>\n  onSuccess?: () => void\n  onError?: (error: Error) => void\n}\n\n/**\n * CRUD 관리자를 위한 재사용 가능한 Custom Hook\n * BookManager, ExperienceManager, ProjectManager 등에서 공통으로 사용되는\n * 상태 관리 로직을 중앙화하여 코드 중복을 제거합니다.\n */\nexport function useCRUDManager<T>({\n  onSave,\n  onDelete,\n  onSuccess,\n  onError\n}: UseCRUDManagerOptions<T>): [CRUDState<T>, CRUDActions<T>] {\n  \n  const [showForm, setShowForm] = useState(false)\n  const [editingItem, setEditingItem] = useState<T | null>(null)\n  const [isSaving, setIsSaving] = useState(false)\n  const [isDeleting, setIsDeleting] = useState(false)\n\n  // 새 항목 생성 핸들러\n  const handleCreate = useCallback(() => {\n    setEditingItem(null)\n    setShowForm(true)\n  }, [])\n\n  // 기존 항목 편집 핸들러\n  const handleEdit = useCallback((item: T) => {\n    setEditingItem(item)\n    setShowForm(true)\n  }, [])\n\n  // 폼 취소 핸들러\n  const handleCancel = useCallback(() => {\n    setShowForm(false)\n    setEditingItem(null)\n    setIsSaving(false)\n    setIsDeleting(false)\n  }, [])\n\n  // 저장 핸들러 (낙관적 업데이트 지원)\n  const handleSave = useCallback(async (data: any) => {\n    if (isSaving) return\n\n    try {\n      setIsSaving(true)\n      await onSave(data, editingItem)\n      \n      // 성공 시 폼 닫기\n      handleCancel()\n      onSuccess?.()\n    } catch (error) {\n      console.error('저장 실패:', error)\n      onError?.(error as Error)\n    } finally {\n      setIsSaving(false)\n    }\n  }, [isSaving, editingItem, onSave, onSuccess, onError, handleCancel])\n\n  // 삭제 핸들러\n  const handleDelete = useCallback(async (item: T) => {\n    if (isDeleting) return\n    \n    // 사용자 확인\n    const confirmed = window.confirm(\n      `정말 \"${(item as any).title || (item as any).name || '이 항목'}\"을(를) 삭제하시겠습니까?`\n    )\n    \n    if (!confirmed) return\n\n    try {\n      setIsDeleting(true)\n      await onDelete(item)\n      onSuccess?.()\n    } catch (error) {\n      console.error('삭제 실패:', error)\n      onError?.(error as Error)\n    } finally {\n      setIsDeleting(false)\n    }\n  }, [isDeleting, onDelete, onSuccess, onError])\n\n  const state: CRUDState<T> = {\n    showForm,\n    editingItem,\n    isSaving,\n    isDeleting\n  }\n\n  const actions: CRUDActions<T> = {\n    handleCreate,\n    handleEdit,\n    handleCancel,\n    handleSave,\n    handleDelete,\n    setShowForm,\n    setEditingItem\n  }\n\n  return [state, actions]\n}\n\n/**\n * 낙관적 업데이트를 지원하는 CRUD 관리자 Hook\n * API 호출 전에 UI를 먼저 업데이트하여 더 나은 사용자 경험을 제공합니다.\n */\nexport function useOptimisticCRUDManager<T>({\n  onSave,\n  onDelete,\n  onOptimisticUpdate,\n  onOptimisticDelete,\n  onSuccess,\n  onError\n}: UseCRUDManagerOptions<T> & {\n  onOptimisticUpdate?: (data: any, editingItem?: T | null) => void\n  onOptimisticDelete?: (item: T) => void\n}) {\n  \n  const [state, actions] = useCRUDManager({\n    onSave: async (data, editingItem) => {\n      // 낙관적 업데이트 실행\n      onOptimisticUpdate?.(data, editingItem)\n      \n      try {\n        await onSave(data, editingItem)\n      } catch (error) {\n        // 실패 시 롤백 (상위 컴포넌트에서 처리)\n        throw error\n      }\n    },\n    onDelete: async (item) => {\n      // 낙관적 삭제 실행\n      onOptimisticDelete?.(item)\n      \n      try {\n        await onDelete(item)\n      } catch (error) {\n        // 실패 시 롤백 (상위 컴포넌트에서 처리)\n        throw error\n      }\n    },\n    onSuccess,\n    onError\n  })\n\n  return [state, actions] as const\n}\n\nexport default useCRUDManager\n","import { useState, useEffect, useCallback } from 'react'\nimport { experiencesAPI } from '../services/api'\nimport { Experience } from '../types'\n\nexport const useExperienceManagerData = () => {\n  const [experiences, setExperiences] = useState<Experience[]>([])\n  const [isLoading, setIsLoading] = useState(false)\n\n  // Experience 데이터만 가져오는 함수\n  const fetchExperiences = useCallback(async () => {\n    setIsLoading(true)\n    try {\n      const response = await experiencesAPI.getAll()\n        setExperiences(response.data.data || [])\n    } catch (error) {\n      console.error('Experience 데이터 로드 실패:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }, [])\n\n  // Experience 생성\n  const createExperience = useCallback(async (experienceData: any) => {\n    try {\n      await experiencesAPI.create(experienceData)\n      await fetchExperiences() // 새로고침\n      return { success: true }\n    } catch (error) {\n      console.error('Experience 생성 실패:', error)\n      return { success: false, error }\n    }\n  }, [fetchExperiences])\n\n  // Experience 수정\n  const updateExperience = useCallback(async (id: string, experienceData: any) => {\n    try {\n      await experiencesAPI.update(id, experienceData)\n      await fetchExperiences() // 새로고침\n      return { success: true }\n    } catch (error) {\n      console.error('Experience 수정 실패:', error)\n      return { success: false, error }\n    }\n  }, [fetchExperiences])\n\n  // Experience 삭제\n  const deleteExperience = useCallback(async (id: string) => {\n    try {\n      await experiencesAPI.delete(id)\n      await fetchExperiences() // 새로고침\n      return { success: true }\n    } catch (error) {\n      console.error('Experience 삭제 실패:', error)\n      return { success: false, error }\n    }\n  }, [fetchExperiences])\n\n  useEffect(() => {\n    fetchExperiences()\n  }, [])\n\n  return {\n    experiences,\n    isLoading,\n    fetchExperiences,\n    createExperience,\n    updateExperience,\n    deleteExperience\n  }\n}\n","import { useState, useEffect } from 'react'\nimport { Project, ProjectFormData } from '../types'\nimport { AdminLanguage } from '../components/common/LanguageTabs'\n\n// Video item type with multilingual descriptions\nexport interface VideoItem {\n  url: string\n  description: string\n  descriptionEn: string\n  descriptionJa: string\n}\n\ninterface UseProjectFormReturn {\n  formData: any\n  videoItems: VideoItem[]\n  currentLang: AdminLanguage\n  setCurrentLang: (lang: AdminLanguage) => void\n  setFormData: React.Dispatch<React.SetStateAction<any>>\n  setVideoItems: React.Dispatch<React.SetStateAction<VideoItem[]>>\n  handleFieldChange: (key: string, value: any) => void\n  handleArrayFieldChange: (key: string, value: string[]) => void\n  handleVideoUrlChange: (index: number, url: string) => void\n  handleVideoDescriptionChange: (index: number, description: string, lang: 'ko' | 'en' | 'ja') => void\n  handleAddVideo: () => void\n  handleRemoveVideo: (index: number) => void\n  prepareDataForSubmit: () => any\n}\n\n/**\n * Custom hook for ProjectForm\n * Handles all form state management, data initialization, and preparation for submission\n */\nexport const useProjectForm = (initialData: Project | null): UseProjectFormReturn => {\n  const [currentLang, setCurrentLang] = useState<AdminLanguage>('ko')\n  \n  // Initialize categoryIds\n  const initialCategoryIds = initialData?.categoryIds \n    ? (initialData.categoryIds as any[]).map((catIdOrObj: any) => \n        typeof catIdOrObj === 'string' ? catIdOrObj : catIdOrObj._id\n      ).filter(Boolean) as string[]\n    : []\n\n  // Initialize skillIds\n  const initialSkillIds = initialData?.skillIds \n    ? (initialData.skillIds as any[]).map((skillIdOrObj: any) => \n        typeof skillIdOrObj === 'string' ? skillIdOrObj : skillIdOrObj._id\n      ).filter(Boolean) as string[]\n    : []\n\n  // Initialize video items\n  const [videoItems, setVideoItems] = useState<VideoItem[]>(() => {\n    if (initialData?.videos && Array.isArray(initialData.videos)) {\n      return initialData.videos.map((url, index) => ({\n        url,\n        description: initialData.videoDescriptions?.[index] || '',\n        descriptionEn: initialData.videoDescriptionsEn?.[index] || '',\n        descriptionJa: initialData.videoDescriptionsJa?.[index] || ''\n      }))\n    }\n    return []\n  })\n\n  // Initialize form data\n  const [formData, setFormData] = useState<any>(\n    initialData ? {\n      ...initialData,\n      // Convert arrays to strings for textarea inputs\n      technologies: Array.isArray(initialData.technologies) ? initialData.technologies.join('\\n') : initialData.technologies || '',\n      technologiesEn: Array.isArray(initialData.technologiesEn) ? initialData.technologiesEn.join('\\n') : initialData.technologiesEn || '',\n      technologiesJa: Array.isArray(initialData.technologiesJa) ? initialData.technologiesJa.join('\\n') : initialData.technologiesJa || '',\n      images: Array.isArray(initialData.images) ? initialData.images.join('\\n') : initialData.images || '',\n      features: Array.isArray(initialData.features) ? initialData.features.join('\\n') : initialData.features || '',\n      featuresEn: Array.isArray(initialData.featuresEn) ? initialData.featuresEn.join('\\n') : initialData.featuresEn || '',\n      featuresJa: Array.isArray(initialData.featuresJa) ? initialData.featuresJa.join('\\n') : initialData.featuresJa || '',\n      learnings: Array.isArray(initialData.learnings) ? initialData.learnings.join('\\n') : initialData.learnings || '',\n      learningsEn: Array.isArray(initialData.learningsEn) ? initialData.learningsEn.join('\\n') : initialData.learningsEn || '',\n      learningsJa: Array.isArray(initialData.learningsJa) ? initialData.learningsJa.join('\\n') : initialData.learningsJa || '',\n      skillIds: initialSkillIds,\n      categoryIds: initialCategoryIds\n    } : {\n      title: '',\n      titleEn: '',\n      titleJa: '',\n      description: '',\n      descriptionEn: '',\n      descriptionJa: '',\n      technologies: '',\n      technologiesEn: '',\n      technologiesJa: '',\n      category: 'automation',\n      categoryIds: [],\n      status: 'preparing',\n      githubLink: '',\n      liveLink: '',\n      image: '',\n      images: '',\n      detailedDescription: '',\n      detailedDescriptionEn: '',\n      detailedDescriptionJa: '',\n      features: '',\n      featuresEn: '',\n      featuresJa: '',\n      learnings: '',\n      learningsEn: '',\n      learningsJa: '',\n      order: 0,\n      skillIds: []\n    }\n  )\n\n  // Handle simple field change\n  const handleFieldChange = (key: string, value: any) => {\n    setFormData((prev: any) => ({\n      ...prev,\n      [key]: value\n    }))\n  }\n\n  // Handle array field change (for TagInput or other array inputs)\n  const handleArrayFieldChange = (key: string, value: string[]) => {\n    setFormData((prev: any) => ({\n      ...prev,\n      [key]: value\n    }))\n  }\n\n  // Video management functions\n  const handleAddVideo = () => {\n    setVideoItems([...videoItems, { url: '', description: '', descriptionEn: '', descriptionJa: '' }])\n  }\n\n  const handleRemoveVideo = (index: number) => {\n    setVideoItems(videoItems.filter((_, i) => i !== index))\n  }\n\n  const handleVideoUrlChange = (index: number, url: string) => {\n    const newVideoItems = [...videoItems]\n    if (newVideoItems[index]) {\n      newVideoItems[index].url = url\n      setVideoItems(newVideoItems)\n    }\n  }\n\n  const handleVideoDescriptionChange = (index: number, description: string, lang: 'ko' | 'en' | 'ja') => {\n    const newVideoItems = [...videoItems]\n    if (newVideoItems[index]) {\n      if (lang === 'ko') {\n        newVideoItems[index].description = description\n      } else if (lang === 'en') {\n        newVideoItems[index].descriptionEn = description\n      } else if (lang === 'ja') {\n        newVideoItems[index].descriptionJa = description\n      }\n      setVideoItems(newVideoItems)\n    }\n  }\n\n  // Prepare data for submission\n  const prepareDataForSubmit = (): any => {\n    // Extract video data\n    const videos = videoItems.map(item => item.url).filter(url => url.trim().length > 0)\n    const videoDescriptions = videoItems.map(item => item.description)\n    const videoDescriptionsEn = videoItems.map(item => item.descriptionEn)\n    const videoDescriptionsJa = videoItems.map(item => item.descriptionJa)\n    \n    // Validate video descriptions length\n    for (let i = 0; i < videoItems.length; i++) {\n      const item = videoItems[i]\n      if (item.description && item.description.length > 5000) {\n        throw new Error(`영상 ${i + 1}의 한국어 설명이 너무 깁니다 (현재: ${item.description.length}자, 최대: 5000자)`)\n      }\n      if (item.descriptionEn && item.descriptionEn.length > 5000) {\n        throw new Error(`영상 ${i + 1}의 영어 설명이 너무 깁니다 (현재: ${item.descriptionEn.length}자, 최대: 5000자)`)\n      }\n      if (item.descriptionJa && item.descriptionJa.length > 5000) {\n        throw new Error(`영상 ${i + 1}의 일본어 설명이 너무 깁니다 (현재: ${item.descriptionJa.length}자, 최대: 5000자)`)\n      }\n    }\n    \n    // Process all array fields\n    const processedData = {\n      ...formData,\n      // Technologies\n      technologies: typeof formData.technologies === 'string' \n        ? formData.technologies.split(/[,\\n]/).map((s: string) => s.trim()).filter((s: string) => s.length > 0)\n        : formData.technologies || [],\n      technologiesEn: typeof formData.technologiesEn === 'string'\n        ? formData.technologiesEn.split(/[,\\n]/).map((s: string) => s.trim()).filter((s: string) => s.length > 0)\n        : formData.technologiesEn || [],\n      technologiesJa: typeof formData.technologiesJa === 'string'\n        ? formData.technologiesJa.split(/[,\\n]/).map((s: string) => s.trim()).filter((s: string) => s.length > 0)\n        : formData.technologiesJa || [],\n      // Images\n      images: typeof formData.images === 'string' \n        ? formData.images.split('\\n').map((s: string) => s.trim()).filter((s: string) => s.length > 0)\n        : formData.images || [],\n      // Videos\n      videos,\n      videoDescriptions,\n      videoDescriptionsEn,\n      videoDescriptionsJa,\n      // Features\n      features: typeof formData.features === 'string' \n        ? formData.features.split('\\n').map((s: string) => s.trim()).filter((s: string) => s.length > 0)\n        : formData.features || [],\n      featuresEn: typeof formData.featuresEn === 'string'\n        ? formData.featuresEn.split('\\n').map((s: string) => s.trim()).filter((s: string) => s.length > 0)\n        : formData.featuresEn || [],\n      featuresJa: typeof formData.featuresJa === 'string'\n        ? formData.featuresJa.split('\\n').map((s: string) => s.trim()).filter((s: string) => s.length > 0)\n        : formData.featuresJa || [],\n      // Learnings\n      learnings: typeof formData.learnings === 'string' \n        ? formData.learnings.split('\\n').map((s: string) => s.trim()).filter((s: string) => s.length > 0)\n        : formData.learnings || [],\n      learningsEn: typeof formData.learningsEn === 'string'\n        ? formData.learningsEn.split('\\n').map((s: string) => s.trim()).filter((s: string) => s.length > 0)\n        : formData.learningsEn || [],\n      learningsJa: typeof formData.learningsJa === 'string'\n        ? formData.learningsJa.split('\\n').map((s: string) => s.trim()).filter((s: string) => s.length > 0)\n        : formData.learningsJa || [],\n      // SkillIds (already array)\n      skillIds: formData.skillIds || []\n    }\n    \n    return processedData\n  }\n\n  return {\n    formData,\n    videoItems,\n    currentLang,\n    setCurrentLang,\n    setFormData,\n    setVideoItems,\n    handleFieldChange,\n    handleArrayFieldChange,\n    handleVideoUrlChange,\n    handleVideoDescriptionChange,\n    handleAddVideo,\n    handleRemoveVideo,\n    prepareDataForSubmit\n  }\n}\n\n","import { useState, useEffect, useCallback } from 'react'\nimport { projectsAPI } from '../services/api'\nimport { Project } from '../types'\n\nexport const useProjectManagerData = () => {\n  const [projects, setProjects] = useState<Project[]>([])\n  const [isLoading, setIsLoading] = useState(false)\n\n  // Project 데이터만 가져오는 함수\n  const fetchProjects = useCallback(async () => {\n    setIsLoading(true)\n    try {\n      console.log('📥 프로젝트 목록 가져오기...')\n      const response = await projectsAPI.getAll()\n      const projectsData = response.data.data || []\n      console.log(`✅ ${projectsData.length}개 프로젝트 로드됨`)\n      console.log('📊 프로젝트 데이터:', projectsData)\n      setProjects(projectsData)\n    } catch (error) {\n      console.error('❌ Project 데이터 로드 실패:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }, [])\n\n  // Project 생성\n  const createProject = useCallback(async (projectData: any) => {\n    try {\n      console.log('➕ 프로젝트 생성 API 호출:', projectData)\n      const response = await projectsAPI.create(projectData)\n      console.log('✅ 서버 응답:', response.data)\n      console.log('🔄 프로젝트 목록 새로고침 시작...')\n      await fetchProjects() // 새로고침\n      console.log('✅ 프로젝트 목록 새로고침 완료')\n      return { success: true }\n    } catch (error) {\n      console.error('❌ Project 생성 실패:', error)\n      return { success: false, error }\n    }\n  }, [fetchProjects])\n\n  // Project 수정\n  const updateProject = useCallback(async (id: string, projectData: any) => {\n    try {\n      console.log('🔄 프로젝트 수정 API 호출:', { id, projectData })\n      const response = await projectsAPI.update(id, projectData)\n      console.log('✅ 서버 응답:', response.data)\n      console.log('🔄 프로젝트 목록 새로고침 시작...')\n      await fetchProjects() // 새로고침\n      console.log('✅ 프로젝트 목록 새로고침 완료')\n      return { success: true }\n    } catch (error) {\n      console.error('❌ Project 수정 실패:', error)\n      return { success: false, error }\n    }\n  }, [fetchProjects])\n\n  // Project 삭제\n  const deleteProject = useCallback(async (id: string) => {\n    try {\n      await projectsAPI.delete(id)\n      await fetchProjects() // 새로고침\n      return { success: true }\n    } catch (error) {\n      console.error('Project 삭제 실패:', error)\n      return { success: false, error }\n    }\n  }, [fetchProjects])\n\n  useEffect(() => {\n    fetchProjects()\n  }, [])\n\n  return {\n    projects,\n    isLoading,\n    fetchProjects,\n    createProject,\n    updateProject,\n    deleteProject\n  }\n}\n","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport { messagesAPI } from '../services/api'\nimport { ContactMessage } from '../types'\n\n// 💡 메시지 관련 쿼리 키 상수 - 모든 메시지 데이터 캐시의 기준점\nexport const MESSAGE_QUERY_KEY = 'adminMessages'\n\n// 🌟 메시지 목록 조회 (React Query)\nexport const useMessages = () => {\n  return useQuery<ContactMessage[], Error>({\n    queryKey: [MESSAGE_QUERY_KEY, 'list'],\n    queryFn: async () => {\n      const response = await messagesAPI.getAll()\n      return response.data.data || response.data || []\n    },\n    staleTime: 2 * 60 * 1000, // 2분 동안 캐시 유지\n    gcTime: 5 * 60 * 1000, // 5분 후 가비지 컬렉션\n  })\n}\n\n// 🌟 메시지 읽음 처리 (React Query Mutation)\nexport const useMarkMessageAsRead = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation<void, Error, string>({\n    mutationFn: (id: string) => messagesAPI.markAsRead(id),\n    onSuccess: () => {\n      // 💡 핵심: 메시지 관련 모든 쿼리 무효화 → 자동으로 다시 fetch\n      queryClient.invalidateQueries({ queryKey: [MESSAGE_QUERY_KEY] })\n      // 💡 데이터 카운트도 무효화하여 메시지 개수 업데이트\n      queryClient.invalidateQueries({ queryKey: ['dataCounts'] })\n    },\n  })\n}\n\n// 🌟 메시지 삭제 (React Query Mutation)\nexport const useDeleteMessage = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation<void, Error, string>({\n    mutationFn: (id: string) => messagesAPI.delete(id),\n    onSuccess: () => {\n      // 💡 핵심: 메시지 관련 모든 쿼리 무효화 → 자동으로 다시 fetch\n      queryClient.invalidateQueries({ queryKey: [MESSAGE_QUERY_KEY] })\n      // 💡 데이터 카운트도 무효화하여 메시지 개수 업데이트\n      queryClient.invalidateQueries({ queryKey: ['dataCounts'] })\n    },\n  })\n}\n\n// 🌟 일괄 읽음 처리 (React Query Mutation)\nexport const useBulkMarkAsRead = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation<void, Error, string[]>({\n    mutationFn: (ids: string[]) => Promise.all(ids.map(id => messagesAPI.markAsRead(id))).then(() => undefined),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [MESSAGE_QUERY_KEY] })\n      // 💡 데이터 카운트도 무효화하여 메시지 개수 업데이트\n      queryClient.invalidateQueries({ queryKey: ['dataCounts'] })\n    },\n  })\n}\n\n// 🌟 일괄 삭제 (React Query Mutation)\nexport const useBulkDeleteMessages = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation<void, Error, string[]>({\n    mutationFn: (ids: string[]) => Promise.all(ids.map(id => messagesAPI.delete(id))).then(() => undefined),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [MESSAGE_QUERY_KEY] })\n      // 💡 데이터 카운트도 무효화하여 메시지 개수 업데이트\n      queryClient.invalidateQueries({ queryKey: ['dataCounts'] })\n    },\n  })\n}\n\n// 🔄 기존 훅 호환성 유지 (기존 컴포넌트가 바로 사용할 수 있도록)\nexport const useMessageManagerData = () => {\n  const { data: messages = [], isLoading } = useMessages()\n  const markAsReadMutation = useMarkMessageAsRead()\n  const deleteMessageMutation = useDeleteMessage()\n  const bulkMarkAsReadMutation = useBulkMarkAsRead()\n  const bulkDeleteMutation = useBulkDeleteMessages()\n\n  const markAsRead = async (id: string) => {\n    try {\n      await markAsReadMutation.mutateAsync(id)\n      return { success: true }\n    } catch (error) {\n      console.error('Message 읽음 처리 실패:', error)\n      return { success: false, error }\n    }\n  }\n\n  const deleteMessage = async (id: string) => {\n    try {\n      await deleteMessageMutation.mutateAsync(id)\n      return { success: true }\n    } catch (error) {\n      console.error('Message 삭제 실패:', error)\n      return { success: false, error }\n    }\n  }\n\n  const bulkMarkAsRead = async (ids: string[]) => {\n    try {\n      await bulkMarkAsReadMutation.mutateAsync(ids)\n      return { success: true }\n    } catch (error) {\n      console.error('Message 일괄 읽음 처리 실패:', error)\n      return { success: false, error }\n    }\n  }\n\n  const bulkDelete = async (ids: string[]) => {\n    try {\n      await bulkDeleteMutation.mutateAsync(ids)\n      return { success: true }\n    } catch (error) {\n      console.error('Message 일괄 삭제 실패:', error)\n      return { success: false, error }\n    }\n  }\n\n  return {\n    messages,\n    isLoading,\n    fetchMessages: () => {}, // 더 이상 필요 없지만 호환성 유지\n    markAsRead,\n    deleteMessage,\n    bulkMarkAsRead,\n    bulkDelete\n  }\n}\n","import { useQuery } from '@tanstack/react-query'\nimport { messagesAPI } from '../services/api'\nimport { ContactMessage } from '../types'\nimport { MESSAGE_QUERY_KEY } from './useMessageManagerData'\n\ninterface UseMessageDetailOptions {\n  enabled?: boolean\n  staleTime?: number\n}\n\nexport function useMessageDetail(\n  messageId: string | undefined,\n  options: UseMessageDetailOptions = {}\n) {\n  const { enabled = true, staleTime = 5 * 60 * 1000 } = options\n\n  return useQuery({\n    queryKey: [MESSAGE_QUERY_KEY, 'detail', messageId], // 💡 통일된 쿼리 키 사용\n    queryFn: async () => {\n      if (!messageId) return null\n      const response = await messagesAPI.getById(messageId)\n      return response.data.data\n    },\n    enabled: !!messageId && enabled,\n    staleTime, // 5분 동안 캐시된 데이터 사용\n    gcTime: 10 * 60 * 1000, // 10분 후 가비지 컬렉션\n    retry: 2, // 실패 시 2번 재시도\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000), // 지수 백오프\n    refetchOnWindowFocus: false, // 창 포커스 시 자동 리페치 비활성화\n    select: (data): ContactMessage | null => {\n      // 데이터 변환 로직 (필요시)\n      return data || null\n    }\n  })\n}\n\n// 메시지 목록과 상세 정보를 함께 관리하는 복합 훅\nexport function useMessageWithDetail(messageId: string | undefined) {\n  const messageDetailQuery = useMessageDetail(messageId)\n  \n  return {\n    message: messageDetailQuery.data,\n    isLoading: messageDetailQuery.isLoading,\n    isError: messageDetailQuery.isError,\n    error: messageDetailQuery.error,\n    refetch: messageDetailQuery.refetch,\n    isFetching: messageDetailQuery.isFetching,\n    isStale: messageDetailQuery.isStale\n  }\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { skillsAPI } from '@/services/api'\nimport { SkillCategory, SkillFormData, SkillCategoryFormData } from '@/types'\n\n// useSkills.ts와 동일한 캐시 키\nconst SKILLS_QUERY_KEY = ['skillCategories']\n\n// =================================================================\n// 🌟 1. 스킬 업데이트 (핵심 문제 해결)\n// =================================================================\n\nexport const useUpdateSkillMutation = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation<any, Error, { id: string; data: SkillFormData }>({\n    mutationFn: async ({ id, data }) => {\n      // 서버에 저장\n      const response = await skillsAPI.update(id, data)\n      return response.data?.data || response.data\n    },\n    \n    // 🚀 낙관적 업데이트\n    onMutate: async ({ id, data }) => {\n      // 1. 진행 중인 쿼리 취소 (경쟁 조건 방지)\n      await queryClient.cancelQueries({ queryKey: SKILLS_QUERY_KEY })\n      \n      // 2. 이전 캐시 백업 (롤백용)\n      const previousCategories = queryClient.getQueryData<SkillCategory[]>(SKILLS_QUERY_KEY)\n\n      // 3. 캐시를 낙관적으로 업데이트\n      queryClient.setQueryData<SkillCategory[]>(SKILLS_QUERY_KEY, (oldCategories) => {\n        if (!oldCategories) return previousCategories\n        return oldCategories.map(category => ({\n          ...category,\n          skills: category.skills?.map(skill => \n            skill._id === id \n              ? { ...skill, ...data, updatedAt: new Date().toISOString() } // 🌟 병합\n              : skill\n          ) || []\n        }))\n      })\n      \n      // 4. 롤백에 사용할 Context 반환\n      return { previousCategories }\n    },\n\n    // ✅ 에러 시 롤백\n    onError: (err, variables, context: any) => {\n      console.error(\"❌ 스킬 업데이트 실패 - 롤백 실행:\", err)\n      if (context?.previousCategories) {\n        queryClient.setQueryData(SKILLS_QUERY_KEY, context.previousCategories)\n      }\n    },\n\n    // 🌟 onSettled 제거: 슬라이더 드래그 중 invalidateQueries 호출 방지\n    // 낙관적 업데이트만으로도 충분하며, 페이지 새로고침 시에만 서버 데이터 동기화\n  })\n}\n\n// =================================================================\n// 🌟 2. 스킬 카테고리 생성\n// =================================================================\n\nexport const useCreateSkillCategoryMutation = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation<any, Error, SkillCategoryFormData>({\n    mutationFn: async (data) => {\n      const response = await skillsAPI.createCategory(data)\n      return response.data?.data || response.data\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: SKILLS_QUERY_KEY })\n    },\n  })\n}\n\n// =================================================================\n// 🌟 3. 스킬 카테고리 수정\n// =================================================================\n\nexport const useUpdateSkillCategoryMutation = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation<any, Error, { id: string; data: SkillCategoryFormData }>({\n    mutationFn: async ({ id, data }) => {\n      const response = await skillsAPI.updateCategory(id, data)\n      return response.data?.data || response.data\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: SKILLS_QUERY_KEY })\n    },\n  })\n}\n\n// =================================================================\n// 🌟 4. 스킬 카테고리 삭제\n// =================================================================\n\nexport const useDeleteSkillCategoryMutation = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation<any, Error, string>({\n    mutationFn: async (id) => {\n      await skillsAPI.deleteCategory(id)\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: SKILLS_QUERY_KEY })\n    },\n  })\n}\n\n// =================================================================\n// 🌟 5. 스킬 생성\n// =================================================================\n\nexport const useCreateSkillMutation = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation<any, Error, { categoryId: string; data: SkillFormData }>({\n    mutationFn: async ({ categoryId, data }) => {\n      const response = await skillsAPI.create(categoryId, data)\n      return response.data?.data || response.data\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: SKILLS_QUERY_KEY })\n    },\n  })\n}\n\n// =================================================================\n// 🌟 6. 스킬 삭제\n// =================================================================\n\nexport const useDeleteSkillMutation = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation<any, Error, string>({\n    mutationFn: async (id) => {\n      await skillsAPI.delete(id)\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: SKILLS_QUERY_KEY })\n    },\n  })\n}\n\n","import { useSkills } from './useSkills'\nimport { SkillFormData, SkillCategoryFormData } from '../types'\nimport { \n  useUpdateSkillMutation,\n  useCreateSkillCategoryMutation,\n  useUpdateSkillCategoryMutation,\n  useDeleteSkillCategoryMutation,\n  useCreateSkillMutation,\n  useDeleteSkillMutation\n} from './useSkillMutations'\n\n/**\n * 🌟 React Query 기반 스킬 관리 훅\n * \n * 주요 개선사항:\n * 1. useState → React Query Cache (단일 데이터 소스)\n * 2. useEffect → useQuery (자동 캐싱 및 동기화)\n * 3. 낙관적 업데이트로 즉각적인 UI 반응\n * 4. 에러 시 자동 롤백\n */\nexport const useSkillsManagerData = () => {\n  // 🌟 1. 데이터 조회: useSkills 훅에서 글로벌 캐시 데이터 가져오기\n  const { \n    skillCategories, \n    loading: isLoading, \n    refetch: fetchSkillCategories \n  } = useSkills()\n\n  // 🌟 2. 뮤테이션 훅 초기화\n  const updateSkillMutation = useUpdateSkillMutation()\n  const createCategoryMutation = useCreateSkillCategoryMutation()\n  const updateCategoryMutation = useUpdateSkillCategoryMutation()\n  const deleteCategoryMutation = useDeleteSkillCategoryMutation()\n  const createSkillMutation = useCreateSkillMutation()\n  const deleteSkillMutation = useDeleteSkillMutation()\n\n  // 🌟 3. updateSkill 함수를 useMutation으로 대체\n  const updateSkill = async (id: string, data: SkillFormData) => {\n    try {\n      const result = await updateSkillMutation.mutateAsync({ id, data })\n      return { success: true, data: result }\n    } catch (error) {\n      console.error('스킬 수정 실패:', error)\n      return { success: false, error }\n    }\n  }\n\n  // 🌟 4. 기타 CRUD 함수를 useMutation으로 대체\n  const createSkillCategory = async (data: SkillCategoryFormData) => {\n    try {\n      const result = await createCategoryMutation.mutateAsync(data)\n      return { success: true, data: result }\n    } catch (error) {\n      console.error('스킬 카테고리 생성 실패:', error)\n      return { success: false, error }\n    }\n  }\n\n  const updateSkillCategory = async (id: string, data: SkillCategoryFormData) => {\n    try {\n      const result = await updateCategoryMutation.mutateAsync({ id, data })\n      return { success: true, data: result }\n    } catch (error) {\n      console.error('스킬 카테고리 수정 실패:', error)\n      return { success: false, error }\n    }\n  }\n\n  const deleteSkillCategory = async (id: string) => {\n    try {\n      await deleteCategoryMutation.mutateAsync(id)\n      return { success: true }\n    } catch (error) {\n      console.error('스킬 카테고리 삭제 실패:', error)\n      return { success: false, error }\n    }\n  }\n\n  const createSkill = async (categoryId: string, data: SkillFormData) => {\n    try {\n      const result = await createSkillMutation.mutateAsync({ categoryId, data })\n      return { success: true, data: result }\n    } catch (error) {\n      console.error('스킬 생성 실패:', error)\n      return { success: false, error }\n    }\n  }\n\n  const deleteSkill = async (id: string) => {\n    try {\n      await deleteSkillMutation.mutateAsync(id)\n      return { success: true }\n    } catch (error) {\n      console.error('스킬 삭제 실패:', error)\n      return { success: false, error }\n    }\n  }\n\n  return { \n    skillCategories, \n    isLoading, \n    fetchSkillCategories,\n    createSkillCategory,\n    updateSkillCategory,\n    deleteSkillCategory,\n    createSkill,\n    updateSkill,\n    deleteSkill\n  }\n}\n","import { useState, useEffect, useCallback } from 'react'\nimport { SiteSettings } from '@/types'\nimport { AdminLanguage } from '@/components/common/LanguageTabs'\nimport { settingsAPI } from '@/services/api'\nimport { useSiteSettings } from '@/hooks/useSiteSettings'\nimport { MessageType } from '../types'\nimport { initialSettings } from '../constants'\nimport { getFilteredSections } from '../utils'\n\n/**\n * Custom hook for managing settings form state and business logic\n * @param activeSection - Optional section filter ('general', 'appearance', etc.)\n */\nexport const useSettingsForm = (activeSection: string | null = null) => {\n  const { refetchSettings } = useSiteSettings()\n  const [settings, setSettings] = useState<SiteSettings>(initialSettings)\n  const [loading, setLoading] = useState(true)\n  const [saving, setSaving] = useState(false)\n  const [message, setMessage] = useState<MessageType | null>(null)\n  const [expandedSections, setExpandedSections] = useState<Set<string>>(\n    new Set(['개인 정보', '소셜 링크'])\n  )\n  const [currentLang, setCurrentLang] = useState<AdminLanguage>('ko')\n\n  /**\n   * Normalize settings data, ensuring number fields are properly typed\n   */\n  const normalizeSettings = (data: any): SiteSettings => {\n    const normalized = { ...initialSettings, ...data }\n    \n    // Ensure number fields are numbers, not strings\n    if (normalized.sidebarSkillCount) {\n      normalized.sidebarSkillCount = typeof normalized.sidebarSkillCount === 'number' \n        ? normalized.sidebarSkillCount \n        : parseInt(String(normalized.sidebarSkillCount)) || 4\n    }\n    if (normalized.languageCardSkillCount) {\n      normalized.languageCardSkillCount = typeof normalized.languageCardSkillCount === 'number'\n        ? normalized.languageCardSkillCount\n        : parseInt(String(normalized.languageCardSkillCount)) || 3\n    }\n\n    return normalized\n  }\n\n  /**\n   * Fetch settings from API\n   */\n  const fetchSettings = useCallback(async () => {\n    try {\n      const response = await settingsAPI.get()\n      const normalizedData = normalizeSettings(response.data)\n      setSettings(normalizedData)\n    } catch (error) {\n      console.error('Failed to fetch settings:', error)\n      setMessage({ \n        type: 'error', \n        text: '설정을 불러오는데 실패했습니다. 기본 값으로 표시됩니다.' \n      })\n    } finally {\n      setLoading(false)\n    }\n  }, [])\n\n  /**\n   * Save settings to API\n   */\n  const handleSave = async () => {\n    setSaving(true)\n    setMessage(null)\n\n    try {\n      await settingsAPI.update(settings)\n      await refetchSettings()\n      \n      setMessage({ \n        type: 'success', \n        text: '✅ 설정이 성공적으로 저장되었습니다! 화면이 업데이트됩니다.' \n      })\n      \n      // Auto-hide message after 5 seconds\n      setTimeout(() => setMessage(null), 5000)\n    } catch (error) {\n      console.error('Failed to save settings:', error)\n      setMessage({ \n        type: 'error', \n        text: '❌ 설정 저장에 실패했습니다. 콘솔을 확인해주세요.' \n      })\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  /**\n   * Update a single field value\n   */\n  const handleChange = (field: keyof SiteSettings, value: string | boolean | string[] | number) => {\n    setSettings(prevSettings => ({ ...prevSettings, [field]: value }))\n  }\n\n  /**\n   * Toggle section expand/collapse state\n   */\n  const toggleSection = (sectionTitle: string) => {\n    setExpandedSections(prev => {\n      const newSet = new Set(prev)\n      if (newSet.has(sectionTitle)) {\n        newSet.delete(sectionTitle)\n      } else {\n        newSet.add(sectionTitle)\n      }\n      return newSet\n    })\n  }\n\n  // Initial fetch on mount\n  useEffect(() => {\n    fetchSettings()\n  }, [fetchSettings])\n\n  // Auto-expand sections based on activeSection\n  useEffect(() => {\n    if (activeSection) {\n      if (activeSection === 'appearance') {\n        // Start with all sections collapsed for appearance\n        setExpandedSections(new Set())\n      } else {\n        // Expand all filtered sections for other categories\n        const filteredSections = getFilteredSections(activeSection)\n        const sectionTitles = filteredSections.map(section => section.title)\n        setExpandedSections(new Set(sectionTitles))\n      }\n    } else {\n      // Default expanded sections\n      setExpandedSections(new Set(['개인 정보', '소셜 링크']))\n    }\n  }, [activeSection])\n\n  return {\n    settings,\n    loading,\n    saving,\n    message,\n    expandedSections,\n    currentLang,\n    setCurrentLang,\n    handleChange,\n    handleSave,\n    toggleSection,\n    setExpandedSections\n  }\n}\n\n","import { useQuery, useQueryClient } from '@tanstack/react-query'\nimport { booksAPI, videoLearningsAPI, videoPlaylistsAPI, experiencesAPI, projectsAPI, messagesAPI, skillsAPI, categoriesAPI } from '../services/api'\nimport { MESSAGE_QUERY_KEY } from './useMessageManagerData'\n\ninterface DataCounts {\n  books: number\n  videoLearnings: number\n  videoPlaylists: number\n  experiences: number\n  projects: number\n  messages: number\n  skills: number\n  categories: number\n}\n\n// 🌟 React Query를 사용한 데이터 카운트 조회\nexport const useDataCounts = () => {\n  const queryClient = useQueryClient()\n  \n  const { data: counts, isLoading } = useQuery<DataCounts, Error>({\n    queryKey: ['dataCounts'], // 💡 독립적인 쿼리 키\n    queryFn: async () => {\n      // 실제로는 각 API에서 데이터 개수만 반환하는 전용 엔드포인트를 호출하는 것이 효율적\n      // 현재는 기존 API를 사용하여 데이터를 가져온 후 length를 계산\n      const [booksResponse, videoLearningsResponse, videoPlaylistsResponse, experiencesResponse, projectsResponse, messagesResponse, skillsResponse, categoriesResponse] = await Promise.all([\n        booksAPI.getAll(),\n        videoLearningsAPI.getAll(),\n        videoPlaylistsAPI.getAll(),\n        experiencesAPI.getAll(),\n        projectsAPI.getAll(),\n        messagesAPI.getAll(), // 💡 메시지도 직접 조회\n        skillsAPI.getCategories(),\n        categoriesAPI.getAll()\n      ])\n      \n      return {\n        books: booksResponse.data?.data?.length || booksResponse.data?.length || 0,\n        videoLearnings: videoLearningsResponse.data?.data?.length || videoLearningsResponse.data?.length || 0,\n        videoPlaylists: videoPlaylistsResponse.data?.data?.length || videoPlaylistsResponse.data?.length || 0,\n        experiences: experiencesResponse.data?.data?.length || experiencesResponse.data?.length || 0,\n        projects: projectsResponse.data?.data?.length || projectsResponse.data?.length || 0,\n        messages: messagesResponse.data?.data?.length || messagesResponse.data?.length || 0, // 💡 메시지 API 응답에서 길이 계산\n        skills: skillsResponse.data?.data?.length || skillsResponse.data?.length || 0,\n        categories: categoriesResponse.data?.length || 0,\n      }\n    },\n    staleTime: 2 * 60 * 1000, // 2분 동안 캐시 유지\n    gcTime: 5 * 60 * 1000, // 5분 후 가비지 컬렉션\n    refetchOnWindowFocus: true, // 창 포커스 시 자동 새로고침 (데이터 동기화)\n  })\n\n  return { \n    counts: counts || {\n      books: 0,\n      videoLearnings: 0,\n      videoPlaylists: 0,\n      experiences: 0,\n      projects: 0,\n      messages: 0,\n      skills: 0,\n      categories: 0,\n    }, \n    isLoading,\n    refreshCounts: () => {} // 더 이상 필요 없지만 호환성 유지\n  }\n}\n\nexport default useDataCounts\n","import { useState } from 'react'\n\n// 탭 타입 정의\nexport type AdminTab = 'settings' | 'books' | 'videoLearnings' | 'videoPlaylists' | 'experiences' | 'projects' | 'messages' | 'skills' | 'categories'\n\n// 필터 타입들\nexport type BookFilter = 'all' | 'five-star' | 'category'\nexport type ExperienceFilter = 'all' | 'company' | 'year'\nexport type ProjectFilter = 'all' | 'category' | 'featured'\n\n// 필터 그룹 인터페이스들\nexport interface BookFilterGroup {\n  state: {\n    filter: BookFilter\n    searchTerm: string\n    selectedCategory: string\n  }\n  actions: {\n    setFilter: (filter: BookFilter) => void\n    setSearchTerm: (term: string) => void\n    setSelectedCategory: (category: string) => void\n  }\n  data: {\n    categories: string[]\n  }\n}\n\nexport interface ExperienceFilterGroup {\n  state: {\n    filter: ExperienceFilter\n    searchTerm: string\n    selectedCompany: string\n    selectedYear: string\n  }\n  actions: {\n    setFilter: (filter: ExperienceFilter) => void\n    setSearchTerm: (term: string) => void\n    setSelectedCompany: (company: string) => void\n    setSelectedYear: (year: string) => void\n  }\n  data: {\n    companies: string[]\n    years: string[]\n  }\n}\n\nexport interface ProjectFilterGroup {\n  state: {\n    filter: ProjectFilter\n    searchTerm: string\n    selectedCategory: string\n  }\n  actions: {\n    setFilter: (filter: ProjectFilter) => void\n    setSearchTerm: (term: string) => void\n    setSelectedCategory: (category: string) => void\n  }\n  data: {\n    categories: string[]\n  }\n}\n\nexport const useAdminSidebarState = () => {\n  // 탭 및 설정 섹션 상태\n  const [activeTab, setActiveTab] = useState<AdminTab>('settings')\n  const [activeSettingsSection, setActiveSettingsSection] = useState<string | null>(null)\n\n  // 서적 필터 상태\n  const [bookFilter, setBookFilter] = useState<BookFilter>('all')\n  const [bookSearchTerm, setBookSearchTerm] = useState('')\n  const [selectedBookCategory, setSelectedBookCategory] = useState('')\n\n  // 경력 필터 상태\n  const [experienceFilter, setExperienceFilter] = useState<ExperienceFilter>('all')\n  const [experienceSearchTerm, setExperienceSearchTerm] = useState('')\n  const [selectedExperienceCompany, setSelectedExperienceCompany] = useState('')\n  const [selectedExperienceYear, setSelectedExperienceYear] = useState('')\n\n  // 프로젝트 필터 상태\n  const [projectFilter, setProjectFilter] = useState<ProjectFilter>('all')\n  const [projectSearchTerm, setProjectSearchTerm] = useState('')\n  const [selectedProjectCategory, setSelectedProjectCategory] = useState('')\n\n  // 더미 데이터 (실제로는 API에서 가져와야 함)\n  const bookCategories = ['프로그래밍', '데이터베이스', '웹 개발', 'AI/ML', '시스템 설계']\n  const experienceCompanies = ['ABC Corp', 'XYZ Inc', 'Dev Solutions', 'Tech Startup']\n  const experienceYears = ['2024', '2023', '2022', '2021', '2020']\n  const projectCategories = ['웹 개발', '모바일 앱', '데이터 분석', '임베디드', 'AI/ML']\n\n  return {\n    // 탭 관련 상태와 액션\n    activeTab,\n    setActiveTab,\n    activeSettingsSection,\n    setActiveSettingsSection,\n\n    // 서적 필터 관련 상태와 액션을 하나의 객체로 묶어서 반환\n    bookFilters: {\n      state: {\n        filter: bookFilter,\n        searchTerm: bookSearchTerm,\n        selectedCategory: selectedBookCategory,\n      },\n      actions: {\n        setFilter: setBookFilter,\n        setSearchTerm: setBookSearchTerm,\n        setSelectedCategory: setSelectedBookCategory,\n      },\n      data: {\n        categories: bookCategories,\n      },\n    } as BookFilterGroup,\n\n    // 경력 필터 관련 상태와 액션을 하나의 객체로 묶어서 반환\n    experienceFilters: {\n      state: {\n        filter: experienceFilter,\n        searchTerm: experienceSearchTerm,\n        selectedCompany: selectedExperienceCompany,\n        selectedYear: selectedExperienceYear,\n      },\n      actions: {\n        setFilter: setExperienceFilter,\n        setSearchTerm: setExperienceSearchTerm,\n        setSelectedCompany: setSelectedExperienceCompany,\n        setSelectedYear: setSelectedExperienceYear,\n      },\n      data: {\n        companies: experienceCompanies,\n        years: experienceYears,\n      },\n    } as ExperienceFilterGroup,\n\n    // 프로젝트 필터 관련 상태와 액션을 하나의 객체로 묶어서 반환\n    projectFilters: {\n      state: {\n        filter: projectFilter,\n        searchTerm: projectSearchTerm,\n        selectedCategory: selectedProjectCategory,\n      },\n      actions: {\n        setFilter: setProjectFilter,\n        setSearchTerm: setProjectSearchTerm,\n        setSelectedCategory: setSelectedProjectCategory,\n      },\n      data: {\n        categories: projectCategories,\n      },\n    } as ProjectFilterGroup,\n  }\n}\n"],"names":["AuthContext","createContext","AuthProvider","children","user","setUser","useState","isLoading","setIsLoading","useEffect","async","response","authAPI","verify","data","error","login","useCallback","username","password","Error","_b","_a","message","logout","value","useMemo","isAuthenticated","jsx","Provider","useAuth","context","useContext","INITIAL_SETTINGS","fullName","firstName","role","subtitle","location","education","yearsOfExperience","email","phone","githubUrl","linkedinUrl","heroTitle","heroSubtitle","heroTag","heroCtaLink1","heroCtaLink2","aboutTitle","aboutSubtitle","aboutDescription1","aboutDescription2","skillsTitle","skillsSubtitle","projectsTitle","projectsSubtitle","projectsUpdateTitle","projectsUpdateDescription","projectsUpdateTechList","booksTitle","booksSubtitle","contactTitle","contactSubtitle","experienceTitle","experienceSubtitle","learningGoalsTitle","learningGoalsDescription","learningGoalsList","stat1Number","stat1Label","stat2Number","stat2Label","stat3Number","stat3Label","mainSkills","SiteSettingsContext","SiteSettingsProvider","settings","setSettings","loading","setLoading","setError","fetchSettings","settingsAPI","get","mergedSettings","err","refetchSettings","useSiteSettings","SECTION_IDS","DEFAULT_OPTIONS","offset","debounceDelay","useScrollSpy","options","activeSection","setActiveSection","timeoutRef","useRef","handleScroll","activationPoint","window","scrollY","newActiveSection","sectionId","element","document","getElementById","offsetTop","debouncedHandleScroll","func","delay","timeoutId","args","clearTimeout","setTimeout","debounce","addEventListener","passive","removeEventListener","current","scrollToSection","elementTop","scrollTo","top","behavior","useSidebarSkills","coreSkills","setCoreSkills","languageSkills","setLanguageSkills","isLoadingSkills","setIsLoadingSkills","siteSettings","fetchSkills","allSkills","skillsAPI","getAll","sidebarSkills","filter","skill","showInSidebar","sort","a","b","order","slice","sidebarSkillCount","length","level","langSkills","showInLanguageCard","languageCardSkillCount","BOOK_QUERY_KEY","useBooks","useQuery","queryKey","queryFn","booksAPI","staleTime","gcTime","useBook","bookId","getById","enabled","useDeleteBook","queryClient","useQueryClient","useMutation","mutationFn","id","delete","onSuccess","invalidateQueries","CATEGORIES_QUERY_KEY","useCategories","categoriesAPI","useCategoryUsage","getUsage","useCategoryManagerData","categories","createMutation","create","useCreateCategory","updateMutation","update","useUpdateCategory","deleteMutation","useDeleteCategory","createCategory","mutateAsync","success","updateCategory","deleteCategory","useLearningManager","editingLearningId","setEditingLearningId","editingChapterId","setEditingChapterId","currentFormData","setCurrentFormData","topic","content","showAddForm","setShowAddForm","apiError","setApiError","learningsAPI","createForBook","useCreateLearning","learningId","updateForBook","useUpdateLearning","deleteForBook","useDeleteLearning","updateSkillsMutation","skillIds","updateSkills","useUpdateLearningSkills","isSaving","isPending","resetFormState","handleCancelEdit","learningApiError","handleToggleAddForm","prev","handleAddLearning","handleDeleteLearning","chapterId","confirm","deleteForChapter","handleStartEdit","learning","_id","handleSaveEdit","updateForChapter","handleSkillLinkChange","skillId","isLinked","chaptersQueryKey","previousBook","getQueryData","previousChapters","newSkillIds","currentLearning","flatMap","c","learnings","find","l","currentSkillIds","Array","from","Set","setQueryData","oldChapters","map","chapter","oldBook","chapters","fetchSkillCategories","getCategories","useSkills","skillCategories","refetch","cacheTime","VIDEO_LEARNING_QUERY_KEY","useVideoLearnings","videoLearningsAPI","useVideoLearning","useUpdateVideoLearning","_","variables","useDeleteVideoLearning","useVideoLearningManagerData","videoLearnings","isError","useCreateVideoLearning","createVideoLearning","updateVideoLearning","deleteVideoLearning","useVideoPlaylists","videoPlaylistsAPI","useVideoPlaylist","usePlaylistVideos","playlistId","playlistVideosAPI","getByPlaylist","useDeleteVideoPlaylist","useCreatePlaylistVideo","useUpdatePlaylistVideo","useDeletePlaylistVideo","useVideoPlaylistManagerData","playlists","useCreateVideoPlaylist","useUpdateVideoPlaylist","createPlaylist","updatePlaylist","deletePlaylist","useToastHelpers","showToast","rest","toasts","setToasts","toast","Math","random","toString","substr","newToast","duration","hideToast","clearAllToasts","useToast","title","type","warning","info","fetchProjects","projectsAPI","useProjects","projects","useProjectDetail","currentLang","project","setProject","localizedProject","getLocalizedField","titleEn","titleJa","description","descriptionEn","descriptionJa","detailedDescription","detailedDescriptionEn","detailedDescriptionJa","technologies","getLocalizedArrayField","technologiesEn","technologiesJa","features","featuresEn","featuresJa","learningsEn","learningsJa","videoDescriptions","videoDescriptionsEn","videoDescriptionsJa","linkedSkills","category","skills","skillIdSet","has","name","getLocalizedSkillName","getLocalizedSkillDescription","levelText","fetchExperiences","createdAt","Date","getTime","transformExperiences","experiencesAPI","useExperiences","experiences","useAbortController","abortControllerRef","createAbortController","abort","AbortController","getAbortController","signal","useOptimisticArrayUpdate","initialData","isOptimistic","optimisticUpdate","updateData","resetData","setData","setIsOptimistic","previousDataRef","onError","onRollback","optimisticData","apiCall","result","newData","useOptimisticUpdate","optimisticAdd","newItem","now","item","startsWith","optimisticUpdateItem","updates","optimisticDelete","optimisticReorder","reorderedItems","useBookManagerData","showError","books","fetchBooks","abortController","aborted","includes","errorMessage","createBook","bookData","newBook","toISOString","updatedAt","then","res","updateBook","deleteBook","useCRUDManager","onSave","onDelete","showForm","setShowForm","editingItem","setEditingItem","setIsSaving","isDeleting","setIsDeleting","handleCreate","handleEdit","handleCancel","handleSave","handleDelete","useExperienceManagerData","setExperiences","createExperience","experienceData","updateExperience","deleteExperience","useProjectForm","setCurrentLang","initialCategoryIds","categoryIds","catIdOrObj","Boolean","initialSkillIds","skillIdOrObj","videoItems","setVideoItems","videos","isArray","url","index","_c","formData","setFormData","join","images","status","githubLink","liveLink","image","handleFieldChange","key","handleArrayFieldChange","handleVideoUrlChange","newVideoItems","handleVideoDescriptionChange","lang","handleAddVideo","handleRemoveVideo","i","prepareDataForSubmit","trim","split","s","useProjectManagerData","setProjects","projectsData","createProject","projectData","updateProject","deleteProject","MESSAGE_QUERY_KEY","useMessages","messagesAPI","useMessageManagerData","messages","markAsReadMutation","markAsRead","useMarkMessageAsRead","deleteMessageMutation","useDeleteMessage","bulkMarkAsReadMutation","ids","Promise","all","useBulkMarkAsRead","bulkDeleteMutation","useBulkDeleteMessages","fetchMessages","deleteMessage","bulkMarkAsRead","bulkDelete","useMessageDetail","messageId","retry","retryDelay","attemptIndex","min","refetchOnWindowFocus","select","SKILLS_QUERY_KEY","useSkillsManagerData","updateSkillMutation","onMutate","cancelQueries","previousCategories","oldCategories","useUpdateSkillMutation","createCategoryMutation","useCreateSkillCategoryMutation","updateCategoryMutation","useUpdateSkillCategoryMutation","deleteCategoryMutation","useDeleteSkillCategoryMutation","createSkillMutation","categoryId","useCreateSkillMutation","deleteSkillMutation","useDeleteSkillMutation","createSkillCategory","updateSkillCategory","deleteSkillCategory","createSkill","updateSkill","deleteSkill","useSettingsForm","initialSettings","saving","setSaving","setMessage","expandedSections","setExpandedSections","normalizedData","normalized","parseInt","String","normalizeSettings","text","sectionTitles","getFilteredSections","section","handleChange","field","prevSettings","toggleSection","sectionTitle","newSet","add","useDataCounts","counts","booksResponse","videoLearningsResponse","videoPlaylistsResponse","experiencesResponse","projectsResponse","messagesResponse","skillsResponse","categoriesResponse","_e","_d","_f","videoPlaylists","_h","_g","_i","_k","_j","_l","_n","_m","_o","_q","_p","_r","_t","_s","_u","_v","refreshCounts","useAdminSidebarState","activeTab","setActiveTab","activeSettingsSection","setActiveSettingsSection","bookFilter","setBookFilter","bookSearchTerm","setBookSearchTerm","selectedBookCategory","setSelectedBookCategory","experienceFilter","setExperienceFilter","experienceSearchTerm","setExperienceSearchTerm","selectedExperienceCompany","setSelectedExperienceCompany","selectedExperienceYear","setSelectedExperienceYear","projectFilter","setProjectFilter","projectSearchTerm","setProjectSearchTerm","selectedProjectCategory","setSelectedProjectCategory","bookFilters","state","searchTerm","selectedCategory","actions","setFilter","setSearchTerm","setSelectedCategory","experienceFilters","selectedCompany","selectedYear","setSelectedCompany","setSelectedYear","companies","years","projectFilters"],"mappings":"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"}