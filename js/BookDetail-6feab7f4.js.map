{"version":3,"file":"BookDetail-6feab7f4.js","sources":["../../src/hooks/useLearningManager.ts","../../src/utils/textUtils.ts","../../src/components/common/LearningItem.tsx","../../src/components/BookDetail.tsx"],"sourcesContent":["import { useState } from 'react'\r\nimport { useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { learningsAPI } from '../services/api'\r\nimport { Learning, LearningFormData, Book, Chapter } from '../types'\r\nimport { BOOK_QUERY_KEY } from './useBooks'\r\n\r\n/**\r\n * 🌟 React Query 기반 학습 내용(Learning) 관리 훅\r\n * \r\n * 주요 개선사항:\r\n * 1. React Query Mutation 사용으로 캐시 자동 관리\r\n * 2. 서적 상세 정보 캐시 무효화로 실시간 업데이트\r\n * 3. 데이터 카운트 자동 동기화\r\n * 4. 스킬 연결/해제 낙관적 업데이트\r\n */\r\n\r\n// =================================================================\r\n// ✏️ 학습 내용 생성 (React Query Mutation)\r\n// =================================================================\r\n\r\nexport const useCreateLearning = (bookId: string) => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<Learning, Error, LearningFormData>({\r\n    mutationFn: async (data: LearningFormData) => {\r\n      const response = await learningsAPI.createForBook(bookId, data)\r\n      return response.data\r\n    },\r\n    onSuccess: () => {\r\n      // 💡 해당 서적 상세 캐시 무효화 → BookDetail 자동 업데이트\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', bookId] })\r\n      // 💡 서적 목록도 무효화 (learnings 배열이 포함될 수 있음)\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\r\n      // 💡 목차(chapters) 캐시도 무효화\r\n      queryClient.invalidateQueries({ queryKey: ['chapters', bookId] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 🔄 학습 내용 수정 (React Query Mutation)\r\n// =================================================================\r\n\r\nexport const useUpdateLearning = (bookId: string) => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<Learning, Error, { learningId: string; data: LearningFormData }>({\r\n    mutationFn: async ({ learningId, data }) => {\r\n      const response = await learningsAPI.updateForBook(bookId, learningId, data)\r\n      return response.data\r\n    },\r\n    onSuccess: () => {\r\n      // 💡 해당 서적 상세 캐시 무효화\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', bookId] })\r\n      // 💡 서적 목록도 무효화\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\r\n      // 💡 목차(chapters) 캐시도 무효화\r\n      queryClient.invalidateQueries({ queryKey: ['chapters', bookId] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 🗑️ 학습 내용 삭제 (React Query Mutation)\r\n// =================================================================\r\n\r\nexport const useDeleteLearning = (bookId: string) => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<void, Error, string>({\r\n    mutationFn: async (learningId: string) => {\r\n      await learningsAPI.deleteForBook(bookId, learningId)\r\n    },\r\n    onSuccess: () => {\r\n      // 💡 해당 서적 상세 캐시 무효화\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', bookId] })\r\n      // 💡 서적 목록도 무효화\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\r\n      // 💡 목차(chapters) 캐시도 무효화\r\n      queryClient.invalidateQueries({ queryKey: ['chapters', bookId] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 🔗 학습 내용 스킬 업데이트 (React Query Mutation)\r\n// =================================================================\r\n\r\nexport const useUpdateLearningSkills = (bookId: string) => {\r\n  const queryClient = useQueryClient()\r\n\r\n  return useMutation<Learning, Error, { learningId: string; skillIds: string[] }>({\r\n    mutationFn: async ({ learningId, skillIds }) => {\r\n      // 💡 learningsAPI.updateSkills 함수 사용\r\n      const response = await learningsAPI.updateSkills(bookId, learningId, skillIds)\r\n      return response.data\r\n    },\r\n    onSuccess: () => {\r\n      // 스킬 업데이트 성공 시, Book Detail 캐시를 무효화하여 모든 UI를 새로고침\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', bookId] })\r\n      // 서적 목록도 무효화\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'list'] })\r\n      // 목차(chapters) 캐시도 무효화\r\n      queryClient.invalidateQueries({ queryKey: ['chapters', bookId] })\r\n    },\r\n  })\r\n}\r\n\r\n// =================================================================\r\n// 🔄 기존 훅 호환성 유지 (useLearningManager)\r\n// =================================================================\r\n\r\n/**\r\n * 학습 내용(Learning)의 추가, 수정, 삭제 및 폼 상태 관리를 담당하는 커스텀 훅\r\n * @param bookId 현재 서적 ID\r\n */\r\nexport const useLearningManager = (bookId: string) => {\r\n  const queryClient = useQueryClient()\r\n  \r\n  // 폼 및 액션 관련 상태\r\n  const [editingLearningId, setEditingLearningId] = useState<string | null>(null)\r\n  const [editingChapterId, setEditingChapterId] = useState<string | null>(null)\r\n  const [currentFormData, setCurrentFormData] = useState<LearningFormData>({ topic: '', content: '' })\r\n  const [showAddForm, setShowAddForm] = useState(false)\r\n  const [apiError, setApiError] = useState<string | null>(null)\r\n\r\n  // React Query Mutations\r\n  const createMutation = useCreateLearning(bookId)\r\n  const updateMutation = useUpdateLearning(bookId)\r\n  const deleteMutation = useDeleteLearning(bookId)\r\n  const updateSkillsMutation = useUpdateLearningSkills(bookId)  // 🌟 스킬 업데이트 Mutation 추가\r\n\r\n  const isSaving = createMutation.isPending || updateMutation.isPending || deleteMutation.isPending || updateSkillsMutation.isPending\r\n\r\n  // 폼 닫기/초기화 공통 로직\r\n  const resetFormState = () => {\r\n    setEditingLearningId(null)\r\n    setEditingChapterId(null)\r\n    setCurrentFormData({ topic: '', content: '' })\r\n    setShowAddForm(false)\r\n  }\r\n\r\n  // 학습 내용 추가 폼 표시/숨김 토글\r\n  const handleToggleAddForm = () => {\r\n    if (editingLearningId) {\r\n      handleCancelEdit()\r\n    }\r\n    if (showAddForm) {\r\n      setCurrentFormData({ topic: '', content: '' })\r\n    }\r\n    setShowAddForm(prev => !prev)\r\n    setApiError(null)\r\n  }\r\n\r\n  // 🌟 학습 내용 추가 (React Query Mutation 사용)\r\n  const handleAddLearning = async () => {\r\n    if (!currentFormData.topic || !currentFormData.content) return\r\n\r\n    try {\r\n      setApiError(null)\r\n      await createMutation.mutateAsync(currentFormData)\r\n      resetFormState()\r\n    } catch (error) {\r\n      console.error('Failed to add learning:', error)\r\n      setApiError('학습 내용 추가에 실패했습니다.')\r\n    }\r\n  }\r\n\r\n  // 🌟 학습 내용 삭제 (목차 기반/직접 학습 내용 구분)\r\n  const handleDeleteLearning = async (learningId: string, chapterId?: string) => {\r\n    if (!confirm('이 학습 내용을 삭제하시겠습니까?')) return\r\n\r\n    try {\r\n      setApiError(null)\r\n      \r\n      // 목차 기반 학습 내용인 경우\r\n      if (chapterId) {\r\n        await learningsAPI.deleteForChapter(bookId, chapterId, learningId)\r\n        console.log('✅ 목차 학습 내용 삭제 성공')\r\n      } else {\r\n        // 직접 학습 내용인 경우\r\n        await deleteMutation.mutateAsync(learningId)\r\n      }\r\n      \r\n      // 캐시 무효화\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', bookId] })\r\n      queryClient.invalidateQueries({ queryKey: ['chapters', bookId] })\r\n    } catch (error) {\r\n      console.error('Failed to delete learning:', error)\r\n      setApiError('학습 내용 삭제에 실패했습니다.')\r\n    }\r\n  }\r\n\r\n  // 학습 내용 수정 시작\r\n  const handleStartEdit = (learning: Learning, chapterId?: string) => {\r\n    setShowAddForm(false)\r\n    setEditingLearningId(learning._id)\r\n    setEditingChapterId(chapterId || null)\r\n    setCurrentFormData({ topic: learning.topic, content: learning.content })\r\n    setApiError(null)\r\n  }\r\n\r\n  // 🌟 학습 내용 수정 저장 (목차 기반/직접 학습 내용 구분)\r\n  const handleSaveEdit = async () => {\r\n    if (!editingLearningId || !currentFormData.topic || !currentFormData.content) return\r\n\r\n    try {\r\n      setApiError(null)\r\n      \r\n      // 목차 기반 학습 내용인 경우\r\n      if (editingChapterId) {\r\n        const response = await learningsAPI.updateForChapter(\r\n          bookId, \r\n          editingChapterId, \r\n          editingLearningId, \r\n          currentFormData\r\n        )\r\n        console.log('✅ 목차 학습 내용 수정 성공:', response.data)\r\n      } else {\r\n        // 직접 학습 내용인 경우\r\n        await updateMutation.mutateAsync({\r\n          learningId: editingLearningId,\r\n          data: currentFormData\r\n        })\r\n      }\r\n      \r\n      // 캐시 무효화\r\n      queryClient.invalidateQueries({ queryKey: [BOOK_QUERY_KEY, 'detail', bookId] })\r\n      queryClient.invalidateQueries({ queryKey: ['chapters', bookId] })\r\n      \r\n      resetFormState()\r\n    } catch (error) {\r\n      console.error('Failed to update learning:', error)\r\n      setApiError('학습 내용 수정에 실패했습니다.')\r\n    }\r\n  }\r\n\r\n  // 학습 내용 수정 취소\r\n  const handleCancelEdit = () => {\r\n    resetFormState()\r\n    setApiError(null)\r\n  }\r\n\r\n  // =================================================================\r\n  // 🌟 스킬 연결/해제 핸들러 (낙관적 업데이트 포함)\r\n  // =================================================================\r\n\r\n  /**\r\n   * 특정 학습 내용에 스킬을 연결하거나 해제합니다.\r\n   * 낙관적 업데이트를 사용하여 UI 반응 속도를 높입니다.\r\n   */\r\n  const handleSkillLinkChange = async (learningId: string, skillId: string, isLinked: boolean) => {\r\n    const queryKey = [BOOK_QUERY_KEY, 'detail', bookId]\r\n    const chaptersQueryKey = ['chapters', bookId]\r\n    \r\n    // 1. Optimistic Update를 위한 현재 캐시 가져오기\r\n    const previousBook = queryClient.getQueryData<Book>(queryKey)\r\n    const previousChapters = queryClient.getQueryData<Chapter[]>(chaptersQueryKey)\r\n\r\n    try {\r\n      setApiError(null)\r\n\r\n      // 2. 새로운 skillIds 배열 계산\r\n      let newSkillIds: string[] = []\r\n      \r\n      // 현재 학습 내용을 찾기\r\n      const currentLearning = (previousChapters || []).flatMap(c => c.learnings || []).find(l => l._id === learningId)\r\n                              || (previousBook?.learnings || []).find(l => l._id === learningId)\r\n\r\n      if (currentLearning) {\r\n        const currentSkillIds = currentLearning.skillIds || []\r\n        if (isLinked) {\r\n          // 연결: skillId 추가 (중복 방지)\r\n          newSkillIds = Array.from(new Set([...currentSkillIds, skillId]))\r\n        } else {\r\n          // 해제: skillId 제거\r\n          newSkillIds = currentSkillIds.filter((id: string) => id !== skillId)\r\n        }\r\n      } else {\r\n        // Learning을 찾을 수 없는 경우\r\n        newSkillIds = isLinked ? [skillId] : []\r\n      }\r\n      \r\n      // 3. Optimistic Update 실행: chapters 캐시 업데이트\r\n      if (previousChapters) {\r\n        queryClient.setQueryData<Chapter[]>(chaptersQueryKey, (oldChapters) => {\r\n          if (!oldChapters) return oldChapters\r\n          \r\n          return oldChapters.map((chapter) => ({\r\n            ...chapter,\r\n            learnings: (chapter.learnings || []).map((learning) => \r\n              learning._id === learningId ? { ...learning, skillIds: newSkillIds } : learning\r\n            )\r\n          }))\r\n        })\r\n      }\r\n      \r\n      // Book 캐시도 업데이트 (기존 learnings 지원)\r\n      if (previousBook) {\r\n        queryClient.setQueryData<Book>(queryKey, (oldBook) => {\r\n          if (!oldBook) return oldBook\r\n          \r\n          // 목차 기반일 경우\r\n          if (oldBook.chapters && oldBook.chapters.length > 0) {\r\n            return {\r\n              ...oldBook,\r\n              chapters: oldBook.chapters.map((chapter: Chapter) => ({\r\n                ...chapter,\r\n                learnings: (chapter.learnings || []).map((learning: Learning) => \r\n                  learning._id === learningId ? { ...learning, skillIds: newSkillIds } : learning\r\n                )\r\n              }))\r\n            }\r\n          }\r\n          \r\n          // 기존 학습 내용 리스트 기반일 경우\r\n          return {\r\n            ...oldBook,\r\n            learnings: (oldBook.learnings || []).map((learning: Learning) => \r\n              learning._id === learningId ? { ...learning, skillIds: newSkillIds } : learning\r\n            )\r\n          }\r\n        })\r\n      }\r\n\r\n      // 4. 서버 API 호출\r\n      await updateSkillsMutation.mutateAsync({ learningId, skillIds: newSkillIds })\r\n\r\n    } catch (error) {\r\n      console.error('Failed to update learning skills:', error)\r\n      setApiError('스킬 연결/해제에 실패했습니다.')\r\n\r\n      // 5. 에러 발생 시 롤백: 이전 데이터로 복원\r\n      if (previousChapters) {\r\n        queryClient.setQueryData(chaptersQueryKey, previousChapters)\r\n      }\r\n      if (previousBook) {\r\n        queryClient.setQueryData(queryKey, previousBook)\r\n      } else {\r\n        // 이전 데이터가 없으면 캐시를 무효화하여 서버에서 다시 가져오도록 합니다\r\n        queryClient.invalidateQueries({ queryKey })\r\n        queryClient.invalidateQueries({ queryKey: chaptersQueryKey })\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    editingLearningId,\r\n    currentFormData,\r\n    setCurrentFormData,\r\n    showAddForm,\r\n    isSaving,\r\n    learningApiError: apiError,\r\n    handleToggleAddForm,\r\n    handleAddLearning,\r\n    handleDeleteLearning,\r\n    handleStartEdit,\r\n    handleSaveEdit,\r\n    handleCancelEdit,\r\n    handleSkillLinkChange,  // 🌟 새로운 핸들러 추가\r\n  }\r\n}\r\n","/**\r\n * 텍스트 포맷팅 및 마크다운 관련 유틸리티 함수들\r\n */\r\nimport React from 'react'\r\n\r\n/**\r\n * 마크다운 스타일 텍스트를 HTML로 변환 (정밀한 버전)\r\n * @param text - 마크다운 스타일의 텍스트\r\n * @returns HTML 문자열\r\n */\r\nexport const parseMarkdown = (text: string): string => {\r\n  if (!text) return ''\r\n  \r\n  return text\r\n    // 코드 블록: ```code``` (먼저 처리하여 다른 마크다운과 충돌 방지)\r\n    .replace(/```([\\s\\S]*?)```/g, '<pre class=\"bg-gray-100 dark:bg-gray-800 p-4 rounded-lg overflow-x-auto my-4\"><code class=\"text-sm font-mono\">$1</code></pre>')\r\n    \r\n    // 인라인 코드: `code` (코드 블록 처리 후)\r\n    .replace(/`([^`]+)`/g, '<code class=\"bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded text-sm font-mono\">$1</code>')\r\n    \r\n    // 볼드체: **text** 또는 __text__ (이탤릭체보다 먼저 처리)\r\n    .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\r\n    .replace(/__(.*?)__/g, '<strong>$1</strong>')\r\n    \r\n    // 이탤릭체: *text* 또는 _text_ (볼드체 처리 후, 경계 명확화)\r\n    .replace(/(^|[^*])\\*([^*\\s][^*]*[^*\\s]|[^*\\s])\\*([^*]|$)/g, '$1<em>$2</em>$3')\r\n    .replace(/(^|[^_])\\_([^_\\s][^_]*[^_\\s]|[^_\\s])\\_([^_]|$)/g, '$1<em>$2</em>$3')\r\n    \r\n    // 링크: [text](url)\r\n    .replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" class=\"text-primary-600 hover:text-primary-700 underline\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>')\r\n    \r\n    // 헤더: # ## ###\r\n    .replace(/^### (.*$)/gm, '<h3 class=\"text-lg font-semibold text-gray-900 dark:text-white mt-4 mb-2\">$1</h3>')\r\n    .replace(/^## (.*$)/gm, '<h2 class=\"text-xl font-semibold text-gray-900 dark:text-white mt-4 mb-2\">$1</h2>')\r\n    .replace(/^# (.*$)/gm, '<h1 class=\"text-2xl font-bold text-gray-900 dark:text-white mt-4 mb-2\">$1</h1>')\r\n    \r\n    // 목록: - item 또는 * item\r\n    .replace(/^[\\s]*[-*] (.*$)/gm, '<li class=\"ml-4\">$1</li>')\r\n    .replace(/(<li class=\"ml-4\">.*<\\/li>)/s, '<ul class=\"list-disc list-inside my-2\">$1</ul>')\r\n    \r\n    // 블록 인용: > quote\r\n    .replace(/^> (.*$)/gm, '<blockquote class=\"border-l-4 border-primary-500 pl-4 italic text-gray-600 dark:text-gray-400 my-2\">$1</blockquote>')\r\n    \r\n    // 수평선: ---\r\n    .replace(/^---$/gm, '<hr class=\"border-gray-300 dark:border-gray-600 my-4\">')\r\n    \r\n    // 줄바꿈을 <br>로 변환 (마지막에 처리)\r\n    .replace(/\\n/g, '<br>')\r\n}\r\n\r\n/**\r\n * 텍스트를 안전하게 HTML로 렌더링하기 위한 함수\r\n * @param text - 변환할 텍스트\r\n * @returns JSX 요소\r\n */\r\nexport const renderFormattedText = (text: string): React.ReactElement => {\r\n  const htmlContent = parseMarkdown(text)\r\n  \r\n  return React.createElement('div', {\r\n    className: \"text-gray-600 dark:text-gray-300 leading-relaxed\",\r\n    dangerouslySetInnerHTML: { __html: htmlContent }\r\n  })\r\n}\r\n\r\n/**\r\n * 텍스트 길이에 따라 요약본 생성\r\n * @param text - 원본 텍스트\r\n * @param maxLength - 최대 길이\r\n * @returns 요약된 텍스트\r\n */\r\nexport const truncateText = (text: string, maxLength: number = 100): string => {\r\n  if (!text) return ''\r\n  if (text.length <= maxLength) return text\r\n  \r\n  return text.substring(0, maxLength).trim() + '...'\r\n}\r\n\r\n/**\r\n * 텍스트에서 해시태그 추출\r\n * @param text - 검색할 텍스트\r\n * @returns 해시태그 배열\r\n */\r\nexport const extractHashtags = (text: string): string[] => {\r\n  if (!text) return []\r\n  \r\n  const hashtagRegex = /#[\\w가-힣]+/g\r\n  const matches = text.match(hashtagRegex)\r\n  \r\n  return matches ? matches.map(tag => tag.substring(1)) : []\r\n}\r\n\r\n/**\r\n * 텍스트에서 멘션(@username) 추출\r\n * @param text - 검색할 텍스트\r\n * @returns 멘션 배열\r\n */\r\nexport const extractMentions = (text: string): string[] => {\r\n  if (!text) return []\r\n  \r\n  const mentionRegex = /@[\\w가-힣]+/g\r\n  const matches = text.match(mentionRegex)\r\n  \r\n  return matches ? matches.map(mention => mention.substring(1)) : []\r\n}\r\n\r\n/**\r\n * 텍스트를 읽기 시간으로 변환 (분 단위)\r\n * @param text - 텍스트\r\n * @param wordsPerMinute - 분당 읽는 단어 수 (기본값: 200)\r\n * @returns 읽기 시간 (분)\r\n */\r\nexport const calculateReadingTime = (text: string, wordsPerMinute: number = 200): number => {\r\n  if (!text) return 0\r\n  \r\n  const words = text.trim().split(/\\s+/).length\r\n  const minutes = Math.ceil(words / wordsPerMinute)\r\n  \r\n  return Math.max(1, minutes) // 최소 1분\r\n}\r\n\r\n/**\r\n * 읽기 시간을 포맷팅하여 표시 문자열로 변환\r\n * @param minutes - 읽기 시간 (분)\r\n * @returns 표시 문자열 (예: \"5분 읽기\")\r\n */\r\nexport const formatReadingTime = (minutes: number): string => {\r\n  if (minutes === 0) return '읽기 시간 없음'\r\n  if (minutes === 1) return '1분 읽기'\r\n  return `${minutes}분 읽기`\r\n}\r\n\r\n/**\r\n * 텍스트에서 읽기 시간을 계산하고 포맷팅\r\n * @param text - 텍스트\r\n * @param wordsPerMinute - 분당 읽는 단어 수 (기본값: 200)\r\n * @returns 포맷팅된 읽기 시간 문자열\r\n */\r\nexport const getFormattedReadingTime = (text: string, wordsPerMinute: number = 200): string => {\r\n  const minutes = calculateReadingTime(text, wordsPerMinute)\r\n  return formatReadingTime(minutes)\r\n}\r\n\r\n/**\r\n * 텍스트에서 단어 수를 계산\r\n * @param text - 텍스트\r\n * @returns 단어 수\r\n */\r\nexport const getWordCount = (text: string): number => {\r\n  if (!text) return 0\r\n  return text.trim().split(/\\s+/).length\r\n}\r\n\r\n/**\r\n * 텍스트에서 문자 수를 계산 (공백 포함/제외)\r\n * @param text - 텍스트\r\n * @param includeSpaces - 공백 포함 여부 (기본값: true)\r\n * @returns 문자 수\r\n */\r\nexport const getCharacterCount = (text: string, includeSpaces: boolean = true): number => {\r\n  if (!text) return 0\r\n  return includeSpaces ? text.length : text.replace(/\\s/g, '').length\r\n}\r\n\r\n/**\r\n * 텍스트에서 문장 수를 계산\r\n * @param text - 텍스트\r\n * @returns 문장 수\r\n */\r\nexport const getSentenceCount = (text: string): number => {\r\n  if (!text) return 0\r\n  const sentences = text.split(/[.!?]+/).filter(sentence => sentence.trim().length > 0)\r\n  return sentences.length\r\n}\r\n\r\n/**\r\n * 텍스트의 가독성 점수를 계산 (간단한 버전)\r\n * @param text - 텍스트\r\n * @returns 가독성 점수 (0-100, 높을수록 읽기 쉬움)\r\n */\r\nexport const calculateReadabilityScore = (text: string): number => {\r\n  if (!text) return 0\r\n  \r\n  const words = getWordCount(text)\r\n  const sentences = getSentenceCount(text)\r\n  const characters = getCharacterCount(text, false)\r\n  \r\n  if (words === 0 || sentences === 0) return 0\r\n  \r\n  // 간단한 가독성 공식 (Flesch Reading Ease 기반)\r\n  const avgWordsPerSentence = words / sentences\r\n  const avgSyllablesPerWord = characters / words * 0.5 // 근사치\r\n  \r\n  const score = 206.835 - (1.015 * avgWordsPerSentence) - (84.6 * avgSyllablesPerWord)\r\n  \r\n  return Math.max(0, Math.min(100, Math.round(score)))\r\n}\r\n\r\n/**\r\n * 텍스트를 안전하게 HTML 이스케이프 처리\r\n * @param text - 이스케이프할 텍스트\r\n * @returns 이스케이프된 HTML 문자열\r\n */\r\nexport const escapeHtml = (text: string): string => {\r\n  if (!text) return ''\r\n  \r\n  return text\r\n    .replace(/&/g, '&amp;')\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;')\r\n    .replace(/\"/g, '&quot;')\r\n    .replace(/'/g, '&#39;')\r\n}\r\n\r\n/**\r\n * 텍스트에서 URL을 자동으로 링크로 변환\r\n * @param text - 텍스트\r\n * @returns URL이 링크로 변환된 텍스트\r\n */\r\nexport const autoLinkUrls = (text: string): string => {\r\n  if (!text) return ''\r\n  \r\n  const urlRegex = /(https?:\\/\\/[^\\s]+)/g\r\n  return text.replace(urlRegex, '<a href=\"$1\" class=\"text-primary-600 hover:text-primary-700 underline\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>')\r\n}\r\n\r\n/**\r\n * 텍스트에서 이메일 주소를 자동으로 링크로 변환\r\n * @param text - 텍스트\r\n * @returns 이메일이 링크로 변환된 텍스트\r\n */\r\nexport const autoLinkEmails = (text: string): string => {\r\n  if (!text) return ''\r\n  \r\n  const emailRegex = /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/g\r\n  return text.replace(emailRegex, '<a href=\"mailto:$1\" class=\"text-primary-600 hover:text-primary-700 underline\">$1</a>')\r\n}\r\n\r\n/**\r\n * 텍스트를 완전히 포맷팅 (마크다운 + 자동 링크)\r\n * @param text - 포맷팅할 텍스트\r\n * @returns 완전히 포맷팅된 HTML 문자열\r\n */\r\nexport const formatTextCompletely = (text: string): string => {\r\n  if (!text) return ''\r\n  \r\n  // 마크다운 파싱\r\n  let formatted = parseMarkdown(text)\r\n  // 자동 URL 링크\r\n  formatted = autoLinkUrls(formatted)\r\n  // 자동 이메일 링크\r\n  formatted = autoLinkEmails(formatted)\r\n  \r\n  return formatted\r\n}\r\n","import React, { useMemo } from 'react'\r\nimport { motion } from 'framer-motion'\r\nimport { FaEdit, FaTrash, FaTag } from 'react-icons/fa'\r\nimport { Link } from 'react-router-dom'\r\nimport { Learning, Skill } from '../../types'\r\nimport { formatDate, formatRelativeDate } from '../../utils/dateUtils'\r\nimport { parseMarkdown, getFormattedReadingTime } from '../../utils/textUtils'\r\nimport RichTextEditor from '../RichTextEditor'\r\n\r\n// 🌟 BookDetail.tsx에서 전달받는 Skill Map의 값 타입\r\ninterface SkillWithLevel extends Skill {\r\n  levelText: string\r\n}\r\n\r\ninterface LearningItemProps {\r\n  learning: Learning\r\n  index: number\r\n  isAuthenticated: boolean\r\n  isEditing: boolean\r\n  currentFormData: { topic: string; content: string }\r\n  setCurrentFormData: React.Dispatch<React.SetStateAction<{ topic: string; content: string }>>\r\n  onStartEdit: (learning: Learning, chapterId?: string) => void\r\n  onSaveEdit: () => void\r\n  onCancelEdit: () => void\r\n  onDelete: (learningId: string, chapterId?: string) => void\r\n  isSaving?: boolean\r\n  // 🌟 NEW PROP 1: 전체 스킬 목록 맵 (ID로 스킬 정보를 찾는 용도)\r\n  allSkillsMap?: Map<string, SkillWithLevel>\r\n  // 🌟 NEW PROP 2: 스킬 연결/해제 핸들러 (useLearningManager에 구현 필요)\r\n  onSkillLinkChange?: (learningId: string, skillId: string, isLinked: boolean) => void\r\n  // 🌟 NEW PROP 3: 목차 ID (목차 기반 학습 내용인 경우)\r\n  chapterId?: string\r\n}\r\n\r\n/**\r\n * 개별 학습 내용 아이템 컴포넌트\r\n * 학습 내용의 표시, 수정, 삭제 기능을 제공합니다.\r\n */\r\nconst LearningItem: React.FC<LearningItemProps> = ({\r\n  learning,\r\n  index,\r\n  isAuthenticated,\r\n  isEditing,\r\n  currentFormData,\r\n  setCurrentFormData,\r\n  onStartEdit,\r\n  onSaveEdit,\r\n  onCancelEdit,\r\n  onDelete,\r\n  isSaving = false,\r\n  allSkillsMap,\r\n  onSkillLinkChange,\r\n  chapterId,\r\n}) => {\r\n  \r\n  // 🌟 1. 현재 학습 내용에 연결된 스킬 목록 추출 (기본 보기용)\r\n  const linkedSkills = useMemo(() => {\r\n    if (!allSkillsMap) return []\r\n    return (learning.skillIds || [])\r\n      .map(skillId => allSkillsMap.get(skillId))\r\n      .filter((skill): skill is SkillWithLevel => !!skill)\r\n  }, [learning.skillIds, allSkillsMap])\r\n  \r\n  // 🌟 2. 관리자 수정 모드에서 스킬 연결/해제 토글 핸들러\r\n  const handleSkillToggle = (skillId: string) => {\r\n    if (!onSkillLinkChange) return\r\n    const isLinked = learning.skillIds?.includes(skillId) || false\r\n    // 부모 컴포넌트(BookDetail)의 핸들러를 호출하여 LearningManager를 통해 상태 업데이트\r\n    onSkillLinkChange(learning._id, skillId, !isLinked)\r\n  }\r\n\r\n  // 🌟 3. 편집 모드에서 사용할 수 있는 전체 스킬 목록 (Map의 값을 배열로 변환)\r\n  const availableSkills = useMemo(() => {\r\n    if (!allSkillsMap) return []\r\n    return Array.from(allSkillsMap.values())\r\n  }, [allSkillsMap])\r\n\r\n  // 🌟 4. 색상을 동적으로 적용하는 스타일 생성 함수 (배지용)\r\n  const getBadgeStyle = (colorCode: string) => {\r\n    // 배경색에 10%의 투명도를 적용하여 은은하게 표시\r\n    const bgColor = `${colorCode}1A`\r\n    const textColor = colorCode\r\n    \r\n    return {\r\n      backgroundColor: bgColor,\r\n      color: textColor,\r\n    } as React.CSSProperties\r\n  }\r\n  \r\n  // 🌟 5. 색상을 동적으로 적용하는 스타일 생성 함수 (버튼용)\r\n  const getButtonStyle = (colorCode: string) => {\r\n    return {\r\n      backgroundColor: colorCode,\r\n      color: '#FFFFFF',\r\n    } as React.CSSProperties\r\n  }\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, y: 20 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      transition={{ delay: 0.1 * index }}\r\n      className={`card p-6 ${isEditing ? 'border-2 border-primary-500 shadow-xl' : ''}`}\r\n    >\r\n      {isEditing ? (\r\n        // 🌟 [수정 폼 렌더링]\r\n        <div className=\"space-y-4\">\r\n          <div>\r\n            <label htmlFor=\"topic\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n              학습 주제\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"topic\"\r\n              value={currentFormData.topic}\r\n              onChange={(e) => setCurrentFormData(prev => ({ ...prev, topic: e.target.value }))}\r\n              placeholder=\"학습 주제를 입력하세요\"\r\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"content\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n              학습 내용\r\n            </label>\r\n            <RichTextEditor\r\n              value={currentFormData.content}\r\n              onChange={(value) => setCurrentFormData(prev => ({ ...prev, content: value }))}\r\n              placeholder=\"학습 내용을 입력하세요. 리치텍스트 에디터를 사용하여 다양한 서식을 적용할 수 있습니다.\"\r\n              rows={8}\r\n              className=\"min-h-[200px]\"\r\n            />\r\n          </div>\r\n\r\n          {/* 🌟 [추가] 스킬 연결 섹션 (관리자용) */}\r\n          {isAuthenticated && allSkillsMap && availableSkills.length > 0 && (\r\n            <div className=\"pt-4 border-t border-gray-200 dark:border-gray-700\">\r\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3 flex items-center gap-2\">\r\n                <FaTag size={14} className=\"text-primary-600\" /> 관련 스킬 연결 ({learning.skillIds?.length || 0}개 연결됨)\r\n              </label>\r\n              {/* 스킬 선택 버튼 목록 */}\r\n              <div className=\"flex flex-wrap gap-2 max-h-40 overflow-y-auto p-2 rounded-lg bg-gray-50 dark:bg-gray-700/50\">\r\n                {availableSkills.map(skill => {\r\n                  const isLinked = learning.skillIds?.includes(skill._id!)\r\n                  // 🌟 동적 스타일 적용\r\n                  const dynamicStyle = skill.color && isLinked ? getButtonStyle(skill.color) : undefined\r\n\r\n                  return (\r\n                    <button\r\n                      key={skill._id}\r\n                      onClick={() => handleSkillToggle(skill._id!)}\r\n                      type=\"button\"\r\n                      className={`px-3 py-1 text-xs font-medium rounded-full transition-all ${\r\n                        isLinked\r\n                          ? 'text-white hover:opacity-80'\r\n                          : 'bg-gray-200 text-gray-700 dark:bg-gray-600 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-500'\r\n                      }`}\r\n                      style={dynamicStyle}\r\n                    >\r\n                      {isLinked ? '✔️' : '➕'} {skill.name}\r\n                    </button>\r\n                  )\r\n                })}\r\n              </div>\r\n            </div>\r\n          )}\r\n          {/* 🌟 스킬 연결 섹션 끝 */}\r\n\r\n          <div className=\"flex gap-3 pt-4\">\r\n            <button\r\n              onClick={() => onSaveEdit()}\r\n              disabled={isSaving || !currentFormData.topic.trim() || !currentFormData.content.trim()}\r\n              className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors flex items-center justify-center gap-2\"\r\n            >\r\n              {isSaving ? '저장 중...' : '수정'}\r\n            </button>\r\n            <button\r\n              onClick={onCancelEdit}\r\n              className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors\"\r\n            >\r\n              취소\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        // 🌟 [기본 보기 렌더링]\r\n        <>\r\n          <div className=\"flex items-start justify-between mb-3\">\r\n            <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\r\n              {learning.topic}\r\n            </h3>\r\n            {isAuthenticated && (\r\n              <div className=\"flex gap-1\">\r\n                <button\r\n                  onClick={() => onStartEdit(learning, chapterId)}\r\n                  className=\"p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 text-blue-600 dark:text-blue-400\"\r\n                  aria-label=\"수정\"\r\n                >\r\n                  <FaEdit size={16} />\r\n                </button>\r\n                <button\r\n                  onClick={() => onDelete(learning._id, chapterId)}\r\n                  className=\"p-2 rounded-lg hover:bg-red-100 dark:hover:bg-red-900/30 text-red-600 dark:text-red-400\"\r\n                  aria-label=\"삭제\"\r\n                >\r\n                  <FaTrash size={16} />\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n          \r\n          {/* 🌟 [추가] 연결된 스킬 배지 목록 (기본 보기) */}\r\n          {linkedSkills.length > 0 && (\r\n            <div className=\"flex flex-wrap items-start gap-2 mb-4\">\r\n              <FaTag size={16} className=\"text-gray-500 dark:text-gray-400 mt-1 shrink-0\" title=\"관련 스킬\" />\r\n              {linkedSkills.map(skill => {\r\n                // 🌟 동적 스타일 적용\r\n                const badgeStyle = skill.color ? getBadgeStyle(skill.color) : undefined\r\n\r\n                return (\r\n                  <Link\r\n                    key={skill._id}\r\n                    to={`/projects?skillId=${skill._id}`}\r\n                    title={`${skill.name} 스킬이 사용된 프로젝트 보기`}\r\n                    className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium transition-all hover:opacity-80 hover:ring-2\"\r\n                    style={{\r\n                      ...badgeStyle,\r\n                      '--tw-ring-color': skill.color || '#3B82F6',\r\n                    } as React.CSSProperties}\r\n                  >\r\n                    {skill.name}\r\n                  </Link>\r\n                )\r\n              })}\r\n            </div>\r\n          )}\r\n          {/* 🌟 연결된 스킬 배지 목록 끝 */}\r\n\r\n          <div \r\n            className=\"text-gray-600 dark:text-gray-300 leading-relaxed prose prose-sm max-w-none dark:prose-invert\"\r\n            dangerouslySetInnerHTML={{ __html: parseMarkdown(learning.content) }}\r\n          />\r\n          <div className=\"mt-4 text-sm text-gray-500 dark:text-gray-500\">\r\n            작성일: {formatDate(learning.createdAt)} ({formatRelativeDate(learning.createdAt)}) • {getFormattedReadingTime(learning.content)}\r\n          </div>\r\n        </>\r\n      )}\r\n    </motion.div>\r\n  )\r\n}\r\n\r\nexport default LearningItem\r\n","import React, { useMemo, useState } from 'react'\r\nimport { motion, AnimatePresence } from 'framer-motion'\r\nimport { useParams, Link, useNavigate, useLocation } from 'react-router-dom'\r\nimport { FaArrowLeft, FaBook, FaStar, FaCalendar, FaEdit, FaTrash, FaPlus, FaChevronRight, FaCubes } from 'react-icons/fa'\r\nimport { useAuth } from '../contexts/AuthContext'\r\nimport { formatDate } from '../utils/dateUtils'\r\nimport { Chapter, Skill } from '../types'\r\nimport { useBook, useDeleteBook } from '../hooks/useBooks'\r\nimport { useLearningManager } from '../hooks/useLearningManager'\r\n// 목차 관리 관련 import 제거됨 - 중복 출력 문제 해결\r\nimport LearningItem from './common/LearningItem'\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { chaptersAPI } from '../services/api'\r\nimport { useSkills } from '../hooks/useSkills'\r\nimport RichTextEditor from './RichTextEditor'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { getLocalizedField } from '@/utils/i18nUtils'\r\n\r\nconst BookDetail: React.FC = () => {\r\n  const { id } = useParams<{ id: string }>()\r\n  const navigate = useNavigate()\r\n  const location = useLocation()\r\n  const { isAuthenticated } = useAuth()\r\n  const { i18n } = useTranslation()\r\n  const currentLang = i18n.language as 'ko' | 'en' | 'ja'\r\n  \r\n  // 🌟 React Query로 서적 데이터 조회\r\n  const { data: book, isLoading: loading, isError, error } = useBook(id)\r\n  \r\n  // 🌟 React Query로 목차 데이터 조회\r\n  const { data: bookChapters = [] } = useQuery<Chapter[], Error>({\r\n    queryKey: ['chapters', id],\r\n    queryFn: async () => {\r\n      if (!id) return []\r\n      const response = await chaptersAPI.getByBook(id)\r\n      return response.data?.data || response.data || []\r\n    },\r\n    enabled: !!id,\r\n    staleTime: 5 * 60 * 1000,\r\n  })\r\n  \r\n  // 🌟 스킬 목록 가져오기\r\n  const { skillCategories } = useSkills()\r\n  \r\n  // 🌟 React Query로 서적 삭제\r\n  const deleteMutation = useDeleteBook()\r\n  \r\n  const bookApiError = isError ? (error?.message || '서적 정보를 불러오는 데 실패했습니다.') : null\r\n\r\n  // 목차 관리 관련 상태 제거됨 - 중복 출력 문제 해결\r\n\r\n  // 💡 커스텀 훅 사용: 학습 내용 상태와 핸들러를 가져옵니다.\r\n  const {\r\n    editingLearningId,\r\n    currentFormData,\r\n    setCurrentFormData,\r\n    showAddForm,\r\n    isSaving,\r\n    learningApiError,\r\n    handleToggleAddForm,\r\n    handleAddLearning,\r\n    handleDeleteLearning,\r\n    handleStartEdit,\r\n    handleSaveEdit,\r\n    handleCancelEdit,\r\n    handleSkillLinkChange,  // 🌟 스킬 연결 핸들러 추가\r\n  } = useLearningManager(id!)\r\n  \r\n  // 🌟 확장 상태 관리 (아코디언 UI)\r\n  const [expandedChapterId, setExpandedChapterId] = useState<string | null>(null)\r\n  \r\n  // 챕터 확장/축소 토글 함수\r\n  const toggleChapter = (chapterId: string) => {\r\n    setExpandedChapterId(prevId => (prevId === chapterId ? null : chapterId))\r\n  }\r\n\r\n  // =================================================================\r\n  // 📚 스킬 데이터 처리 로직 (useMemo로 최적화)\r\n  // =================================================================\r\n\r\n  // 🌟 전체 책에 연결된 스킬 목록 필터링 및 가공\r\n  const linkedBookSkills = useMemo<Array<Skill & { levelText: string }>>(() => {\r\n    if (!bookChapters || !skillCategories) return []\r\n\r\n    const allSkills = skillCategories.flatMap(category => category.skills || [])\r\n    \r\n    // 1. 모든 챕터의 모든 학습 내용에서 고유한 skillIds를 추출\r\n    const uniqueSkillIds = new Set<string>()\r\n    bookChapters.forEach(chapter => {\r\n      (chapter.learnings || []).forEach(learning => {\r\n        // 학습 내용에 skillIds 필드가 있다고 가정\r\n        (learning.skillIds || []).forEach((skillId: string) => {\r\n          uniqueSkillIds.add(skillId)\r\n        })\r\n      })\r\n    })\r\n    \r\n    if (uniqueSkillIds.size === 0) return []\r\n\r\n    // 2. Skills.tsx의 레벨 텍스트 로직 재사용\r\n    const getLevelText = (level: number) => {\r\n      if (level >= 90) return 'Expert'\r\n      if (level >= 70) return 'Proficient'\r\n      if (level >= 50) return 'Competent'\r\n      return 'Basic'\r\n    }\r\n\r\n    // 3. 필터링 및 가공\r\n    return allSkills\r\n      .filter(skill => skill._id && uniqueSkillIds.has(skill._id))\r\n      .map(skill => ({\r\n        ...skill,\r\n        levelText: getLevelText(skill.level || 0),\r\n      }))\r\n  }, [bookChapters, skillCategories])\r\n\r\n  // 🌟 개별 학습 내용에서 스킬 ID를 객체로 변환하기 위한 Map\r\n  const allSkillsMap = useMemo(() => {\r\n    const map = new Map<string, Skill & { levelText: string }>()\r\n    linkedBookSkills.forEach(skill => skill._id && map.set(skill._id, skill))\r\n    return map\r\n  }, [linkedBookSkills])\r\n\r\n  // 🌟 색상을 동적으로 적용하는 스타일 생성 함수 (배지용)\r\n  const getBadgeStyle = (colorCode: string) => {\r\n    // 배경색에 15%의 투명도를 적용하여 은은하게 표시\r\n    const bgColor = `${colorCode}26`\r\n    const textColor = colorCode\r\n    \r\n    return {\r\n      backgroundColor: bgColor,\r\n      color: textColor,\r\n    } as React.CSSProperties\r\n  }\r\n\r\n  // =================================================================\r\n  // 📚 서적 삭제 핸들러\r\n  // =================================================================\r\n\r\n  // 🌟 React Query Mutation을 사용한 서적 삭제\r\n  const handleDeleteBook = async () => {\r\n    if (!confirm('이 서적을 삭제하시겠습니까? 관련 학습 내용도 모두 사라집니다.')) return\r\n\r\n    try {\r\n      await deleteMutation.mutateAsync(id!)\r\n      navigate('/books')\r\n    } catch (error) {\r\n      console.error('Failed to delete book:', error)\r\n    }\r\n  }\r\n  \r\n  const isDeleting = deleteMutation.isPending\r\n\r\n  // 목차 관리 핸들러들 제거됨 - 중복 출력 문제 해결\r\n\r\n  // 💡 기존의 학습 내용 핸들러들은 useLearningManager 훅으로 이동하여 삭제됨\r\n\r\n  // 학습 내용 정렬 (useMemo 사용으로 성능 최적화)\r\n  const sortedLearnings = useMemo(() => {\r\n    if (!book?.learnings) return []\r\n    \r\n    return [...book.learnings].sort((a, b) => {\r\n      // 최신순(내림차순) 정렬\r\n      return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\r\n    })\r\n  }, [book?.learnings])\r\n\r\n  // =================================================================\r\n  // ⚙️ 렌더링 및 로딩/에러 처리\r\n  // =================================================================\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center\">\r\n        <div className=\"w-12 h-12 border-4 border-primary-600 border-t-transparent rounded-full animate-spin\"></div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (!book) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <FaBook className=\"text-6xl text-gray-400 mx-auto mb-4\" />\r\n          <p className=\"text-xl text-gray-600 dark:text-gray-400\">서적을 찾을 수 없습니다</p>\r\n          <Link \r\n            to=\"/books\" \r\n            state={location.state}\r\n            className=\"text-primary-600 hover:text-primary-700 mt-4 inline-block\"\r\n          >\r\n            목록으로 돌아가기\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // 별점 렌더링 함수\r\n  const renderRatingStars = (rating: number) => {\r\n    return Array.from({ length: 5 }, (_, i) => (\r\n      <FaStar \r\n        key={i} \r\n        className={i < rating ? 'text-yellow-500' : 'text-gray-300 dark:text-gray-600'} \r\n      />\r\n    ))\r\n  }\r\n\r\n  return (\r\n    <section className=\"section-padding bg-white dark:bg-dark-900 min-h-screen\">\r\n      <div className=\"max-w-5xl mx-auto\">\r\n        {/* 에러 메시지: bookApiError와 learningApiError를 모두 표시 */}\r\n        {(bookApiError || learningApiError) && (\r\n          <motion.div \r\n            initial={{ opacity: 0, y: -20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            className=\"p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-dark-800 dark:text-red-400\" \r\n            role=\"alert\"\r\n          >\r\n            {bookApiError || learningApiError}\r\n          </motion.div>\r\n        )}\r\n\r\n        {/* Header */}\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          className=\"mb-8\"\r\n        >\r\n          <Link\r\n            to=\"/books\"\r\n            state={location.state}\r\n            className=\"inline-flex items-center gap-2 text-primary-600 hover:text-primary-700 mb-6\"\r\n          >\r\n            <FaArrowLeft /> 목록으로 돌아가기\r\n          </Link>\r\n        </motion.div>\r\n\r\n        {/* Book Info */}\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          className=\"card p-8 mb-8\"\r\n        >\r\n          <div className=\"grid md:grid-cols-3 gap-8\">\r\n            <div>\r\n              {book.coverImage ? (\r\n                <img\r\n                  src={book.coverImage}\r\n                  alt={book.title}\r\n                  className=\"w-full h-auto object-cover rounded-lg shadow-lg\"\r\n                  loading=\"eager\"\r\n                  decoding=\"async\"\r\n                  width=\"400\"\r\n                  height=\"533\"\r\n                />\r\n              ) : (\r\n                <div className=\"w-full aspect-[3/4] bg-gradient-to-br from-primary-400 to-blue-500 rounded-lg flex items-center justify-center\">\r\n                  <FaBook className=\"text-white text-6xl\" />\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className=\"md:col-span-2\">\r\n              <div className=\"flex items-start justify-between mb-4\">\r\n                <div className=\"flex flex-wrap gap-2\">\r\n                  {/* 카테고리 배지 (복수 표시) */}\r\n                  {book.categoryIds && book.categoryIds.length > 0 ? (\r\n                    (book.categoryIds as any[]).map((catIdOrObj: any) => {\r\n                      const catName = typeof catIdOrObj === 'string' ? catIdOrObj : catIdOrObj?.name\r\n                      return catName ? (\r\n                        <span \r\n                          key={typeof catIdOrObj === 'string' ? catIdOrObj : catIdOrObj?._id}\r\n                          className=\"px-3 py-1 bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 rounded-full text-sm font-medium\"\r\n                        >\r\n                          {catName}\r\n                        </span>\r\n                      ) : null\r\n                    })\r\n                  ) : (\r\n                    // 호환성: categoryIds가 없으면 기존 category 표시\r\n                    book.category && (\r\n                      <span className=\"px-3 py-1 bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 rounded-full text-sm font-medium\">\r\n                        {book.category}\r\n                      </span>\r\n                    )\r\n                  )}\r\n                </div>\r\n                {isAuthenticated && (\r\n                  <div className=\"flex gap-2\">\r\n                    <Link\r\n                      to={`/admin`}\r\n                      state={{ tab: 'books', editId: book._id }}\r\n                      className=\"p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 text-blue-600 dark:text-blue-400\"\r\n                      aria-label=\"서적 수정\"\r\n                    >\r\n                      <FaEdit />\r\n                    </Link>\r\n                    <button\r\n                      onClick={handleDeleteBook}\r\n                      disabled={isDeleting}\r\n                      className={`p-2 rounded-lg text-red-600 dark:text-red-400 transition-colors ${\r\n                        isDeleting \r\n                          ? 'opacity-50 cursor-not-allowed' \r\n                          : 'hover:bg-gray-100 dark:hover:bg-gray-700'\r\n                      }`}\r\n                      aria-label=\"서적 삭제\"\r\n                    >\r\n                      {isDeleting ? (\r\n                        <div className=\"w-4 h-4 border-2 border-red-600 border-t-transparent rounded-full animate-spin\" />\r\n                      ) : (\r\n                        <FaTrash />\r\n                      )}\r\n                    </button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-2\">\r\n                {getLocalizedField(currentLang, book.title, book.titleEn, book.titleJa)}\r\n              </h1>\r\n              <p className=\"text-xl text-gray-600 dark:text-gray-400 mb-6\">\r\n                {getLocalizedField(currentLang, book.author, book.authorEn, book.authorJa)}\r\n              </p>\r\n              <div className=\"flex flex-wrap gap-6 text-gray-600 dark:text-gray-400\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  {renderRatingStars(book.rating)}\r\n                  <span className=\"font-medium ml-1\">{book.rating}/5</span>\r\n                </div>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <FaCalendar />\r\n                  <span>읽은 날짜: {formatDate(book.readDate)}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </motion.div>\r\n\r\n        {/* 🌟 이 책을 통해 학습한 핵심 스킬 섹션 */}\r\n        {linkedBookSkills.length > 0 && (\r\n          <motion.div\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ delay: 0.1 }}\r\n            className=\"card p-6 mb-8\"\r\n          >\r\n            <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-4 flex items-center gap-2\">\r\n              <FaCubes className=\"text-primary-600\" /> 이 책을 통해 학습한 핵심 스킬\r\n            </h3>\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              {linkedBookSkills.map(skill => {\r\n                // 🌟 동적 스타일 적용\r\n                const badgeStyle = skill.color ? getBadgeStyle(skill.color) : undefined\r\n\r\n                return (\r\n                  <Link\r\n                    key={skill._id}\r\n                    to={`/projects?skillId=${skill._id}`}\r\n                    title={`${skill.name} 스킬이 사용된 모든 프로젝트 보기`}\r\n                    className=\"inline-flex items-center px-3 py-1 rounded-lg text-sm font-medium hover:ring-2 transition-all hover:opacity-80\"\r\n                    style={{\r\n                      ...badgeStyle,\r\n                      '--tw-ring-color': skill.color || '#3B82F6',\r\n                    } as React.CSSProperties}\r\n                  >\r\n                    {skill.name}\r\n                    <span \r\n                      className=\"ml-1 text-xs font-semibold\"\r\n                      style={{ color: skill.color || '#3B82F6' }}\r\n                    >\r\n                      [{skill.levelText}]\r\n                    </span>\r\n                  </Link>\r\n                )\r\n              })}\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n\r\n        {/* Learnings Section */}\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ delay: 0.2 }}\r\n        >\r\n          <div className=\"flex items-center justify-between mb-6\">\r\n            <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n              학습 내용\r\n            </h2>\r\n            {isAuthenticated && (!bookChapters || bookChapters.length === 0) && (\r\n              <button\r\n                onClick={handleToggleAddForm}\r\n                className=\"flex items-center gap-2 bg-primary-600 hover:bg-primary-700 text-white font-medium px-4 py-2 rounded-lg transition-colors\"\r\n              >\r\n                <FaPlus /> {showAddForm ? '추가 취소' : '새 내용 추가'}\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          {/* Add Learning Form */}\r\n          <AnimatePresence>\r\n            {showAddForm && (\r\n              <motion.div\r\n                initial={{ opacity: 0, height: 0 }}\r\n                animate={{ opacity: 1, height: 'auto' }}\r\n                exit={{ opacity: 0, height: 0 }}\r\n                className=\"card p-6 mb-6 overflow-hidden\"\r\n              >\r\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                  새 학습 내용 추가\r\n                </h3>\r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <label htmlFor=\"topic\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                      학습 주제\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"topic\"\r\n                      value={currentFormData.topic}\r\n                      onChange={(e) => setCurrentFormData(prev => ({ ...prev, topic: e.target.value }))}\r\n                      placeholder=\"학습 주제를 입력하세요\"\r\n                      className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label htmlFor=\"content\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                      학습 내용\r\n                    </label>\r\n                    <RichTextEditor\r\n                      value={currentFormData.content}\r\n                      onChange={(value) => setCurrentFormData(prev => ({ ...prev, content: value }))}\r\n                      placeholder=\"학습 내용을 입력하세요. 리치텍스트 에디터를 사용하여 다양한 서식을 적용할 수 있습니다.\"\r\n                      rows={8}\r\n                      className=\"min-h-[200px]\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"flex gap-3 pt-4\">\r\n                    <button\r\n                      onClick={handleAddLearning}\r\n                      disabled={isSaving || !currentFormData.topic.trim() || !currentFormData.content.trim()}\r\n                      className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors flex items-center justify-center gap-2\"\r\n                    >\r\n                      {isSaving ? '저장 중...' : '추가'}\r\n                    </button>\r\n                    <button\r\n                      onClick={handleToggleAddForm}\r\n                      className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors\"\r\n                    >\r\n                      취소\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </motion.div>\r\n            )}\r\n          </AnimatePresence>\r\n\r\n          {/* 학습 내용 리스트 - 아코디언 버전 */}\r\n          {(() => {\r\n            // 목차 기반 학습 내용이 있는 경우\r\n            if (bookChapters && bookChapters.length > 0) {\r\n              return (\r\n                <div className=\"space-y-4\">\r\n                  {bookChapters.map((chapter) => {\r\n                    // 🌟 현재 챕터가 확장되었는지 확인\r\n                    const isExpanded = expandedChapterId === chapter._id\r\n                    \r\n                    return (\r\n                      <div key={chapter._id} className=\"card p-6 border border-gray-200 dark:border-gray-700\">\r\n                        \r\n                        {/* 🌟 챕터 제목 (클릭 가능한 아코디언 헤더) */}\r\n                        <div \r\n                          className=\"flex items-center justify-between cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800 -m-6 p-6 rounded-lg transition-colors\"\r\n                          onClick={() => toggleChapter(chapter._id!)}\r\n                        >\r\n                          <h3 className=\"text-xl font-bold text-gray-900 dark:text-white flex-1\">\r\n                            {chapter.title}\r\n                            <span className=\"ml-3 text-sm font-normal text-gray-500 dark:text-gray-400\">\r\n                              ({(chapter.learnings || []).length}개의 학습 내용)\r\n                            </span>\r\n                          </h3>\r\n                          {/* 🌟 확장/축소 아이콘 */}\r\n                          <motion.span\r\n                            animate={{ rotate: isExpanded ? 90 : 0 }}\r\n                            transition={{ duration: 0.3 }}\r\n                            className=\"text-primary-600 dark:text-primary-400 text-xl ml-4\"\r\n                          >\r\n                            <FaChevronRight />\r\n                          </motion.span>\r\n                        </div>\r\n\r\n                        {/* 🌟 학습 내용 (아코디언 바디) */}\r\n                        <AnimatePresence>\r\n                          {isExpanded && (\r\n                            <motion.div\r\n                              initial={{ opacity: 0, height: 0 }}\r\n                              animate={{ opacity: 1, height: 'auto' }}\r\n                              exit={{ opacity: 0, height: 0 }}\r\n                              transition={{ duration: 0.3, ease: \"easeInOut\" }}\r\n                              className=\"overflow-hidden\"\r\n                            >\r\n                              <div className=\"space-y-6 pt-6 mt-6 border-t border-gray-200 dark:border-gray-700\">\r\n                                {(chapter.learnings || []).map((learning, index: number) => (\r\n                                  <LearningItem \r\n                                    key={learning._id}\r\n                                    learning={learning}\r\n                                    index={index}\r\n                                    isAuthenticated={isAuthenticated}\r\n                                    isEditing={editingLearningId === learning._id}\r\n                                    currentFormData={currentFormData}\r\n                                    setCurrentFormData={setCurrentFormData}\r\n                                    onStartEdit={handleStartEdit}\r\n                                    onSaveEdit={handleSaveEdit}\r\n                                    onCancelEdit={handleCancelEdit}\r\n                                    onDelete={handleDeleteLearning}\r\n                                    isSaving={isSaving}\r\n                                    allSkillsMap={allSkillsMap}  // 🌟 스킬 맵 전달\r\n                                    onSkillLinkChange={handleSkillLinkChange}  // 🌟 스킬 연결 핸들러 전달\r\n                                    chapterId={chapter._id}  // 🌟 목차 ID 전달\r\n                                  />\r\n                                ))}\r\n                                {(!chapter.learnings || chapter.learnings.length === 0) && (\r\n                                  <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\r\n                                    이 목차에는 아직 학습 내용이 없습니다.\r\n                                  </div>\r\n                                )}\r\n                              </div>\r\n                            </motion.div>\r\n                          )}\r\n                        </AnimatePresence>\r\n                      </div>\r\n                    )\r\n                  })}\r\n                </div>\r\n              )\r\n            }\r\n            // 기존 학습 내용이 있는 경우\r\n            else if (sortedLearnings.length > 0) {\r\n              return (\r\n                <div className=\"space-y-6\">\r\n                  {sortedLearnings.map((learning, index) => (\r\n                    <LearningItem \r\n                      key={learning._id}\r\n                      learning={learning}\r\n                      index={index}\r\n                      isAuthenticated={isAuthenticated}\r\n                      isEditing={editingLearningId === learning._id}\r\n                      currentFormData={currentFormData}\r\n                      setCurrentFormData={setCurrentFormData}\r\n                      onStartEdit={handleStartEdit}\r\n                      onSaveEdit={handleSaveEdit}\r\n                      onCancelEdit={handleCancelEdit}\r\n                      onDelete={handleDeleteLearning}\r\n                      isSaving={isSaving}\r\n                      allSkillsMap={allSkillsMap}  // 🌟 스킬 맵 전달\r\n                      onSkillLinkChange={handleSkillLinkChange}  // 🌟 스킬 연결 핸들러 전달\r\n                    />\r\n                  ))}\r\n                </div>\r\n              )\r\n            }\r\n            // 학습 내용이 없는 경우\r\n            else {\r\n              return (\r\n                <div className=\"card p-12 text-center\">\r\n                  <FaBook className=\"text-6xl text-gray-400 mx-auto mb-4\" />\r\n                  <p className=\"text-xl text-gray-600 dark:text-gray-400\">\r\n                    아직 작성된 학습 내용이 없습니다\r\n                  </p>\r\n                </div>\r\n              )\r\n            }\r\n          })()}\r\n        </motion.div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default BookDetail\r\n\r\n// 💡 LearningForm과 LearningItem 컴포넌트는 별도 파일로 분리됨\r\n"],"names":["useLearningManager","bookId","queryClient","useQueryClient","editingLearningId","setEditingLearningId","useState","editingChapterId","setEditingChapterId","currentFormData","setCurrentFormData","topic","content","showAddForm","setShowAddForm","apiError","setApiError","createMutation","useMutation","mutationFn","async","data","learningsAPI","createForBook","onSuccess","invalidateQueries","queryKey","BOOK_QUERY_KEY","useCreateLearning","updateMutation","learningId","updateForBook","useUpdateLearning","deleteMutation","deleteForBook","useDeleteLearning","updateSkillsMutation","skillIds","updateSkills","useUpdateLearningSkills","isSaving","isPending","resetFormState","handleCancelEdit","learningApiError","handleToggleAddForm","prev","handleAddLearning","mutateAsync","error","handleDeleteLearning","chapterId","confirm","deleteForChapter","handleStartEdit","learning","_id","handleSaveEdit","updateForChapter","handleSkillLinkChange","skillId","isLinked","chaptersQueryKey","previousBook","getQueryData","previousChapters","newSkillIds","currentLearning","flatMap","c","learnings","find","l","currentSkillIds","Array","from","Set","filter","id","setQueryData","oldChapters","map","chapter","oldBook","chapters","length","getFormattedReadingTime","text","wordsPerMinute","minutes","words","trim","split","Math","ceil","max","calculateReadingTime","formatReadingTime","LearningItem","index","isAuthenticated","isEditing","onStartEdit","onSaveEdit","onCancelEdit","onDelete","allSkillsMap","onSkillLinkChange","linkedSkills","useMemo","get","skill","availableSkills","values","jsxRuntimeExports","jsx","motion","div","initial","opacity","y","animate","transition","delay","className","children","jsxs","htmlFor","type","value","onChange","e","target","placeholder","RichTextEditor","rows","FaTag","size","_a","includes","dynamicStyle","color","backgroundColor","onClick","handleSkillToggle","style","name","disabled","Fragment","FaEdit","FaTrash","title","badgeStyle","colorCode","Link","to","dangerouslySetInnerHTML","__html","replace","formatDate","createdAt","formatRelativeDate","BookDetail","useParams","navigate","useNavigate","location","useLocation","useAuth","i18n","useTranslation","currentLang","language","book","isLoading","loading","isError","useBook","bookChapters","useQuery","queryFn","response","chaptersAPI","getByBook","enabled","staleTime","skillCategories","useSkills","useDeleteBook","bookApiError","message","expandedChapterId","setExpandedChapterId","linkedBookSkills","allSkills","category","skills","uniqueSkillIds","forEach","add","has","levelText","level","Map","set","isDeleting","sortedLearnings","sort","a","b","Date","getTime","FaBook","state","role","FaArrowLeft","coverImage","src","alt","decoding","width","height","categoryIds","catIdOrObj","catName","tab","editId","getLocalizedField","titleEn","titleJa","author","authorEn","authorJa","rating","_","i","FaStar","FaCalendar","readDate","FaCubes","FaPlus","AnimatePresence","exit","isExpanded","toggleChapter","prevId","span","rotate","duration","FaChevronRight","ease"],"mappings":"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"}